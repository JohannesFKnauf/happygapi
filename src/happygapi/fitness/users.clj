(ns happygapi.fitness.users
  "Fitness
  Stores and accesses user data in the fitness store from apps on any platform.
  See: https://developers.google.com/fit/rest/"
  (:require [happygapi.util :as util]
            [clj-http.client :as http]
            [cheshire.core]))

(defn dataSources-create$
  "Required parameters: userId
  
  A data source is a unique source of sensor data. Data sources can expose raw data coming from hardware sensors on local or companion devices. They can also expose derived data, created by transforming or merging other data sources. Multiple data sources can exist for the same data type. Every data point in every dataset inserted into or read from the Fitness API has an associated data source.
  
  Each data source produces a unique stream of dataset updates, with a unique data source identifier. Not all changes to data source affect the data stream ID, so that data collected by updated versions of the same application/device can still be considered to belong to the same data source.
  
  Data sources are addressed using a string generated by the server, based on the contents of the source being created.
  
  Creates a new data source that is unique across all data sources belonging to this user. The dataStreamId field should be excluded. This will be automatically generated by the server with the correct format. If a dataStreamId is included, it must match the format that the server would generate. This format is a combination of some fields from the data source, and has a specific order. If it doesn't match, the request will fail with an error.
  
  In addition to the data source fields included in the data source ID, the developer project number that is authenticated when creating the data source is included. This developer project number is obfuscated when read by any other developer reading public data types."
  {:scopes ["https://www.googleapis.com/auth/fitness.activity.write"
            "https://www.googleapis.com/auth/fitness.blood_glucose.write"
            "https://www.googleapis.com/auth/fitness.blood_pressure.write"
            "https://www.googleapis.com/auth/fitness.body.write"
            "https://www.googleapis.com/auth/fitness.body_temperature.write"
            "https://www.googleapis.com/auth/fitness.location.write"
            "https://www.googleapis.com/auth/fitness.nutrition.write"
            "https://www.googleapis.com/auth/fitness.oxygen_saturation.write"
            "https://www.googleapis.com/auth/fitness.reproductive_health.write"]}
  [auth args body]
  {:pre [(util/has-keys? args #{"userId"})]}
  (util/get-response
   (http/post
    (util/get-url
     "https://www.googleapis.com/fitness/v1/users/"
     "{userId}/dataSources"
     #{"userId"}
     args)
    (merge-with
     merge
     {:throw-exceptions false,
      :query-params args,
      :accept :json,
      :as :json,
      :content-type :json,
      :body body}
     auth))))

(defn dataSources-delete$
  "Required parameters: dataSourceId,userId
  
  Deletes the specified data source. The request will fail if the data source contains any data points."
  {:scopes ["https://www.googleapis.com/auth/fitness.activity.write"
            "https://www.googleapis.com/auth/fitness.blood_glucose.write"
            "https://www.googleapis.com/auth/fitness.blood_pressure.write"
            "https://www.googleapis.com/auth/fitness.body.write"
            "https://www.googleapis.com/auth/fitness.body_temperature.write"
            "https://www.googleapis.com/auth/fitness.location.write"
            "https://www.googleapis.com/auth/fitness.nutrition.write"
            "https://www.googleapis.com/auth/fitness.oxygen_saturation.write"
            "https://www.googleapis.com/auth/fitness.reproductive_health.write"]}
  [auth args]
  {:pre [(util/has-keys? args #{"dataSourceId" "userId"})]}
  (util/get-response
   (http/delete
    (util/get-url
     "https://www.googleapis.com/fitness/v1/users/"
     "{userId}/dataSources/{dataSourceId}"
     #{"dataSourceId" "userId"}
     args)
    (merge-with
     merge
     {:throw-exceptions false,
      :query-params args,
      :accept :json,
      :as :json}
     auth))))

(defn dataSources-get$
  "Required parameters: dataSourceId,userId
  
  Returns the specified data source."
  {:scopes ["https://www.googleapis.com/auth/fitness.activity.read"
            "https://www.googleapis.com/auth/fitness.activity.write"
            "https://www.googleapis.com/auth/fitness.blood_glucose.read"
            "https://www.googleapis.com/auth/fitness.blood_glucose.write"
            "https://www.googleapis.com/auth/fitness.blood_pressure.read"
            "https://www.googleapis.com/auth/fitness.blood_pressure.write"
            "https://www.googleapis.com/auth/fitness.body.read"
            "https://www.googleapis.com/auth/fitness.body.write"
            "https://www.googleapis.com/auth/fitness.body_temperature.read"
            "https://www.googleapis.com/auth/fitness.body_temperature.write"
            "https://www.googleapis.com/auth/fitness.location.read"
            "https://www.googleapis.com/auth/fitness.location.write"
            "https://www.googleapis.com/auth/fitness.nutrition.read"
            "https://www.googleapis.com/auth/fitness.nutrition.write"
            "https://www.googleapis.com/auth/fitness.oxygen_saturation.read"
            "https://www.googleapis.com/auth/fitness.oxygen_saturation.write"
            "https://www.googleapis.com/auth/fitness.reproductive_health.read"
            "https://www.googleapis.com/auth/fitness.reproductive_health.write"]}
  [auth args]
  {:pre [(util/has-keys? args #{"dataSourceId" "userId"})]}
  (util/get-response
   (http/get
    (util/get-url
     "https://www.googleapis.com/fitness/v1/users/"
     "{userId}/dataSources/{dataSourceId}"
     #{"dataSourceId" "userId"}
     args)
    (merge-with
     merge
     {:throw-exceptions false,
      :query-params args,
      :accept :json,
      :as :json}
     auth))))

(defn dataSources-list$
  "Required parameters: userId
  
  Lists all data sources that are visible to the developer, using the OAuth scopes provided. The list is not exhaustive; the user may have private data sources that are only visible to other developers, or calls using other scopes."
  {:scopes ["https://www.googleapis.com/auth/fitness.activity.read"
            "https://www.googleapis.com/auth/fitness.activity.write"
            "https://www.googleapis.com/auth/fitness.blood_glucose.read"
            "https://www.googleapis.com/auth/fitness.blood_glucose.write"
            "https://www.googleapis.com/auth/fitness.blood_pressure.read"
            "https://www.googleapis.com/auth/fitness.blood_pressure.write"
            "https://www.googleapis.com/auth/fitness.body.read"
            "https://www.googleapis.com/auth/fitness.body.write"
            "https://www.googleapis.com/auth/fitness.body_temperature.read"
            "https://www.googleapis.com/auth/fitness.body_temperature.write"
            "https://www.googleapis.com/auth/fitness.location.read"
            "https://www.googleapis.com/auth/fitness.location.write"
            "https://www.googleapis.com/auth/fitness.nutrition.read"
            "https://www.googleapis.com/auth/fitness.nutrition.write"
            "https://www.googleapis.com/auth/fitness.oxygen_saturation.read"
            "https://www.googleapis.com/auth/fitness.oxygen_saturation.write"
            "https://www.googleapis.com/auth/fitness.reproductive_health.read"
            "https://www.googleapis.com/auth/fitness.reproductive_health.write"]}
  [auth args]
  {:pre [(util/has-keys? args #{"userId"})]}
  (util/get-response
   (http/get
    (util/get-url
     "https://www.googleapis.com/fitness/v1/users/"
     "{userId}/dataSources"
     #{"userId"}
     args)
    (merge-with
     merge
     {:throw-exceptions false,
      :query-params args,
      :accept :json,
      :as :json}
     auth))))

(defn dataSources-update$
  "Required parameters: dataSourceId,userId
  
  Updates the specified data source. The dataStreamId, dataType, type, dataStreamName, and device properties with the exception of version, cannot be modified.
  
  Data sources are identified by their dataStreamId."
  {:scopes ["https://www.googleapis.com/auth/fitness.activity.write"
            "https://www.googleapis.com/auth/fitness.blood_glucose.write"
            "https://www.googleapis.com/auth/fitness.blood_pressure.write"
            "https://www.googleapis.com/auth/fitness.body.write"
            "https://www.googleapis.com/auth/fitness.body_temperature.write"
            "https://www.googleapis.com/auth/fitness.location.write"
            "https://www.googleapis.com/auth/fitness.nutrition.write"
            "https://www.googleapis.com/auth/fitness.oxygen_saturation.write"
            "https://www.googleapis.com/auth/fitness.reproductive_health.write"]}
  [auth args]
  {:pre [(util/has-keys? args #{"dataSourceId" "userId"})]}
  (util/get-response
   (http/put
    (util/get-url
     "https://www.googleapis.com/fitness/v1/users/"
     "{userId}/dataSources/{dataSourceId}"
     #{"dataSourceId" "userId"}
     args)
    (merge-with
     merge
     {:throw-exceptions false,
      :query-params args,
      :accept :json,
      :as :json}
     auth))))

(defn dataSources-dataPointChanges-list$
  "Required parameters: dataSourceId,userId
  
  Queries for user's data point changes for a particular data source."
  {:scopes ["https://www.googleapis.com/auth/fitness.activity.read"
            "https://www.googleapis.com/auth/fitness.activity.write"
            "https://www.googleapis.com/auth/fitness.blood_glucose.read"
            "https://www.googleapis.com/auth/fitness.blood_glucose.write"
            "https://www.googleapis.com/auth/fitness.blood_pressure.read"
            "https://www.googleapis.com/auth/fitness.blood_pressure.write"
            "https://www.googleapis.com/auth/fitness.body.read"
            "https://www.googleapis.com/auth/fitness.body.write"
            "https://www.googleapis.com/auth/fitness.body_temperature.read"
            "https://www.googleapis.com/auth/fitness.body_temperature.write"
            "https://www.googleapis.com/auth/fitness.location.read"
            "https://www.googleapis.com/auth/fitness.location.write"
            "https://www.googleapis.com/auth/fitness.nutrition.read"
            "https://www.googleapis.com/auth/fitness.nutrition.write"
            "https://www.googleapis.com/auth/fitness.oxygen_saturation.read"
            "https://www.googleapis.com/auth/fitness.oxygen_saturation.write"
            "https://www.googleapis.com/auth/fitness.reproductive_health.read"
            "https://www.googleapis.com/auth/fitness.reproductive_health.write"]}
  [auth args]
  {:pre [(util/has-keys? args #{"dataSourceId" "userId"})]}
  (util/get-response
   (http/get
    (util/get-url
     "https://www.googleapis.com/fitness/v1/users/"
     "{userId}/dataSources/{dataSourceId}/dataPointChanges"
     #{"dataSourceId" "userId"}
     args)
    (merge-with
     merge
     {:throw-exceptions false,
      :query-params args,
      :accept :json,
      :as :json}
     auth))))

(defn dataSources-datasets-delete$
  "Required parameters: dataSourceId,datasetId,userId
  
  Performs an inclusive delete of all data points whose start and end times have any overlap with the time range specified by the dataset ID. For most data types, the entire data point will be deleted. For data types where the time span represents a consistent value (such as com.google.activity.segment), and a data point straddles either end point of the dataset, only the overlapping portion of the data point will be deleted."
  {:scopes ["https://www.googleapis.com/auth/fitness.activity.write"
            "https://www.googleapis.com/auth/fitness.blood_glucose.write"
            "https://www.googleapis.com/auth/fitness.blood_pressure.write"
            "https://www.googleapis.com/auth/fitness.body.write"
            "https://www.googleapis.com/auth/fitness.body_temperature.write"
            "https://www.googleapis.com/auth/fitness.location.write"
            "https://www.googleapis.com/auth/fitness.nutrition.write"
            "https://www.googleapis.com/auth/fitness.oxygen_saturation.write"
            "https://www.googleapis.com/auth/fitness.reproductive_health.write"]}
  [auth args]
  {:pre [(util/has-keys? args #{"dataSourceId" "userId" "datasetId"})]}
  (util/get-response
   (http/delete
    (util/get-url
     "https://www.googleapis.com/fitness/v1/users/"
     "{userId}/dataSources/{dataSourceId}/datasets/{datasetId}"
     #{"dataSourceId" "userId" "datasetId"}
     args)
    (merge-with
     merge
     {:throw-exceptions false,
      :query-params args,
      :accept :json,
      :as :json}
     auth))))

(defn dataSources-datasets-get$
  "Required parameters: dataSourceId,datasetId,userId
  
  Returns a dataset containing all data points whose start and end times overlap with the specified range of the dataset minimum start time and maximum end time. Specifically, any data point whose start time is less than or equal to the dataset end time and whose end time is greater than or equal to the dataset start time."
  {:scopes ["https://www.googleapis.com/auth/fitness.activity.read"
            "https://www.googleapis.com/auth/fitness.activity.write"
            "https://www.googleapis.com/auth/fitness.blood_glucose.read"
            "https://www.googleapis.com/auth/fitness.blood_glucose.write"
            "https://www.googleapis.com/auth/fitness.blood_pressure.read"
            "https://www.googleapis.com/auth/fitness.blood_pressure.write"
            "https://www.googleapis.com/auth/fitness.body.read"
            "https://www.googleapis.com/auth/fitness.body.write"
            "https://www.googleapis.com/auth/fitness.body_temperature.read"
            "https://www.googleapis.com/auth/fitness.body_temperature.write"
            "https://www.googleapis.com/auth/fitness.location.read"
            "https://www.googleapis.com/auth/fitness.location.write"
            "https://www.googleapis.com/auth/fitness.nutrition.read"
            "https://www.googleapis.com/auth/fitness.nutrition.write"
            "https://www.googleapis.com/auth/fitness.oxygen_saturation.read"
            "https://www.googleapis.com/auth/fitness.oxygen_saturation.write"
            "https://www.googleapis.com/auth/fitness.reproductive_health.read"
            "https://www.googleapis.com/auth/fitness.reproductive_health.write"]}
  [auth args]
  {:pre [(util/has-keys? args #{"dataSourceId" "userId" "datasetId"})]}
  (util/get-response
   (http/get
    (util/get-url
     "https://www.googleapis.com/fitness/v1/users/"
     "{userId}/dataSources/{dataSourceId}/datasets/{datasetId}"
     #{"dataSourceId" "userId" "datasetId"}
     args)
    (merge-with
     merge
     {:throw-exceptions false,
      :query-params args,
      :accept :json,
      :as :json}
     auth))))

(defn dataSources-datasets-patch$
  "Required parameters: dataSourceId,datasetId,userId
  
  Adds data points to a dataset. The dataset need not be previously created. All points within the given dataset will be returned with subsquent calls to retrieve this dataset. Data points can belong to more than one dataset. This method does not use patch semantics."
  {:scopes ["https://www.googleapis.com/auth/fitness.activity.write"
            "https://www.googleapis.com/auth/fitness.blood_glucose.write"
            "https://www.googleapis.com/auth/fitness.blood_pressure.write"
            "https://www.googleapis.com/auth/fitness.body.write"
            "https://www.googleapis.com/auth/fitness.body_temperature.write"
            "https://www.googleapis.com/auth/fitness.location.write"
            "https://www.googleapis.com/auth/fitness.nutrition.write"
            "https://www.googleapis.com/auth/fitness.oxygen_saturation.write"
            "https://www.googleapis.com/auth/fitness.reproductive_health.write"]}
  [auth args]
  {:pre [(util/has-keys? args #{"dataSourceId" "userId" "datasetId"})]}
  (util/get-response
   (http/patch
    (util/get-url
     "https://www.googleapis.com/fitness/v1/users/"
     "{userId}/dataSources/{dataSourceId}/datasets/{datasetId}"
     #{"dataSourceId" "userId" "datasetId"}
     args)
    (merge-with
     merge
     {:throw-exceptions false,
      :query-params args,
      :accept :json,
      :as :json}
     auth))))

(defn dataset-aggregate$
  "Required parameters: userId
  
  Aggregates data of a certain type or stream into buckets divided by a given type of boundary. Multiple data sets of multiple types and from multiple sources can be aggregated into exactly one bucket type per request."
  {:scopes ["https://www.googleapis.com/auth/fitness.activity.read"
            "https://www.googleapis.com/auth/fitness.activity.write"
            "https://www.googleapis.com/auth/fitness.blood_glucose.read"
            "https://www.googleapis.com/auth/fitness.blood_glucose.write"
            "https://www.googleapis.com/auth/fitness.blood_pressure.read"
            "https://www.googleapis.com/auth/fitness.blood_pressure.write"
            "https://www.googleapis.com/auth/fitness.body.read"
            "https://www.googleapis.com/auth/fitness.body.write"
            "https://www.googleapis.com/auth/fitness.body_temperature.read"
            "https://www.googleapis.com/auth/fitness.body_temperature.write"
            "https://www.googleapis.com/auth/fitness.location.read"
            "https://www.googleapis.com/auth/fitness.location.write"
            "https://www.googleapis.com/auth/fitness.nutrition.read"
            "https://www.googleapis.com/auth/fitness.nutrition.write"
            "https://www.googleapis.com/auth/fitness.oxygen_saturation.read"
            "https://www.googleapis.com/auth/fitness.oxygen_saturation.write"
            "https://www.googleapis.com/auth/fitness.reproductive_health.read"
            "https://www.googleapis.com/auth/fitness.reproductive_health.write"]}
  [auth args body]
  {:pre [(util/has-keys? args #{"userId"})]}
  (util/get-response
   (http/post
    (util/get-url
     "https://www.googleapis.com/fitness/v1/users/"
     "{userId}/dataset:aggregate"
     #{"userId"}
     args)
    (merge-with
     merge
     {:throw-exceptions false,
      :query-params args,
      :accept :json,
      :as :json,
      :content-type :json,
      :body body}
     auth))))

(defn sessions-delete$
  "Required parameters: sessionId,userId
  
  Deletes a session specified by the given session ID."
  {:scopes ["https://www.googleapis.com/auth/fitness.activity.write"]}
  [auth args]
  {:pre [(util/has-keys? args #{"sessionId" "userId"})]}
  (util/get-response
   (http/delete
    (util/get-url
     "https://www.googleapis.com/fitness/v1/users/"
     "{userId}/sessions/{sessionId}"
     #{"sessionId" "userId"}
     args)
    (merge-with
     merge
     {:throw-exceptions false,
      :query-params args,
      :accept :json,
      :as :json}
     auth))))

(defn sessions-list$
  "Required parameters: userId
  
  Lists sessions previously created."
  {:scopes ["https://www.googleapis.com/auth/fitness.activity.read"
            "https://www.googleapis.com/auth/fitness.activity.write"
            "https://www.googleapis.com/auth/fitness.blood_glucose.read"
            "https://www.googleapis.com/auth/fitness.blood_glucose.write"
            "https://www.googleapis.com/auth/fitness.blood_pressure.read"
            "https://www.googleapis.com/auth/fitness.blood_pressure.write"
            "https://www.googleapis.com/auth/fitness.body.read"
            "https://www.googleapis.com/auth/fitness.body.write"
            "https://www.googleapis.com/auth/fitness.body_temperature.read"
            "https://www.googleapis.com/auth/fitness.body_temperature.write"
            "https://www.googleapis.com/auth/fitness.location.read"
            "https://www.googleapis.com/auth/fitness.location.write"
            "https://www.googleapis.com/auth/fitness.nutrition.read"
            "https://www.googleapis.com/auth/fitness.nutrition.write"
            "https://www.googleapis.com/auth/fitness.oxygen_saturation.read"
            "https://www.googleapis.com/auth/fitness.oxygen_saturation.write"
            "https://www.googleapis.com/auth/fitness.reproductive_health.read"
            "https://www.googleapis.com/auth/fitness.reproductive_health.write"]}
  [auth args]
  {:pre [(util/has-keys? args #{"userId"})]}
  (util/get-response
   (http/get
    (util/get-url
     "https://www.googleapis.com/fitness/v1/users/"
     "{userId}/sessions"
     #{"userId"}
     args)
    (merge-with
     merge
     {:throw-exceptions false,
      :query-params args,
      :accept :json,
      :as :json}
     auth))))

(defn sessions-update$
  "Required parameters: sessionId,userId
  
  Updates or insert a given session."
  {:scopes ["https://www.googleapis.com/auth/fitness.activity.write"]}
  [auth args]
  {:pre [(util/has-keys? args #{"sessionId" "userId"})]}
  (util/get-response
   (http/put
    (util/get-url
     "https://www.googleapis.com/fitness/v1/users/"
     "{userId}/sessions/{sessionId}"
     #{"sessionId" "userId"}
     args)
    (merge-with
     merge
     {:throw-exceptions false,
      :query-params args,
      :accept :json,
      :as :json}
     auth))))
