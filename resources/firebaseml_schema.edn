{:Empty {:description "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`.",
         :id "Empty",
         :properties {},
         :type "object"},
 :Operation {:description "This resource represents a long-running operation that is the result of a network API call.",
             :type "object",
             :properties {:error {:$ref "Status",
                                  :description "The error result of the operation in case of failure or cancellation."},
                          :response {:description "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                                     :type "object",
                                     :additionalProperties {:type "any",
                                                            :description "Properties of the object. Contains field @type with type URL."}},
                          :metadata {:additionalProperties {:type "any",
                                                            :description "Properties of the object. Contains field @type with type URL."},
                                     :description "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                                     :type "object"},
                          :done {:type "boolean",
                                 :description "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."},
                          :name {:description "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                                 :type "string"}},
             :id "Operation"},
 :CancelOperationRequest {:type "object",
                          :id "CancelOperationRequest",
                          :description "The request message for Operations.CancelOperation.",
                          :properties {}},
 :ListOperationsResponse {:id "ListOperationsResponse",
                          :properties {:operations {:description "A list of operations that matches the specified filter in the request.",
                                                    :items {:$ref "Operation"},
                                                    :type "array"},
                                       :nextPageToken {:type "string",
                                                       :description "The standard List next-page token."}},
                          :description "The response message for Operations.ListOperations.",
                          :type "object"},
 :ModelOperationMetadata {:type "object",
                          :id "ModelOperationMetadata",
                          :description "This is returned in the longrunning operations for create/update.",
                          :properties {:basicOperationStatus {:type "string",
                                                              :enum ["BASIC_OPERATION_STATUS_UNSPECIFIED"
                                                                     "BASIC_OPERATION_STATUS_UPLOADING"
                                                                     "BASIC_OPERATION_STATUS_VERIFYING"],
                                                              :enumDescriptions ["The status is unspecified"
                                                                                 "The model file is being uploaded"
                                                                                 "The model file is being verified"]},
                                       :name {:type "string",
                                              :description "The name of the model we are creating/updating The name must have the form `projects/{project_id}/models/{model_id}`"}}},
 :Status {:type "object",
          :properties {:message {:description "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
                                 :type "string"},
                       :code {:type "integer",
                              :description "The status code, which should be an enum value of google.rpc.Code.",
                              :format "int32"},
                       :details {:description "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                                 :type "array",
                                 :items {:additionalProperties {:type "any",
                                                                :description "Properties of the object. Contains field @type with type URL."},
                                         :type "object"}}},
          :id "Status",
          :description "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors)."}}
