{:Operation {:id "Operation",
             :description "This resource represents a long-running operation that is the result of a network API call.",
             :type "object",
             :properties {:metadata {:additionalProperties {:type "any",
                                                            :description "Properties of the object. Contains field @type with type URL."},
                                     :type "object",
                                     :description "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any."},
                          :done {:description "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                                 :type "boolean"},
                          :name {:type "string",
                                 :description "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."},
                          :error {:$ref "Status",
                                  :description "The error result of the operation in case of failure or cancellation."},
                          :response {:description "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                                     :additionalProperties {:description "Properties of the object. Contains field @type with type URL.",
                                                            :type "any"},
                                     :type "object"}}},
 :ListDockerImagesResponse {:description "The response from listing docker images.",
                            :properties {:nextPageToken {:type "string",
                                                         :description "The token to retrieve the next page of artifacts, or empty if there are no more artifacts to return."},
                                         :dockerImages {:items {:$ref "DockerImage"},
                                                        :type "array",
                                                        :description "The docker images returned."}},
                            :id "ListDockerImagesResponse",
                            :type "object"},
 :CancelOperationRequest {:properties {},
                          :type "object",
                          :description "The request message for Operations.CancelOperation.",
                          :id "CancelOperationRequest"},
 :Empty {:description "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`.",
         :properties {},
         :id "Empty",
         :type "object"},
 :DockerImage {:description "DockerImage represents a docker artifact. The following fields are returned as untyped metadata in the Version resource, using camelcase keys (i.e. metadata.imageSizeBytes): - imageSizeBytes - mediaType - buildTime",
               :id "DockerImage",
               :properties {:buildTime {:format "google-datetime",
                                        :type "string",
                                        :description "The time this image was built. This field is returned as the 'metadata.buildTime' field in the Version resource. The build time is returned to the client as an RFC 3339 string, which can be easily used with the JavaScript Date constructor and keeps the Version timestamps returned via OnePlatform consistent, as JSON marshals google.protobuf.Timestamp into an RFC 3339 string."},
                            :uploadTime {:description "Time the image was uploaded.",
                                         :format "google-datetime",
                                         :type "string"},
                            :uri {:description "Required. URL to access the image. Example: us-west4-docker.pkg.dev/test-project/test-repo/nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf",
                                  :type "string"},
                            :imageSizeBytes {:type "string",
                                             :description "Calculated size of the image. This field is returned as the 'metadata.imageSizeBytes' field in the Version resource.",
                                             :format "int64"},
                            :tags {:type "array",
                                   :items {:type "string"},
                                   :description "Tags attached to this image."},
                            :name {:type "string",
                                   :description "Required. registry_location, project_id, repository_name and image id forms a unique image name:`projects//locations//repository//dockerImages/`. For example, \"projects/test-project/locations/us-west4/repositories/test-repo/dockerImages/ nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf\", where \"us-west4\" is the registry_location, \"test-project\" is the project_id, \"test-repo\" is the repository_name and \"nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf\" is the image's digest."},
                            :mediaType {:type "string",
                                        :description "Media type of this image, e.g. \"application/vnd.docker.distribution.manifest.v2+json\". This field is returned as the 'metadata.mediaType' field in the Version resource."}},
               :type "object"},
 :ListRepositoriesResponse {:properties {:repositories {:items {:$ref "Repository"},
                                                        :type "array",
                                                        :description "The repositories returned."},
                                         :nextPageToken {:type "string",
                                                         :description "The token to retrieve the next page of repositories, or empty if there are no more repositories to return."}},
                            :type "object",
                            :description "The response from listing repositories.",
                            :id "ListRepositoriesResponse"},
 :ListOperationsResponse {:id "ListOperationsResponse",
                          :description "The response message for Operations.ListOperations.",
                          :properties {:nextPageToken {:description "The standard List next-page token.",
                                                       :type "string"},
                                       :operations {:type "array",
                                                    :description "A list of operations that matches the specified filter in the request.",
                                                    :items {:$ref "Operation"}}},
                          :type "object"},
 :Repository {:description "A Repository for storing artifacts with a specific format.",
              :properties {:name {:type "string",
                                  :description "The name of the repository, for example: \"projects/p1/locations/us-central1/repositories/repo1\"."},
                           :labels {:type "object",
                                    :description "Labels with user-defined metadata. This field may contain up to 64 entries. Label keys and values may be no longer than 63 characters. Label keys must begin with a lowercase letter and may only contain lowercase letters, numeric characters, underscores, and dashes.",
                                    :additionalProperties {:type "string"}},
                           :description {:type "string",
                                         :description "The user-provided description of the repository."},
                           :updateTime {:description "The time when the repository was last updated.",
                                        :format "google-datetime",
                                        :type "string"},
                           :kmsKeyName {:type "string",
                                        :description "The Cloud KMS resource name of the customer managed encryption key thatâ€™s used to encrypt the contents of the Repository. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. This value may not be changed after the Repository has been created."},
                           :createTime {:format "google-datetime",
                                        :type "string",
                                        :description "The time when the repository was created."},
                           :format {:description "The format of packages that are stored in the repository.",
                                    :enumDescriptions ["Unspecified package format."
                                                       "Docker package format."
                                                       "Maven package format."
                                                       "NPM package format."
                                                       "PyPI package format."
                                                       "Python package format."],
                                    :enum ["FORMAT_UNSPECIFIED"
                                           "DOCKER"
                                           "MAVEN"
                                           "NPM"
                                           "PYPI"
                                           "PYTHON"],
                                    :type "string"}},
              :id "Repository",
              :type "object"},
 :Status {:properties {:details {:items {:type "object",
                                         :additionalProperties {:type "any",
                                                                :description "Properties of the object. Contains field @type with type URL."}},
                                 :type "array",
                                 :description "A list of messages that carry the error details. There is a common set of message types for APIs to use."},
                       :code {:description "The status code, which should be an enum value of google.rpc.Code.",
                              :format "int32",
                              :type "integer"},
                       :message {:description "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
                                 :type "string"}},
          :description "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
          :id "Status",
          :type "object"}}
