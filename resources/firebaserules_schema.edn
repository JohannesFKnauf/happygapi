{:ListRulesetsResponse {:description "The response for FirebaseRulesService.ListRulesets.",
                        :id "ListRulesetsResponse",
                        :type "object",
                        :properties {:nextPageToken {:type "string",
                                                     :description "The pagination token to retrieve the next page of results. If the value is empty, no further results remain."},
                                     :rulesets {:description "List of `Ruleset` instances.",
                                                :type "array",
                                                :items {:$ref "Ruleset"}}}},
 :ValueCount {:type "object",
              :properties {:count {:description "The amount of times that expression returned.",
                                   :format "int32",
                                   :type "integer"},
                           :value {:type "any",
                                   :description "The return value of the expression"}},
              :description "Tuple for how many times an Expression was evaluated to a particular ExpressionValue.",
              :id "ValueCount"},
 :SourcePosition {:id "SourcePosition",
                  :type "object",
                  :properties {:fileName {:description "Name of the `File`.",
                                          :type "string"},
                               :endOffset {:description "End position relative to the beginning of the file.",
                                           :format "int32",
                                           :type "integer"},
                               :column {:type "integer",
                                        :format "int32",
                                        :description "First column on the source line associated with the source fragment."},
                               :line {:type "integer",
                                      :format "int32",
                                      :description "Line number of the source fragment. 1-based."},
                               :currentOffset {:type "integer",
                                               :format "int32",
                                               :description "Start position relative to the beginning of the file."}},
                  :description "Position in the `Source` content including its line, column number, and an index of the `File` in the `Source` message. Used for debug purposes."},
 :Release {:type "object",
           :properties {:rulesetName {:description "Name of the `Ruleset` referred to by this `Release`. The `Ruleset` must exist the `Release` to be created.",
                                      :type "string"},
                        :updateTime {:description "Output only. Time the release was updated.",
                                     :format "google-datetime",
                                     :type "string",
                                     :readOnly true},
                        :name {:description "Format: `projects/{project_id}/releases/{release_id}`",
                               :type "string"},
                        :createTime {:description "Output only. Time the release was created.",
                                     :readOnly true,
                                     :type "string",
                                     :format "google-datetime"}},
           :description "`Release` is a named reference to a `Ruleset`. Once a `Release` refers to a `Ruleset`, rules-enabled services will be able to enforce the `Ruleset`.",
           :id "Release"},
 :TestRulesetRequest {:type "object",
                      :id "TestRulesetRequest",
                      :properties {:testSuite {:description "The tests to execute against the `Source`. When `Source` is provided inline, the test cases will only be run if the `Source` is syntactically and semantically valid. Inline `TestSuite` to run.",
                                               :$ref "TestSuite"},
                                   :source {:description "Optional `Source` to be checked for correctness. This field must not be set when the resource name refers to a `Ruleset`.",
                                            :$ref "Source"}},
                      :description "The request for FirebaseRulesService.TestRuleset."},
 :Result {:type "object",
          :description "Possible result values from the function mock invocation.",
          :properties {:value {:description "The result is an actual value. The type of the value must match that of the type declared by the service.",
                               :type "any"},
                       :undefined {:$ref "Empty",
                                   :description "The result is undefined, meaning the result could not be computed."}},
          :id "Result"},
 :TestResult {:type "object",
              :properties {:state {:type "string",
                                   :enumDescriptions ["Test state is not set."
                                                      "Test is a success."
                                                      "Test is a failure."],
                                   :description "State of the test.",
                                   :enum ["STATE_UNSPECIFIED"
                                          "SUCCESS"
                                          "FAILURE"]},
                           :debugMessages {:items {:type "string"},
                                           :description "Debug messages related to test execution issues encountered during evaluation. Debug messages may be related to too many or too few invocations of function mocks or to runtime errors that occur during evaluation. For example: ```Unable to read variable [name: \"resource\"]```",
                                           :type "array"},
                           :functionCalls {:items {:$ref "FunctionCall"},
                                           :description "The set of function calls made to service-defined methods. Function calls are included in the order in which they are encountered during evaluation, are provided for both mocked and unmocked functions, and included on the response regardless of the test `state`.",
                                           :type "array"},
                           :expressionReports {:type "array",
                                               :description "The mapping from expression in the ruleset AST to the values they were evaluated to. Partially-nested to mirror AST structure. Note that this field is actually tracking expressions and not permission statements in contrast to the \"visited_expressions\" field above. Literal expressions are omitted.",
                                               :items {:$ref "ExpressionReport"}},
                           :errorPosition {:description "Position in the `Source` or `Ruleset` where the principle runtime error occurs. Evaluation of an expression may result in an error. Rules are deny by default, so a `DENY` expectation when an error is generated is valid. When there is a `DENY` with an error, the `SourcePosition` is returned. E.g. `error_position { line: 19 column: 37 }`",
                                           :$ref "SourcePosition"},
                           :visitedExpressions {:description "The set of visited permission expressions for a given test. This returns the positions and evaluation results of all visited permission expressions which were relevant to the test case, e.g. ``` match /path { allow read if: } ``` For a detailed report of the intermediate evaluation states, see the `expression_reports` field",
                                                :type "array",
                                                :items {:$ref "VisitedExpression"}}},
              :description "Test result message containing the state of the test as well as a description and source position for test failures.",
              :id "TestResult"},
 :Ruleset {:type "object",
           :id "Ruleset",
           :description "`Ruleset` is an immutable copy of `Source` with a globally unique identifier and a creation time.",
           :properties {:metadata {:readOnly true,
                                   :$ref "Metadata",
                                   :description "Output only. The metadata for this ruleset."},
                        :name {:readOnly true,
                               :type "string",
                               :description "Output only. Name of the `Ruleset`. The ruleset_id is auto generated by the service. Format: `projects/{project_id}/rulesets/{ruleset_id}`"},
                        :createTime {:type "string",
                                     :description "Output only. Time the `Ruleset` was created.",
                                     :readOnly true,
                                     :format "google-datetime"},
                        :source {:description "`Source` for the `Ruleset`.",
                                 :$ref "Source"}}},
 :File {:id "File",
        :properties {:content {:description "Textual Content.",
                               :type "string"},
                     :name {:description "File name.", :type "string"},
                     :fingerprint {:format "byte",
                                   :type "string",
                                   :description "Fingerprint (e.g. github sha) associated with the `File`."}},
        :type "object",
        :description "`File` containing source content."},
 :FunctionMock {:properties {:result {:description "The mock result of the function call.",
                                      :$ref "Result"},
                             :args {:items {:$ref "Arg"},
                                    :description "The list of `Arg` values to match. The order in which the arguments are provided is the order in which they must appear in the function invocation.",
                                    :type "array"},
                             :function {:type "string",
                                        :description "The name of the function. The function name must match one provided by a service declaration."}},
                :id "FunctionMock",
                :type "object",
                :description "Mock function definition. Mocks must refer to a function declared by the target service. The type of the function args and result will be inferred at test time. If either the arg or result values are not compatible with function type declaration, the request will be considered invalid. More than one `FunctionMock` may be provided for a given function name so long as the `Arg` matchers are distinct. There may be only one function for a given overload where all `Arg` values are `Arg.any_value`."},
 :Empty {:type "object",
         :description "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`.",
         :id "Empty",
         :properties {}},
 :GetReleaseExecutableResponse {:id "GetReleaseExecutableResponse",
                                :properties {:syncTime {:description "Optional, indicates the freshness of the result. The response is guaranteed to be the latest within an interval up to the sync_time (inclusive).",
                                                        :format "google-datetime",
                                                        :type "string"},
                                             :updateTime {:format "google-datetime",
                                                          :type "string",
                                                          :description "Timestamp for the most recent `Release.update_time`."},
                                             :rulesetName {:description "`Ruleset` name associated with the `Release` executable.",
                                                           :type "string"},
                                             :executableVersion {:description "The Rules runtime version of the executable.",
                                                                 :enumDescriptions ["Executable format unspecified. Defaults to FIREBASE_RULES_EXECUTABLE_V1"
                                                                                    "Firebase Rules syntax 'rules2' executable versions: Custom AST for use with Java clients."
                                                                                    "CEL-based executable for use with C++ clients."],
                                                                 :type "string",
                                                                 :enum ["RELEASE_EXECUTABLE_VERSION_UNSPECIFIED"
                                                                        "FIREBASE_RULES_EXECUTABLE_V1"
                                                                        "FIREBASE_RULES_EXECUTABLE_V2"]},
                                             :language {:type "string",
                                                        :enumDescriptions ["Language unspecified. Defaults to FIREBASE_RULES."
                                                                           "Firebase Rules language."
                                                                           "Event Flow triggers."],
                                                        :enum ["LANGUAGE_UNSPECIFIED"
                                                               "FIREBASE_RULES"
                                                               "EVENT_FLOW_TRIGGERS"],
                                                        :description "`Language` used to generate the executable bytes."},
                                             :executable {:description "Executable view of the `Ruleset` referenced by the `Release`.",
                                                          :type "string",
                                                          :format "byte"}},
                                :description "The response for FirebaseRulesService.GetReleaseExecutable",
                                :type "object"},
 :Metadata {:description "Metadata for a Ruleset.",
            :id "Metadata",
            :type "object",
            :properties {:services {:type "array",
                                    :description "Services that this ruleset has declarations for (e.g., \"cloud.firestore\"). There may be 0+ of these.",
                                    :items {:type "string"}}}},
 :TestCase {:properties {:request {:type "any",
                                   :description "Request context. The exact format of the request context is service-dependent. See the appropriate service documentation for information about the supported fields and types on the request. Minimally, all services support the following fields and types: Request field | Type ---------------|----------------- auth.uid | `string` auth.token | `map` headers | `map` method | `string` params | `map` path | `string` time | `google.protobuf.Timestamp` If the request value is not well-formed for the service, the request will be rejected as an invalid argument."},
                         :resource {:type "any",
                                    :description "Optional resource value as it appears in persistent storage before the request is fulfilled. The resource type depends on the `request.path` value."},
                         :expectation {:enum ["EXPECTATION_UNSPECIFIED"
                                              "ALLOW"
                                              "DENY"],
                                       :type "string",
                                       :description "Test expectation.",
                                       :enumDescriptions ["Unspecified expectation."
                                                          "Expect an allowed result."
                                                          "Expect a denied result."]},
                         :expressionReportLevel {:enum ["LEVEL_UNSPECIFIED"
                                                        "NONE"
                                                        "FULL"
                                                        "VISITED"],
                                                 :description "Specifies what should be included in the response.",
                                                 :type "string",
                                                 :enumDescriptions ["No level has been specified. Defaults to \"NONE\" behavior."
                                                                    "Do not include any additional information."
                                                                    "Include detailed reporting on expressions evaluated."
                                                                    "Only include the expressions that were visited during evaluation."]},
                         :functionMocks {:items {:$ref "FunctionMock"},
                                         :description "Optional function mocks for service-defined functions. If not set, any service defined function is expected to return an error, which may or may not influence the test outcome.",
                                         :type "array"},
                         :pathEncoding {:type "string",
                                        :description "Specifies whether paths (such as request.path) are encoded and how.",
                                        :enumDescriptions ["No encoding has been specified. Defaults to \"URL_ENCODED\" behavior."
                                                           "Treats path segments as URL encoded but with non-encoded separators (\"/\"). This is the default behavior."
                                                           "Treats total path as non-URL encoded e.g. raw."],
                                        :enum ["ENCODING_UNSPECIFIED"
                                               "URL_ENCODED"
                                               "PLAIN"]}},
            :id "TestCase",
            :type "object",
            :description "`TestCase` messages provide the request context and an expectation as to whether the given context will be allowed or denied. Test cases may specify the `request`, `resource`, and `function_mocks` to mock a function call to a service-provided function. The `request` object represents context present at request-time. The `resource` is the value of the target resource as it appears in persistent storage before the request is executed."},
 :ExpressionReport {:properties {:children {:description "Subexpressions",
                                            :items {:$ref "ExpressionReport"},
                                            :type "array"},
                                 :sourcePosition {:description "Position of expression in original rules source.",
                                                  :$ref "SourcePosition"},
                                 :values {:items {:$ref "ValueCount"},
                                          :type "array",
                                          :description "Values that this expression evaluated to when encountered."}},
                    :description "Describes where in a file an expression is found and what it was evaluated to over the course of its use.",
                    :id "ExpressionReport",
                    :type "object"},
 :TestRulesetResponse {:id "TestRulesetResponse",
                       :description "The response for FirebaseRulesService.TestRuleset.",
                       :type "object",
                       :properties {:issues {:items {:$ref "Issue"},
                                             :type "array",
                                             :description "Syntactic and semantic `Source` issues of varying severity. Issues of `ERROR` severity will prevent tests from executing."},
                                    :testResults {:description "The set of test results given the test cases in the `TestSuite`. The results will appear in the same order as the test cases appear in the `TestSuite`.",
                                                  :items {:$ref "TestResult"},
                                                  :type "array"}}},
 :ListReleasesResponse {:type "object",
                        :properties {:nextPageToken {:description "The pagination token to retrieve the next page of results. If the value is empty, no further results remain.",
                                                     :type "string"},
                                     :releases {:type "array",
                                                :items {:$ref "Release"},
                                                :description "List of `Release` instances."}},
                        :id "ListReleasesResponse",
                        :description "The response for FirebaseRulesService.ListReleases."},
 :UpdateReleaseRequest {:type "object",
                        :id "UpdateReleaseRequest",
                        :description "The request for FirebaseRulesService.UpdateRelease.",
                        :properties {:release {:description "`Release` to update.",
                                               :$ref "Release"},
                                     :updateMask {:format "google-fieldmask",
                                                  :description "Specifies which fields to update.",
                                                  :type "string"}}},
 :Arg {:description "Arg matchers for the mock function.",
       :id "Arg",
       :properties {:exactValue {:description "Argument exactly matches value provided.",
                                 :type "any"},
                    :anyValue {:$ref "Empty",
                               :description "Argument matches any value provided."}},
       :type "object"},
 :Source {:id "Source",
          :type "object",
          :properties {:files {:type "array",
                               :items {:$ref "File"},
                               :description "`File` set constituting the `Source` bundle."}},
          :description "`Source` is one or more `File` messages comprising a logical set of rules."},
 :VisitedExpression {:properties {:sourcePosition {:description "Position in the `Source` or `Ruleset` where an expression was visited.",
                                                   :$ref "SourcePosition"},
                                  :value {:description "The evaluated value for the visited expression, e.g. true/false",
                                          :type "any"}},
                     :description "Store the position and access outcome for an expression visited in rules.",
                     :id "VisitedExpression",
                     :type "object"},
 :FunctionCall {:id "FunctionCall",
                :properties {:args {:items {:type "any"},
                                    :type "array",
                                    :description "The arguments that were provided to the function."},
                             :function {:description "Name of the function invoked.",
                                        :type "string"}},
                :type "object",
                :description "Represents a service-defined function call that was invoked during test execution."},
 :Issue {:type "object",
         :properties {:severity {:type "string",
                                 :enumDescriptions ["An unspecified severity."
                                                    "Deprecation issue for statements and method that may no longer be supported or maintained."
                                                    "Warnings such as: unused variables."
                                                    "Errors such as: unmatched curly braces or variable redefinition."],
                                 :description "The severity of the issue.",
                                 :enum ["SEVERITY_UNSPECIFIED"
                                        "DEPRECATION"
                                        "WARNING"
                                        "ERROR"]},
                      :description {:description "Short error description.",
                                    :type "string"},
                      :sourcePosition {:description "Position of the issue in the `Source`.",
                                       :$ref "SourcePosition"}},
         :id "Issue",
         :description "Issues include warnings, errors, and deprecation notices."},
 :TestSuite {:id "TestSuite",
             :properties {:testCases {:type "array",
                                      :description "Collection of test cases associated with the `TestSuite`.",
                                      :items {:$ref "TestCase"}}},
             :type "object",
             :description "`TestSuite` is a collection of `TestCase` instances that validate the logical correctness of a `Ruleset`. The `TestSuite` may be referenced in-line within a `TestRuleset` invocation or as part of a `Release` object as a pre-release check."}}
