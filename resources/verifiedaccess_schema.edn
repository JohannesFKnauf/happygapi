{:Empty {:description "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.",
         :type "object",
         :properties {},
         :id "Empty"},
 :SignedData {:id "SignedData",
              :description "The wrapper message of any data and its signature.",
              :type "object",
              :properties {:signature {:description "The signature of the data field.",
                                       :format "byte",
                                       :type "string"},
                           :data {:description "The data to be signed.",
                                  :format "byte",
                                  :type "string"}}},
 :Challenge {:type "object",
             :properties {:challenge {:$ref "SignedData",
                                      :description "Generated challenge"},
                          :alternativeChallenge {:description "Challenge generated with the old signing key\n(this will only be present during key rotation)",
                                                 :$ref "SignedData"}},
             :id "Challenge",
             :description "Result message for VerifiedAccess.CreateChallenge."},
 :VerifyChallengeResponseRequest {:description "signed ChallengeResponse",
                                  :type "object",
                                  :properties {:challengeResponse {:description "The generated response to the challenge",
                                                                   :$ref "SignedData"},
                                               :expectedIdentity {:description "Service can optionally provide identity information about the device\nor user associated with the key.\nFor an EMK, this value is the enrolled domain.\nFor an EUK, this value is the user's email address.\nIf present, this value will be checked against contents\nof the response, and verification will fail if there is no match.",
                                                                  :type "string"}},
                                  :id "VerifyChallengeResponseRequest"},
 :VerifyChallengeResponseResult {:description "Result message for VerifiedAccess.VerifyChallengeResponse.",
                                 :type "object",
                                 :properties {:signedPublicKeyAndChallenge {:description "Certificate Signing Request (in the SPKAC format, base64 encoded) is\nreturned in this field. This field will be set only if device has included\nCSR in its challenge response.\n(the option to include CSR is now available for both user and machine\nresponses)",
                                                                            :type "string"},
                                              :deviceEnrollmentId {:type "string",
                                                                   :description "Device enrollment id is returned in this field (for the machine response\nonly)."},
                                              :devicePermanentId {:description "Device permanent id is returned in this field (for the machine response\nonly).",
                                                                  :type "string"},
                                              :verificationOutput {:description "For EMCert check, device permanent id is returned here.\nFor EUCert check, signed_public_key_and_challenge [base64 encoded]\nis returned if present, otherwise empty string is returned.\nThis field is deprecated, please use device_permanent_id or\nsigned_public_key_and_challenge fields.",
                                                                   :type "string"}},
                                 :id "VerifyChallengeResponseResult"}}
