{:TransactionOptions {:description "Options for beginning a new transaction. Transactions can be created explicitly with calls to Datastore.BeginTransaction or implicitly by setting ReadOptions.new_transaction in read requests.",
                      :properties {:readOnly {:description "The transaction should only allow reads.",
                                              :$ref "ReadOnly"},
                                   :readWrite {:$ref "ReadWrite",
                                               :description "The transaction should allow both reads and writes."}},
                      :id "TransactionOptions",
                      :type "object"},
 :PathElement {:type "object",
               :id "PathElement",
               :properties {:id {:type "string",
                                 :description "The auto-allocated ID of the entity. Never equal to zero. Values less than zero are discouraged and may not be supported in the future.",
                                 :format "int64"},
                            :name {:description "The name of the entity. A name matching regex `__.*__` is reserved/read-only. A name must not be more than 1500 bytes when UTF-8 encoded. Cannot be `\"\"`.",
                                   :type "string"},
                            :kind {:type "string",
                                   :description "The kind of the entity. A kind matching regex `__.*__` is reserved/read-only. A kind must not contain more than 1500 bytes when UTF-8 encoded. Cannot be `\"\"`."}},
               :description "A (kind, ID/name) pair used to construct a key path. If either name or ID is set, the element is complete. If neither is set, the element is incomplete."},
 :CompositeFilter {:id "CompositeFilter",
                   :type "object",
                   :properties {:filters {:type "array",
                                          :items {:$ref "Filter"},
                                          :description "The list of filters to combine. Must contain at least one filter."},
                                :op {:enum ["OPERATOR_UNSPECIFIED"
                                            "AND"],
                                     :description "The operator for combining multiple filters.",
                                     :type "string",
                                     :enumDescriptions ["Unspecified. This value must not be used."
                                                        "The results are required to satisfy each of the combined filters."]}},
                   :description "A filter that merges multiple other filters using the given operator."},
 :GoogleDatastoreAdminV1CommonMetadata {:id "GoogleDatastoreAdminV1CommonMetadata",
                                        :description "Metadata common to all Datastore Admin operations.",
                                        :properties {:endTime {:format "google-datetime",
                                                               :type "string",
                                                               :description "The time the operation ended, either successfully or otherwise."},
                                                     :operationType {:enumDescriptions ["Unspecified."
                                                                                        "ExportEntities."
                                                                                        "ImportEntities."
                                                                                        "CreateIndex."
                                                                                        "DeleteIndex."],
                                                                     :enum ["OPERATION_TYPE_UNSPECIFIED"
                                                                            "EXPORT_ENTITIES"
                                                                            "IMPORT_ENTITIES"
                                                                            "CREATE_INDEX"
                                                                            "DELETE_INDEX"],
                                                                     :type "string",
                                                                     :description "The type of the operation. Can be used as a filter in ListOperationsRequest."},
                                                     :labels {:type "object",
                                                              :additionalProperties {:type "string"},
                                                              :description "The client-assigned labels which were provided when the operation was created. May also include additional labels."},
                                                     :state {:description "The current state of the Operation.",
                                                             :enum ["STATE_UNSPECIFIED"
                                                                    "INITIALIZING"
                                                                    "PROCESSING"
                                                                    "CANCELLING"
                                                                    "FINALIZING"
                                                                    "SUCCESSFUL"
                                                                    "FAILED"
                                                                    "CANCELLED"],
                                                             :type "string",
                                                             :enumDescriptions ["Unspecified."
                                                                                "Request is being prepared for processing."
                                                                                "Request is actively being processed."
                                                                                "Request is in the process of being cancelled after user called google.longrunning.Operations.CancelOperation on the operation."
                                                                                "Request has been processed and is in its finalization stage."
                                                                                "Request has completed successfully."
                                                                                "Request has finished being processed, but encountered an error."
                                                                                "Request has finished being cancelled after user called google.longrunning.Operations.CancelOperation."]},
                                                     :startTime {:description "The time that work began on the operation.",
                                                                 :format "google-datetime",
                                                                 :type "string"}},
                                        :type "object"},
 :GoogleDatastoreAdminV1Index {:id "GoogleDatastoreAdminV1Index",
                               :description "Datastore composite index definition.",
                               :type "object",
                               :properties {:properties {:items {:$ref "GoogleDatastoreAdminV1IndexedProperty"},
                                                         :type "array",
                                                         :description "Required. An ordered sequence of property names and their index attributes."},
                                            :projectId {:description "Output only. Project ID.",
                                                        :readOnly true,
                                                        :type "string"},
                                            :indexId {:readOnly true,
                                                      :type "string",
                                                      :description "Output only. The resource ID of the index."},
                                            :ancestor {:enum ["ANCESTOR_MODE_UNSPECIFIED"
                                                              "NONE"
                                                              "ALL_ANCESTORS"],
                                                       :type "string",
                                                       :enumDescriptions ["The ancestor mode is unspecified."
                                                                          "Do not include the entity's ancestors in the index."
                                                                          "Include all the entity's ancestors in the index."],
                                                       :description "Required. The index's ancestor mode. Must not be ANCESTOR_MODE_UNSPECIFIED."},
                                            :state {:type "string",
                                                    :enumDescriptions ["The state is unspecified."
                                                                       "The index is being created, and cannot be used by queries. There is an active long-running operation for the index. The index is updated when writing an entity. Some index data may exist."
                                                                       "The index is ready to be used. The index is updated when writing an entity. The index is fully populated from all stored entities it applies to."
                                                                       "The index is being deleted, and cannot be used by queries. There is an active long-running operation for the index. The index is not updated when writing an entity. Some index data may exist."
                                                                       "The index was being created or deleted, but something went wrong. The index cannot by used by queries. There is no active long-running operation for the index, and the most recently finished long-running operation failed. The index is not updated when writing an entity. Some index data may exist."],
                                                    :enum ["STATE_UNSPECIFIED"
                                                           "CREATING"
                                                           "READY"
                                                           "DELETING"
                                                           "ERROR"],
                                                    :description "Output only. The state of the index.",
                                                    :readOnly true},
                                            :kind {:type "string",
                                                   :description "Required. The entity kind to which this index applies."}}},
 :ReadWrite {:properties {:previousTransaction {:description "The transaction identifier of the transaction being retried.",
                                                :format "byte",
                                                :type "string"}},
             :type "object",
             :id "ReadWrite",
             :description "Options specific to read / write transactions."},
 :PartitionId {:description "A partition ID identifies a grouping of entities. The grouping is always by project and namespace, however the namespace ID may be empty. A partition ID contains several dimensions: project ID and namespace ID. Partition dimensions: - May be `\"\"`. - Must be valid UTF-8 bytes. - Must have values that match regex `[A-Za-z\\d\\.\\-_]{1,100}` If the value of any dimension matches regex `__.*__`, the partition is reserved/read-only. A reserved/read-only partition ID is forbidden in certain documented contexts. Foreign partition IDs (in which the project ID does not match the context project ID ) are discouraged. Reads and writes of foreign partition IDs may fail if the project is not in an active state.",
               :properties {:namespaceId {:description "If not empty, the ID of the namespace to which the entities belong.",
                                          :type "string"},
                            :projectId {:description "The ID of the project to which the entities belong.",
                                        :type "string"}},
               :id "PartitionId",
               :type "object"},
 :GoogleDatastoreAdminV1EntityFilter {:description "Identifies a subset of entities in a project. This is specified as combinations of kinds and namespaces (either or both of which may be all, as described in the following examples). Example usage: Entire project: kinds=[], namespace_ids=[] Kinds Foo and Bar in all namespaces: kinds=['Foo', 'Bar'], namespace_ids=[] Kinds Foo and Bar only in the default namespace: kinds=['Foo', 'Bar'], namespace_ids=[''] Kinds Foo and Bar in both the default and Baz namespaces: kinds=['Foo', 'Bar'], namespace_ids=['', 'Baz'] The entire Baz namespace: kinds=[], namespace_ids=['Baz']",
                                      :id "GoogleDatastoreAdminV1EntityFilter",
                                      :properties {:namespaceIds {:type "array",
                                                                  :items {:type "string"},
                                                                  :description "An empty list represents all namespaces. This is the preferred usage for projects that don't use namespaces. An empty string element represents the default namespace. This should be used if the project has data in non-default namespaces, but doesn't want to include them. Each namespace in this list must be unique."},
                                                   :kinds {:description "If empty, then this represents all kinds.",
                                                           :type "array",
                                                           :items {:type "string"}}},
                                      :type "object"},
 :KindExpression {:type "object",
                  :id "KindExpression",
                  :properties {:name {:description "The name of the kind.",
                                      :type "string"}},
                  :description "A representation of a kind."},
 :ReserveIdsRequest {:id "ReserveIdsRequest",
                     :properties {:keys {:items {:$ref "Key"},
                                         :type "array",
                                         :description "Required. A list of keys with complete key paths whose numeric IDs should not be auto-allocated."},
                                  :databaseId {:description "If not empty, the ID of the database against which to make the request.",
                                               :type "string"}},
                     :type "object",
                     :description "The request for Datastore.ReserveIds."},
 :Mutation {:description "A mutation to apply to an entity.",
            :properties {:update {:$ref "Entity",
                                  :description "The entity to update. The entity must already exist. Must have a complete key path."},
                         :insert {:description "The entity to insert. The entity must not already exist. The entity key's final path element may be incomplete.",
                                  :$ref "Entity"},
                         :upsert {:description "The entity to upsert. The entity may or may not already exist. The entity key's final path element may be incomplete.",
                                  :$ref "Entity"},
                         :delete {:description "The key of the entity to delete. The entity may or may not already exist. Must have a complete key path and must not be reserved/read-only.",
                                  :$ref "Key"},
                         :baseVersion {:description "The version of the entity that this mutation is being applied to. If this does not match the current version on the server, the mutation conflicts.",
                                       :type "string",
                                       :format "int64"}},
            :id "Mutation",
            :type "object"},
 :PropertyReference {:description "A reference to a property relative to the kind expressions.",
                     :properties {:name {:description "The name of the property. If name includes \".\"s, it may be interpreted as a property name path.",
                                         :type "string"}},
                     :type "object",
                     :id "PropertyReference"},
 :Filter {:description "A holder for any type of filter.",
          :properties {:propertyFilter {:description "A filter on a property.",
                                        :$ref "PropertyFilter"},
                       :compositeFilter {:$ref "CompositeFilter",
                                         :description "A composite filter."}},
          :type "object",
          :id "Filter"},
 :LookupResponse {:type "object",
                  :properties {:deferred {:items {:$ref "Key"},
                                          :type "array",
                                          :description "A list of keys that were not looked up due to resource constraints. The order of results in this field is undefined and has no relation to the order of the keys in the input."},
                               :missing {:items {:$ref "EntityResult"},
                                         :type "array",
                                         :description "Entities not found as `ResultType.KEY_ONLY` entities. The order of results in this field is undefined and has no relation to the order of the keys in the input."},
                               :found {:description "Entities found as `ResultType.FULL` entities. The order of results in this field is undefined and has no relation to the order of the keys in the input.",
                                       :type "array",
                                       :items {:$ref "EntityResult"}}},
                  :description "The response for Datastore.Lookup.",
                  :id "LookupResponse"},
 :PropertyOrder {:description "The desired order for a specific property.",
                 :type "object",
                 :properties {:property {:$ref "PropertyReference",
                                         :description "The property to order by."},
                              :direction {:enumDescriptions ["Unspecified. This value must not be used."
                                                             "Ascending."
                                                             "Descending."],
                                          :enum ["DIRECTION_UNSPECIFIED"
                                                 "ASCENDING"
                                                 "DESCENDING"],
                                          :description "The direction to order by. Defaults to `ASCENDING`.",
                                          :type "string"}},
                 :id "PropertyOrder"},
 :PropertyFilter {:description "A filter on a specific property.",
                  :properties {:value {:$ref "Value",
                                       :description "The value to compare the property to."},
                               :op {:type "string",
                                    :enum ["OPERATOR_UNSPECIFIED"
                                           "LESS_THAN"
                                           "LESS_THAN_OR_EQUAL"
                                           "GREATER_THAN"
                                           "GREATER_THAN_OR_EQUAL"
                                           "EQUAL"
                                           "HAS_ANCESTOR"],
                                    :description "The operator to filter by.",
                                    :enumDescriptions ["Unspecified. This value must not be used."
                                                       "Less than."
                                                       "Less than or equal."
                                                       "Greater than."
                                                       "Greater than or equal."
                                                       "Equal."
                                                       "Has ancestor."]},
                               :property {:description "The property to filter by.",
                                          :$ref "PropertyReference"}},
                  :type "object",
                  :id "PropertyFilter"},
 :GoogleDatastoreAdminV1beta1Progress {:description "Measures the progress of a particular metric.",
                                       :id "GoogleDatastoreAdminV1beta1Progress",
                                       :type "object",
                                       :properties {:workCompleted {:description "The amount of work that has been completed. Note that this may be greater than work_estimated.",
                                                                    :type "string",
                                                                    :format "int64"},
                                                    :workEstimated {:type "string",
                                                                    :format "int64",
                                                                    :description "An estimate of how much work needs to be performed. May be zero if the work estimate is unavailable."}}},
 :Key {:type "object",
       :properties {:path {:type "array",
                           :items {:$ref "PathElement"},
                           :description "The entity path. An entity path consists of one or more elements composed of a kind and a string or numerical identifier, which identify entities. The first element identifies a _root entity_, the second element identifies a _child_ of the root entity, the third element identifies a child of the second entity, and so forth. The entities identified by all prefixes of the path are called the element's _ancestors_. An entity path is always fully complete: *all* of the entity's ancestors are required to be in the path along with the entity identifier itself. The only exception is that in some documented cases, the identifier in the last path element (for the entity) itself may be omitted. For example, the last path element of the key of `Mutation.insert` may have no identifier. A path can never be empty, and a path can have at most 100 elements."},
                    :partitionId {:description "Entities are partitioned into subsets, currently identified by a project ID and namespace ID. Queries are scoped to a single partition.",
                                  :$ref "PartitionId"}},
       :description "A unique identifier for an entity. If a key's partition ID or any of its path kinds or names are reserved/read-only, the key is reserved/read-only. A reserved/read-only key is forbidden in certain documented contexts.",
       :id "Key"},
 :GoogleDatastoreAdminV1ListIndexesResponse {:properties {:nextPageToken {:type "string",
                                                                          :description "The standard List next-page token."},
                                                          :indexes {:items {:$ref "GoogleDatastoreAdminV1Index"},
                                                                    :description "The indexes.",
                                                                    :type "array"}},
                                             :description "The response for google.datastore.admin.v1.DatastoreAdmin.ListIndexes.",
                                             :id "GoogleDatastoreAdminV1ListIndexesResponse",
                                             :type "object"},
 :AllocateIdsResponse {:properties {:keys {:items {:$ref "Key"},
                                           :type "array",
                                           :description "The keys specified in the request (in the same order), each with its key path completed with a newly allocated ID."}},
                       :id "AllocateIdsResponse",
                       :description "The response for Datastore.AllocateIds.",
                       :type "object"},
 :GoogleDatastoreAdminV1ExportEntitiesMetadata {:properties {:progressEntities {:description "An estimate of the number of entities processed.",
                                                                                :$ref "GoogleDatastoreAdminV1Progress"},
                                                             :common {:description "Metadata common to all Datastore Admin operations.",
                                                                      :$ref "GoogleDatastoreAdminV1CommonMetadata"},
                                                             :entityFilter {:$ref "GoogleDatastoreAdminV1EntityFilter",
                                                                            :description "Description of which entities are being exported."},
                                                             :progressBytes {:description "An estimate of the number of bytes processed.",
                                                                             :$ref "GoogleDatastoreAdminV1Progress"},
                                                             :outputUrlPrefix {:type "string",
                                                                               :description "Location for the export metadata and data files. This will be the same value as the google.datastore.admin.v1.ExportEntitiesRequest.output_url_prefix field. The final output location is provided in google.datastore.admin.v1.ExportEntitiesResponse.output_url."}},
                                                :id "GoogleDatastoreAdminV1ExportEntitiesMetadata",
                                                :description "Metadata for ExportEntities operations.",
                                                :type "object"},
 :QueryResultBatch {:properties {:entityResultType {:enum ["RESULT_TYPE_UNSPECIFIED"
                                                           "FULL"
                                                           "PROJECTION"
                                                           "KEY_ONLY"],
                                                    :type "string",
                                                    :enumDescriptions ["Unspecified. This value is never used."
                                                                       "The key and properties."
                                                                       "A projected subset of properties. The entity may have no key."
                                                                       "Only the key."],
                                                    :description "The result type for every entity in `entity_results`."},
                                 :endCursor {:format "byte",
                                             :description "A cursor that points to the position after the last result in the batch.",
                                             :type "string"},
                                 :snapshotVersion {:format "int64",
                                                   :type "string",
                                                   :description "The version number of the snapshot this batch was returned from. This applies to the range of results from the query's `start_cursor` (or the beginning of the query if no cursor was given) to this batch's `end_cursor` (not the query's `end_cursor`). In a single transaction, subsequent query result batches for the same query can have a greater snapshot version number. Each batch's snapshot version is valid for all preceding batches. The value will be zero for eventually consistent queries."},
                                 :entityResults {:description "The results for this batch.",
                                                 :type "array",
                                                 :items {:$ref "EntityResult"}},
                                 :skippedResults {:format "int32",
                                                  :description "The number of results skipped, typically because of an offset.",
                                                  :type "integer"},
                                 :skippedCursor {:format "byte",
                                                 :type "string",
                                                 :description "A cursor that points to the position after the last skipped result. Will be set when `skipped_results` != 0."},
                                 :moreResults {:enumDescriptions ["Unspecified. This value is never used."
                                                                  "There may be additional batches to fetch from this query."
                                                                  "The query is finished, but there may be more results after the limit."
                                                                  "The query is finished, but there may be more results after the end cursor."
                                                                  "The query is finished, and there are no more results."],
                                               :description "The state of the query after the current batch.",
                                               :type "string",
                                               :enum ["MORE_RESULTS_TYPE_UNSPECIFIED"
                                                      "NOT_FINISHED"
                                                      "MORE_RESULTS_AFTER_LIMIT"
                                                      "MORE_RESULTS_AFTER_CURSOR"
                                                      "NO_MORE_RESULTS"]}},
                    :id "QueryResultBatch",
                    :description "A batch of results produced by a query.",
                    :type "object"},
 :ReadOnly {:properties {},
            :id "ReadOnly",
            :type "object",
            :description "Options specific to read-only transactions."},
 :CommitRequest {:type "object",
                 :id "CommitRequest",
                 :properties {:transaction {:format "byte",
                                            :type "string",
                                            :description "The identifier of the transaction associated with the commit. A transaction identifier is returned by a call to Datastore.BeginTransaction."},
                              :mutations {:items {:$ref "Mutation"},
                                          :description "The mutations to perform. When mode is `TRANSACTIONAL`, mutations affecting a single entity are applied in order. The following sequences of mutations affecting a single entity are not permitted in a single `Commit` request: - `insert` followed by `insert` - `update` followed by `insert` - `upsert` followed by `insert` - `delete` followed by `update` When mode is `NON_TRANSACTIONAL`, no two mutations may affect a single entity.",
                                          :type "array"},
                              :mode {:description "The type of commit to perform. Defaults to `TRANSACTIONAL`.",
                                     :type "string",
                                     :enumDescriptions ["Unspecified. This value must not be used."
                                                        "Transactional: The mutations are either all applied, or none are applied. Learn about transactions [here](https://cloud.google.com/datastore/docs/concepts/transactions)."
                                                        "Non-transactional: The mutations may not apply as all or none."],
                                     :enum ["MODE_UNSPECIFIED"
                                            "TRANSACTIONAL"
                                            "NON_TRANSACTIONAL"]}},
                 :description "The request for Datastore.Commit."},
 :EntityResult {:type "object",
                :description "The result of fetching an entity from Datastore.",
                :id "EntityResult",
                :properties {:entity {:description "The resulting entity.",
                                      :$ref "Entity"},
                             :cursor {:description "A cursor that points to the position after the result entity. Set only when the `EntityResult` is part of a `QueryResultBatch` message.",
                                      :type "string",
                                      :format "byte"},
                             :version {:type "string",
                                       :description "The version of the entity, a strictly positive number that monotonically increases with changes to the entity. This field is set for `FULL` entity results. For missing entities in `LookupResponse`, this is the version of the snapshot that was used to look up the entity, and it is always set except for eventually consistent reads.",
                                       :format "int64"}}},
 :RunQueryRequest {:type "object",
                   :id "RunQueryRequest",
                   :properties {:query {:$ref "Query",
                                        :description "The query to run."},
                                :gqlQuery {:$ref "GqlQuery",
                                           :description "The GQL query to run."},
                                :partitionId {:$ref "PartitionId",
                                              :description "Entities are partitioned into subsets, identified by a partition ID. Queries are scoped to a single partition. This partition ID is normalized with the standard default context partition ID."},
                                :readOptions {:description "The options for this query.",
                                              :$ref "ReadOptions"}},
                   :description "The request for Datastore.RunQuery."},
 :ReserveIdsResponse {:id "ReserveIdsResponse",
                      :type "object",
                      :description "The response for Datastore.ReserveIds.",
                      :properties {}},
 :CommitResponse {:properties {:indexUpdates {:format "int32",
                                              :type "integer",
                                              :description "The number of index entries updated during the commit, or zero if none were updated."},
                               :mutationResults {:items {:$ref "MutationResult"},
                                                 :description "The result of performing the mutations. The i-th mutation result corresponds to the i-th mutation in the request.",
                                                 :type "array"}},
                  :id "CommitResponse",
                  :type "object",
                  :description "The response for Datastore.Commit."},
 :GoogleDatastoreAdminV1beta1ExportEntitiesResponse {:properties {:outputUrl {:type "string",
                                                                              :description "Location of the output metadata file. This can be used to begin an import into Cloud Datastore (this project or another project). See google.datastore.admin.v1beta1.ImportEntitiesRequest.input_url. Only present if the operation completed successfully."}},
                                                     :description "The response for google.datastore.admin.v1beta1.DatastoreAdmin.ExportEntities.",
                                                     :type "object",
                                                     :id "GoogleDatastoreAdminV1beta1ExportEntitiesResponse"},
 :AllocateIdsRequest {:description "The request for Datastore.AllocateIds.",
                      :properties {:keys {:description "Required. A list of keys with incomplete key paths for which to allocate IDs. No key may be reserved/read-only.",
                                          :type "array",
                                          :items {:$ref "Key"}}},
                      :type "object",
                      :id "AllocateIdsRequest"},
 :BeginTransactionResponse {:id "BeginTransactionResponse",
                            :type "object",
                            :properties {:transaction {:description "The transaction identifier (always present).",
                                                       :type "string",
                                                       :format "byte"}},
                            :description "The response for Datastore.BeginTransaction."},
 :Empty {:description "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`.",
         :type "object",
         :id "Empty",
         :properties {}},
 :GoogleDatastoreAdminV1ImportEntitiesMetadata {:id "GoogleDatastoreAdminV1ImportEntitiesMetadata",
                                                :description "Metadata for ImportEntities operations.",
                                                :type "object",
                                                :properties {:entityFilter {:$ref "GoogleDatastoreAdminV1EntityFilter",
                                                                            :description "Description of which entities are being imported."},
                                                             :progressBytes {:description "An estimate of the number of bytes processed.",
                                                                             :$ref "GoogleDatastoreAdminV1Progress"},
                                                             :inputUrl {:type "string",
                                                                        :description "The location of the import metadata file. This will be the same value as the google.datastore.admin.v1.ExportEntitiesResponse.output_url field."},
                                                             :progressEntities {:description "An estimate of the number of entities processed.",
                                                                                :$ref "GoogleDatastoreAdminV1Progress"},
                                                             :common {:description "Metadata common to all Datastore Admin operations.",
                                                                      :$ref "GoogleDatastoreAdminV1CommonMetadata"}}},
 :GqlQueryParameter {:id "GqlQueryParameter",
                     :properties {:cursor {:type "string",
                                           :format "byte",
                                           :description "A query cursor. Query cursors are returned in query result batches."},
                                  :value {:description "A value parameter.",
                                          :$ref "Value"}},
                     :type "object",
                     :description "A binding parameter for a GQL query."},
 :LatLng {:properties {:longitude {:description "The longitude in degrees. It must be in the range [-180.0, +180.0].",
                                   :type "number",
                                   :format "double"},
                       :latitude {:description "The latitude in degrees. It must be in the range [-90.0, +90.0].",
                                  :type "number",
                                  :format "double"}},
          :id "LatLng",
          :type "object",
          :description "An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this must conform to the WGS84 standard. Values must be within normalized ranges."},
 :MutationResult {:properties {:key {:description "The automatically allocated key. Set only when the mutation allocated a key.",
                                     :$ref "Key"},
                               :conflictDetected {:description "Whether a conflict was detected for this mutation. Always false when a conflict detection strategy field is not set in the mutation.",
                                                  :type "boolean"},
                               :version {:description "The version of the entity on the server after processing the mutation. If the mutation doesn't change anything on the server, then the version will be the version of the current entity or, if no entity is present, a version that is strictly greater than the version of any previous entity and less than the version of any possible future entity.",
                                         :format "int64",
                                         :type "string"}},
                  :description "The result of applying a mutation.",
                  :type "object",
                  :id "MutationResult"},
 :GoogleDatastoreAdminV1beta1ImportEntitiesMetadata {:description "Metadata for ImportEntities operations.",
                                                     :type "object",
                                                     :properties {:progressEntities {:description "An estimate of the number of entities processed.",
                                                                                     :$ref "GoogleDatastoreAdminV1beta1Progress"},
                                                                  :progressBytes {:$ref "GoogleDatastoreAdminV1beta1Progress",
                                                                                  :description "An estimate of the number of bytes processed."},
                                                                  :common {:description "Metadata common to all Datastore Admin operations.",
                                                                           :$ref "GoogleDatastoreAdminV1beta1CommonMetadata"},
                                                                  :inputUrl {:description "The location of the import metadata file. This will be the same value as the google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url field.",
                                                                             :type "string"},
                                                                  :entityFilter {:description "Description of which entities are being imported.",
                                                                                 :$ref "GoogleDatastoreAdminV1beta1EntityFilter"}},
                                                     :id "GoogleDatastoreAdminV1beta1ImportEntitiesMetadata"},
 :GoogleDatastoreAdminV1IndexOperationMetadata {:type "object",
                                                :description "Metadata for Index operations.",
                                                :id "GoogleDatastoreAdminV1IndexOperationMetadata",
                                                :properties {:indexId {:description "The index resource ID that this operation is acting on.",
                                                                       :type "string"},
                                                             :progressEntities {:$ref "GoogleDatastoreAdminV1Progress",
                                                                                :description "An estimate of the number of entities processed."},
                                                             :common {:$ref "GoogleDatastoreAdminV1CommonMetadata",
                                                                      :description "Metadata common to all Datastore Admin operations."}}},
 :GoogleLongrunningOperation {:properties {:metadata {:type "object",
                                                      :description "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                                                      :additionalProperties {:description "Properties of the object. Contains field @type with type URL.",
                                                                             :type "any"}},
                                           :done {:type "boolean",
                                                  :description "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."},
                                           :error {:description "The error result of the operation in case of failure or cancellation.",
                                                   :$ref "Status"},
                                           :name {:description "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                                                  :type "string"},
                                           :response {:type "object",
                                                      :description "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                                                      :additionalProperties {:description "Properties of the object. Contains field @type with type URL.",
                                                                             :type "any"}}},
                              :id "GoogleLongrunningOperation",
                              :type "object",
                              :description "This resource represents a long-running operation that is the result of a network API call."},
 :GoogleDatastoreAdminV1ExportEntitiesResponse {:properties {:outputUrl {:description "Location of the output metadata file. This can be used to begin an import into Cloud Datastore (this project or another project). See google.datastore.admin.v1.ImportEntitiesRequest.input_url. Only present if the operation completed successfully.",
                                                                         :type "string"}},
                                                :description "The response for google.datastore.admin.v1.DatastoreAdmin.ExportEntities.",
                                                :type "object",
                                                :id "GoogleDatastoreAdminV1ExportEntitiesResponse"},
 :BeginTransactionRequest {:properties {:transactionOptions {:$ref "TransactionOptions",
                                                             :description "Options for a new transaction."}},
                           :id "BeginTransactionRequest",
                           :description "The request for Datastore.BeginTransaction.",
                           :type "object"},
 :GoogleDatastoreAdminV1ImportEntitiesRequest {:type "object",
                                               :id "GoogleDatastoreAdminV1ImportEntitiesRequest",
                                               :properties {:labels {:type "object",
                                                                     :description "Client-assigned labels.",
                                                                     :additionalProperties {:type "string"}},
                                                            :inputUrl {:type "string",
                                                                       :description "Required. The full resource URL of the external storage location. Currently, only Google Cloud Storage is supported. So input_url should be of the form: `gs://BUCKET_NAME[/NAMESPACE_PATH]/OVERALL_EXPORT_METADATA_FILE`, where `BUCKET_NAME` is the name of the Cloud Storage bucket, `NAMESPACE_PATH` is an optional Cloud Storage namespace path (this is not a Cloud Datastore namespace), and `OVERALL_EXPORT_METADATA_FILE` is the metadata file written by the ExportEntities operation. For more information about Cloud Storage namespace paths, see [Object name considerations](https://cloud.google.com/storage/docs/naming#object-considerations). For more information, see google.datastore.admin.v1.ExportEntitiesResponse.output_url."},
                                                            :entityFilter {:description "Optionally specify which kinds/namespaces are to be imported. If provided, the list must be a subset of the EntityFilter used in creating the export, otherwise a FAILED_PRECONDITION error will be returned. If no filter is specified then all entities from the export are imported.",
                                                                           :$ref "GoogleDatastoreAdminV1EntityFilter"}},
                                               :description "The request for google.datastore.admin.v1.DatastoreAdmin.ImportEntities."},
 :RollbackResponse {:description "The response for Datastore.Rollback. (an empty message).",
                    :type "object",
                    :properties {},
                    :id "RollbackResponse"},
 :Value {:description "A message that can hold any of the supported value types and associated metadata.",
         :properties {:keyValue {:description "A key value.",
                                 :$ref "Key"},
                      :blobValue {:description "A blob value. May have at most 1,000,000 bytes. When `exclude_from_indexes` is false, may have at most 1500 bytes. In JSON requests, must be base64-encoded.",
                                  :type "string",
                                  :format "byte"},
                      :booleanValue {:description "A boolean value.",
                                     :type "boolean"},
                      :stringValue {:type "string",
                                    :description "A UTF-8 encoded string value. When `exclude_from_indexes` is false (it is indexed) , may have at most 1500 bytes. Otherwise, may be set to at most 1,000,000 bytes."},
                      :geoPointValue {:description "A geo point value representing a point on the surface of Earth.",
                                      :$ref "LatLng"},
                      :entityValue {:description "An entity value. - May have no key. - May have a key with an incomplete key path. - May have a reserved/read-only key.",
                                    :$ref "Entity"},
                      :arrayValue {:description "An array value. Cannot contain another array value. A `Value` instance that sets field `array_value` must not set fields `meaning` or `exclude_from_indexes`.",
                                   :$ref "ArrayValue"},
                      :doubleValue {:type "number",
                                    :format "double",
                                    :description "A double value."},
                      :timestampValue {:description "A timestamp value. When stored in the Datastore, precise only to microseconds; any additional precision is rounded down.",
                                       :type "string",
                                       :format "google-datetime"},
                      :integerValue {:description "An integer value.",
                                     :format "int64",
                                     :type "string"},
                      :meaning {:description "The `meaning` field should only be populated for backwards compatibility.",
                                :format "int32",
                                :type "integer"},
                      :excludeFromIndexes {:description "If the value should be excluded from all indexes including those defined explicitly.",
                                           :type "boolean"},
                      :nullValue {:enumDescriptions ["Null value."],
                                  :description "A null value.",
                                  :enum ["NULL_VALUE"],
                                  :type "string"}},
         :type "object",
         :id "Value"},
 :GoogleLongrunningListOperationsResponse {:description "The response message for Operations.ListOperations.",
                                           :type "object",
                                           :id "GoogleLongrunningListOperationsResponse",
                                           :properties {:operations {:description "A list of operations that matches the specified filter in the request.",
                                                                     :items {:$ref "GoogleLongrunningOperation"},
                                                                     :type "array"},
                                                        :nextPageToken {:description "The standard List next-page token.",
                                                                        :type "string"}}},
 :Query {:description "A query for entities.",
         :id "Query",
         :properties {:limit {:format "int32",
                              :description "The maximum number of results to return. Applies after all other constraints. Optional. Unspecified is interpreted as no limit. Must be >= 0 if specified.",
                              :type "integer"},
                      :offset {:description "The number of results to skip. Applies before limit, but after all other constraints. Optional. Must be >= 0 if specified.",
                               :format "int32",
                               :type "integer"},
                      :endCursor {:format "byte",
                                  :type "string",
                                  :description "An ending point for the query results. Query cursors are returned in query result batches and [can only be used to limit the same query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets)."},
                      :filter {:description "The filter to apply.",
                               :$ref "Filter"},
                      :kind {:description "The kinds to query (if empty, returns entities of all kinds). Currently at most 1 kind may be specified.",
                             :items {:$ref "KindExpression"},
                             :type "array"},
                      :order {:description "The order to apply to the query results (if empty, order is unspecified).",
                              :type "array",
                              :items {:$ref "PropertyOrder"}},
                      :distinctOn {:items {:$ref "PropertyReference"},
                                   :type "array",
                                   :description "The properties to make distinct. The query results will contain the first result for each distinct combination of values for the given properties (if empty, all results are returned)."},
                      :projection {:description "The projection to return. Defaults to returning all properties.",
                                   :type "array",
                                   :items {:$ref "Projection"}},
                      :startCursor {:type "string",
                                    :format "byte",
                                    :description "A starting point for the query results. Query cursors are returned in query result batches and [can only be used to continue the same query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets)."}},
         :type "object"},
 :LookupRequest {:description "The request for Datastore.Lookup.",
                 :id "LookupRequest",
                 :type "object",
                 :properties {:keys {:description "Required. Keys of entities to look up.",
                                     :items {:$ref "Key"},
                                     :type "array"},
                              :readOptions {:description "The options for this lookup request.",
                                            :$ref "ReadOptions"}}},
 :GoogleDatastoreAdminV1IndexedProperty {:description "A property of an index.",
                                         :properties {:name {:type "string",
                                                             :description "Required. The property name to index."},
                                                      :direction {:description "Required. The indexed property's direction. Must not be DIRECTION_UNSPECIFIED.",
                                                                  :enum ["DIRECTION_UNSPECIFIED"
                                                                         "ASCENDING"
                                                                         "DESCENDING"],
                                                                  :enumDescriptions ["The direction is unspecified."
                                                                                     "The property's values are indexed so as to support sequencing in ascending order and also query by <, >, <=, >=, and =."
                                                                                     "The property's values are indexed so as to support sequencing in descending order and also query by <, >, <=, >=, and =."],
                                                                  :type "string"}},
                                         :type "object",
                                         :id "GoogleDatastoreAdminV1IndexedProperty"},
 :RollbackRequest {:description "The request for Datastore.Rollback.",
                   :properties {:transaction {:format "byte",
                                              :type "string",
                                              :description "Required. The transaction identifier, returned by a call to Datastore.BeginTransaction."}},
                   :type "object",
                   :id "RollbackRequest"},
 :GoogleDatastoreAdminV1Progress {:description "Measures the progress of a particular metric.",
                                  :properties {:workCompleted {:description "The amount of work that has been completed. Note that this may be greater than work_estimated.",
                                                               :format "int64",
                                                               :type "string"},
                                               :workEstimated {:format "int64",
                                                               :type "string",
                                                               :description "An estimate of how much work needs to be performed. May be zero if the work estimate is unavailable."}},
                                  :id "GoogleDatastoreAdminV1Progress",
                                  :type "object"},
 :GoogleDatastoreAdminV1beta1EntityFilter {:id "GoogleDatastoreAdminV1beta1EntityFilter",
                                           :properties {:kinds {:description "If empty, then this represents all kinds.",
                                                                :items {:type "string"},
                                                                :type "array"},
                                                        :namespaceIds {:type "array",
                                                                       :description "An empty list represents all namespaces. This is the preferred usage for projects that don't use namespaces. An empty string element represents the default namespace. This should be used if the project has data in non-default namespaces, but doesn't want to include them. Each namespace in this list must be unique.",
                                                                       :items {:type "string"}}},
                                           :description "Identifies a subset of entities in a project. This is specified as combinations of kinds and namespaces (either or both of which may be all, as described in the following examples). Example usage: Entire project: kinds=[], namespace_ids=[] Kinds Foo and Bar in all namespaces: kinds=['Foo', 'Bar'], namespace_ids=[] Kinds Foo and Bar only in the default namespace: kinds=['Foo', 'Bar'], namespace_ids=[''] Kinds Foo and Bar in both the default and Baz namespaces: kinds=['Foo', 'Bar'], namespace_ids=['', 'Baz'] The entire Baz namespace: kinds=[], namespace_ids=['Baz']",
                                           :type "object"},
 :ReadOptions {:type "object",
               :id "ReadOptions",
               :description "The options shared by read requests.",
               :properties {:transaction {:description "The identifier of the transaction in which to read. A transaction identifier is returned by a call to Datastore.BeginTransaction.",
                                          :format "byte",
                                          :type "string"},
                            :readConsistency {:type "string",
                                              :description "The non-transactional read consistency to use. Cannot be set to `STRONG` for global queries.",
                                              :enum ["READ_CONSISTENCY_UNSPECIFIED"
                                                     "STRONG"
                                                     "EVENTUAL"],
                                              :enumDescriptions ["Unspecified. This value must not be used."
                                                                 "Strong consistency."
                                                                 "Eventual consistency."]}}},
 :GoogleDatastoreAdminV1ExportEntitiesRequest {:properties {:labels {:description "Client-assigned labels.",
                                                                     :additionalProperties {:type "string"},
                                                                     :type "object"},
                                                            :entityFilter {:$ref "GoogleDatastoreAdminV1EntityFilter",
                                                                           :description "Description of what data from the project is included in the export."},
                                                            :outputUrlPrefix {:type "string",
                                                                              :description "Required. Location for the export metadata and data files. The full resource URL of the external storage location. Currently, only Google Cloud Storage is supported. So output_url_prefix should be of the form: `gs://BUCKET_NAME[/NAMESPACE_PATH]`, where `BUCKET_NAME` is the name of the Cloud Storage bucket and `NAMESPACE_PATH` is an optional Cloud Storage namespace path (this is not a Cloud Datastore namespace). For more information about Cloud Storage namespace paths, see [Object name considerations](https://cloud.google.com/storage/docs/naming#object-considerations). The resulting files will be nested deeper than the specified URL prefix. The final output URL will be provided in the google.datastore.admin.v1.ExportEntitiesResponse.output_url field. That value should be used for subsequent ImportEntities operations. By nesting the data files deeper, the same Cloud Storage bucket can be used in multiple ExportEntities operations without conflict."}},
                                               :type "object",
                                               :description "The request for google.datastore.admin.v1.DatastoreAdmin.ExportEntities.",
                                               :id "GoogleDatastoreAdminV1ExportEntitiesRequest"},
 :RunQueryResponse {:type "object",
                    :properties {:batch {:$ref "QueryResultBatch",
                                         :description "A batch of query results (always present)."},
                                 :query {:$ref "Query",
                                         :description "The parsed form of the `GqlQuery` from the request, if it was set."}},
                    :description "The response for Datastore.RunQuery.",
                    :id "RunQueryResponse"},
 :GoogleDatastoreAdminV1beta1CommonMetadata {:id "GoogleDatastoreAdminV1beta1CommonMetadata",
                                             :description "Metadata common to all Datastore Admin operations.",
                                             :type "object",
                                             :properties {:labels {:type "object",
                                                                   :description "The client-assigned labels which were provided when the operation was created. May also include additional labels.",
                                                                   :additionalProperties {:type "string"}},
                                                          :state {:description "The current state of the Operation.",
                                                                  :type "string",
                                                                  :enumDescriptions ["Unspecified."
                                                                                     "Request is being prepared for processing."
                                                                                     "Request is actively being processed."
                                                                                     "Request is in the process of being cancelled after user called google.longrunning.Operations.CancelOperation on the operation."
                                                                                     "Request has been processed and is in its finalization stage."
                                                                                     "Request has completed successfully."
                                                                                     "Request has finished being processed, but encountered an error."
                                                                                     "Request has finished being cancelled after user called google.longrunning.Operations.CancelOperation."],
                                                                  :enum ["STATE_UNSPECIFIED"
                                                                         "INITIALIZING"
                                                                         "PROCESSING"
                                                                         "CANCELLING"
                                                                         "FINALIZING"
                                                                         "SUCCESSFUL"
                                                                         "FAILED"
                                                                         "CANCELLED"]},
                                                          :startTime {:description "The time that work began on the operation.",
                                                                      :type "string",
                                                                      :format "google-datetime"},
                                                          :endTime {:type "string",
                                                                    :format "google-datetime",
                                                                    :description "The time the operation ended, either successfully or otherwise."},
                                                          :operationType {:type "string",
                                                                          :description "The type of the operation. Can be used as a filter in ListOperationsRequest.",
                                                                          :enum ["OPERATION_TYPE_UNSPECIFIED"
                                                                                 "EXPORT_ENTITIES"
                                                                                 "IMPORT_ENTITIES"],
                                                                          :enumDescriptions ["Unspecified."
                                                                                             "ExportEntities."
                                                                                             "ImportEntities."]}}},
 :Projection {:id "Projection",
              :properties {:property {:description "The property to project.",
                                      :$ref "PropertyReference"}},
              :type "object",
              :description "A representation of a property in a projection."},
 :GqlQuery {:type "object",
            :properties {:queryString {:type "string",
                                       :description "A string of the format described [here](https://cloud.google.com/datastore/docs/apis/gql/gql_reference)."},
                         :positionalBindings {:type "array",
                                              :description "Numbered binding site @1 references the first numbered parameter, effectively using 1-based indexing, rather than the usual 0. For each binding site numbered i in `query_string`, there must be an i-th numbered parameter. The inverse must also be true.",
                                              :items {:$ref "GqlQueryParameter"}},
                         :namedBindings {:description "For each non-reserved named binding site in the query string, there must be a named parameter with that name, but not necessarily the inverse. Key must match regex `A-Za-z_$*`, must not match regex `__.*__`, and must not be `\"\"`.",
                                         :type "object",
                                         :additionalProperties {:$ref "GqlQueryParameter"}},
                         :allowLiterals {:description "When false, the query string must not contain any literals and instead must bind all values. For example, `SELECT * FROM Kind WHERE a = 'string literal'` is not allowed, while `SELECT * FROM Kind WHERE a = @value` is.",
                                         :type "boolean"}},
            :id "GqlQuery",
            :description "A [GQL query](https://cloud.google.com/datastore/docs/apis/gql/gql_reference)."},
 :GoogleDatastoreAdminV1beta1ExportEntitiesMetadata {:properties {:entityFilter {:description "Description of which entities are being exported.",
                                                                                 :$ref "GoogleDatastoreAdminV1beta1EntityFilter"},
                                                                  :progressBytes {:$ref "GoogleDatastoreAdminV1beta1Progress",
                                                                                  :description "An estimate of the number of bytes processed."},
                                                                  :common {:$ref "GoogleDatastoreAdminV1beta1CommonMetadata",
                                                                           :description "Metadata common to all Datastore Admin operations."},
                                                                  :progressEntities {:description "An estimate of the number of entities processed.",
                                                                                     :$ref "GoogleDatastoreAdminV1beta1Progress"},
                                                                  :outputUrlPrefix {:description "Location for the export metadata and data files. This will be the same value as the google.datastore.admin.v1beta1.ExportEntitiesRequest.output_url_prefix field. The final output location is provided in google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url.",
                                                                                    :type "string"}},
                                                     :description "Metadata for ExportEntities operations.",
                                                     :id "GoogleDatastoreAdminV1beta1ExportEntitiesMetadata",
                                                     :type "object"},
 :ArrayValue {:type "object",
              :id "ArrayValue",
              :properties {:values {:items {:$ref "Value"},
                                    :type "array",
                                    :description "Values in the array. The order of values in an array is preserved as long as all values have identical settings for 'exclude_from_indexes'."}},
              :description "An array value."},
 :Entity {:properties {:key {:$ref "Key",
                             :description "The entity's key. An entity must have a key, unless otherwise documented (for example, an entity in `Value.entity_value` may have no key). An entity's kind is its key path's last element's kind, or null if it has no key."},
                       :properties {:additionalProperties {:$ref "Value"},
                                    :type "object",
                                    :description "The entity's properties. The map's keys are property names. A property name matching regex `__.*__` is reserved. A reserved property name is forbidden in certain documented contexts. The name must not contain more than 500 characters. The name cannot be `\"\"`."}},
          :description "A Datastore data object. An entity is limited to 1 megabyte when stored. That _roughly_ corresponds to a limit of 1 megabyte for the serialized form of this message.",
          :id "Entity",
          :type "object"},
 :Status {:description "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
          :properties {:details {:items {:type "object",
                                         :additionalProperties {:description "Properties of the object. Contains field @type with type URL.",
                                                                :type "any"}},
                                 :type "array",
                                 :description "A list of messages that carry the error details. There is a common set of message types for APIs to use."},
                       :code {:format "int32",
                              :type "integer",
                              :description "The status code, which should be an enum value of google.rpc.Code."},
                       :message {:description "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
                                 :type "string"}},
          :id "Status",
          :type "object"}}
