{:JobTemplate {:description "Transcoding job template resource.",
               :id "JobTemplate",
               :type "object",
               :properties {:config {:description "The configuration for this template.",
                                     :$ref "JobConfig"},
                            :name {:type "string",
                                   :description "The resource name of the job template. Format: `projects/{project}/locations/{location}/jobTemplates/{job_template}`"}}},
 :Encryption {:type "object",
              :properties {:key {:description "Required. 128 bit encryption key represented as lowercase hexadecimal digits.",
                                 :type "string"},
                           :iv {:description "Required. 128 bit Initialization Vector (IV) represented as lowercase hexadecimal digits.",
                                :type "string"},
                           :aes128 {:description "Configuration for AES-128 encryption.",
                                    :$ref "Aes128Encryption"},
                           :sampleAes {:$ref "SampleAesEncryption",
                                       :description "Configuration for SAMPLE-AES encryption."},
                           :mpegCenc {:$ref "MpegCommonEncryption",
                                      :description "Configuration for MPEG Common Encryption (MPEG-CENC)."}},
              :id "Encryption",
              :description "Encryption settings."},
 :ListJobsResponse {:properties {:jobs {:description "List of jobs in the specified region.",
                                        :type "array",
                                        :items {:$ref "Job"}},
                                 :nextPageToken {:description "The pagination token.",
                                                 :type "string"}},
                    :description "Response message for `TranscoderService.ListJobs`.",
                    :type "object",
                    :id "ListJobsResponse"},
 :Pad {:type "object",
       :id "Pad",
       :description "Pad filter configuration for the input video. The padded input video is scaled after padding with black to match the output resolution.",
       :properties {:topPixels {:type "integer",
                                :description "The number of pixels to add to the top. The default is 0.",
                                :format "int32"},
                    :rightPixels {:description "The number of pixels to add to the right. The default is 0.",
                                  :type "integer",
                                  :format "int32"},
                    :leftPixels {:description "The number of pixels to add to the left. The default is 0.",
                                 :format "int32",
                                 :type "integer"},
                    :bottomPixels {:format "int32",
                                   :type "integer",
                                   :description "The number of pixels to add to the bottom. The default is 0."}}},
 :SampleAesEncryption {:type "object",
                       :id "SampleAesEncryption",
                       :description "Configuration for SAMPLE-AES encryption.",
                       :properties {:keyUri {:description "Required. URI of the key delivery service. This URI is inserted into the M3U8 header.",
                                             :type "string"}}},
 :Image {:properties {:alpha {:format "double",
                              :description "Target image opacity. Valid values are from `1.0` (solid, default) to `0.0` (transparent), exclusive. Set this to a value greater than `0.0`.",
                              :type "number"},
                      :uri {:description "Required. URI of the JPEG image in Cloud Storage. For example, `gs://bucket/inputs/image.jpeg`. JPEG is the only supported image type.",
                            :type "string"},
                      :resolution {:description "Normalized image resolution, based on output video resolution. Valid values: `0.0`–`1.0`. To respect the original image aspect ratio, set either `x` or `y` to `0.0`. To use the original image resolution, set both `x` and `y` to `0.0`.",
                                   :$ref "NormalizedCoordinate"}},
         :description "Overlaid jpeg image.",
         :type "object",
         :id "Image"},
 :MuxStream {:properties {:encryption {:description "Encryption settings.",
                                       :$ref "Encryption"},
                          :fileName {:description "The name of the generated file. The default is `MuxStream.key` with the extension suffix corresponding to the `MuxStream.container`. Individual segments also have an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `\"mux_stream0000000123.ts\"`.",
                                     :type "string"},
                          :segmentSettings {:description "Segment settings for `\"ts\"`, `\"fmp4\"` and `\"vtt\"`.",
                                            :$ref "SegmentSettings"},
                          :container {:type "string",
                                      :description "The container format. The default is `\"mp4\"` Supported container formats: - 'ts' - 'fmp4'- the corresponding file extension is `\".m4s\"` - 'mp4' - 'vtt'"},
                          :key {:description "A unique key for this multiplexed stream. HLS media manifests will be named `MuxStream.key` with the `\".m3u8\"` extension suffix.",
                                :type "string"},
                          :elementaryStreams {:type "array",
                                              :items {:type "string"},
                                              :description "List of `ElementaryStream.key`s multiplexed in this stream."}},
             :type "object",
             :id "MuxStream",
             :description "Multiplexing settings for output stream."},
 :AnimationStatic {:type "object",
                   :properties {:xy {:description "Normalized coordinates based on output video resolution. Valid values: `0.0`–`1.0`. `xy` is the upper-left coordinate of the overlay object. For example, use the x and y coordinates {0,0} to position the top-left corner of the overlay animation in the top-left corner of the output video.",
                                     :$ref "NormalizedCoordinate"},
                                :startTimeOffset {:description "The time to start displaying the overlay object, in seconds. Default: 0",
                                                  :format "google-duration",
                                                  :type "string"}},
                   :description "Display static overlay object.",
                   :id "AnimationStatic"},
 :TextStream {:type "object",
              :description "Encoding of a text stream. For example, closed captions or subtitles.",
              :id "TextStream",
              :properties {:codec {:type "string",
                                   :description "The codec for this text stream. The default is `\"webvtt\"`. Supported text codecs: - 'srt' - 'ttml' - 'cea608' - 'cea708' - 'webvtt'"},
                           :mapping {:items {:$ref "TextAtom"},
                                     :type "array",
                                     :description "The mapping for the `Job.edit_list` atoms with text `EditAtom.inputs`."},
                           :languageCode {:type "string",
                                          :description "Required. The BCP-47 language code, such as `\"en-US\"` or `\"sr-Latn\"`. For more information, see https://www.unicode.org/reports/tr35/#Unicode_locale_identifier."}}},
 :Input {:description "Input asset.",
         :type "object",
         :properties {:preprocessingConfig {:$ref "PreprocessingConfig",
                                            :description "Preprocessing configurations."},
                      :key {:type "string",
                            :description "A unique key for this input. Must be specified when using advanced mapping and edit lists."},
                      :uri {:type "string",
                            :description "URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, `gs://bucket/inputs/file.mp4`). If empty, the value will be populated from `Job.input_uri`."}},
         :id "Input"},
 :AudioStream {:properties {:channelLayout {:type "array",
                                            :description "A list of channel names specifying layout of the audio channels. This only affects the metadata embedded in the container headers, if supported by the specified format. The default is `[\"fl\", \"fr\"]`. Supported channel names: - 'fl' - Front left channel - 'fr' - Front right channel - 'sl' - Side left channel - 'sr' - Side right channel - 'fc' - Front center channel - 'lfe' - Low frequency",
                                            :items {:type "string"}},
                            :mapping {:type "array",
                                      :description "The mapping for the `Job.edit_list` atoms with audio `EditAtom.inputs`.",
                                      :items {:$ref "AudioAtom"}},
                            :sampleRateHertz {:format "int32",
                                              :type "integer",
                                              :description "The audio sample rate in Hertz. The default is 48000 Hertz."},
                            :channelCount {:description "Number of audio channels. Must be between 1 and 6. The default is 2.",
                                           :format "int32",
                                           :type "integer"},
                            :codec {:type "string",
                                    :description "The codec for this audio stream. The default is `\"aac\"`. Supported audio codecs: - 'aac' - 'aac-he' - 'aac-he-v2' - 'mp3' - 'ac3' - 'eac3'"},
                            :bitrateBps {:description "Required. Audio bitrate in bits per second. Must be between 1 and 10,000,000.",
                                         :type "integer",
                                         :format "int32"}},
               :type "object",
               :id "AudioStream",
               :description "Audio stream resource."},
 :SpriteSheet {:properties {:format {:description "Format type. The default is `\"jpeg\"`. Supported formats: - 'jpeg'",
                                     :type "string"},
                            :endTimeOffset {:format "google-duration",
                                            :type "string",
                                            :description "End time in seconds, relative to the output file timeline. When `end_time_offset` is not specified, the sprites are generated until the end of the output file."},
                            :spriteWidthPixels {:type "integer",
                                                :description "Required. The width of sprite in pixels. Must be an even integer. To preserve the source aspect ratio, set the SpriteSheet.sprite_width_pixels field or the SpriteSheet.sprite_height_pixels field, but not both (the API will automatically calculate the missing field).",
                                                :format "int32"},
                            :spriteHeightPixels {:format "int32",
                                                 :type "integer",
                                                 :description "Required. The height of sprite in pixels. Must be an even integer. To preserve the source aspect ratio, set the SpriteSheet.sprite_height_pixels field or the SpriteSheet.sprite_width_pixels field, but not both (the API will automatically calculate the missing field)."},
                            :startTimeOffset {:type "string",
                                              :format "google-duration",
                                              :description "Start time in seconds, relative to the output file timeline. Determines the first sprite to pick. The default is `0s`."},
                            :filePrefix {:type "string",
                                         :description "Required. File name prefix for the generated sprite sheets. Each sprite sheet has an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `\"sprite_sheet0000000123.jpeg\"`."},
                            :columnCount {:format "int32",
                                          :description "The maximum number of sprites per row in a sprite sheet. The default is 0, which indicates no maximum limit.",
                                          :type "integer"},
                            :quality {:description "The quality of the generated sprite sheet. Enter a value between 1 and 100, where 1 is the lowest quality and 100 is the highest quality. The default is 100. A high quality value corresponds to a low image data compression ratio.",
                                      :format "int32",
                                      :type "integer"},
                            :totalCount {:description "Total number of sprites. Create the specified number of sprites distributed evenly across the timeline of the output media. The default is 100.",
                                         :type "integer",
                                         :format "int32"},
                            :rowCount {:format "int32",
                                       :description "The maximum number of rows per sprite sheet. When the sprite sheet is full, a new sprite sheet is created. The default is 0, which indicates no maximum limit.",
                                       :type "integer"},
                            :interval {:description "Starting from `0s`, create sprites at regular intervals. Specify the interval value in seconds.",
                                       :format "google-duration",
                                       :type "string"}},
               :id "SpriteSheet",
               :description "Sprite sheet configuration.",
               :type "object"},
 :Manifest {:description "Manifest configuration.",
            :id "Manifest",
            :type "object",
            :properties {:muxStreams {:description "Required. List of user given `MuxStream.key`s that should appear in this manifest. When `Manifest.type` is `HLS`, a media manifest with name `MuxStream.key` and `.m3u8` extension is generated for each element of the `Manifest.mux_streams`.",
                                      :type "array",
                                      :items {:type "string"}},
                         :type {:type "string",
                                :description "Required. Type of the manifest, can be \"HLS\" or \"DASH\".",
                                :enumDescriptions ["The manifest type is not specified."
                                                   "Create `\"HLS\"` manifest. The corresponding file extension is `\".m3u8\"`."
                                                   "Create `\"DASH\"` manifest. The corresponding file extension is `\".mpd\"`."],
                                :enum ["MANIFEST_TYPE_UNSPECIFIED"
                                       "HLS"
                                       "DASH"]},
                         :fileName {:type "string",
                                    :description "The name of the generated file. The default is `\"manifest\"` with the extension suffix corresponding to the `Manifest.type`."}}},
 :AnimationFade {:type "object",
                 :id "AnimationFade",
                 :description "Display overlay object with fade animation.",
                 :properties {:endTimeOffset {:format "google-duration",
                                              :type "string",
                                              :description "The time to end the fade animation, in seconds. Default: `start_time_offset` + 1s"},
                              :fadeType {:description "Required. Type of fade animation: `FADE_IN` or `FADE_OUT`.",
                                         :enumDescriptions ["The fade type is not specified."
                                                            "Fade the overlay object into view."
                                                            "Fade the overlay object out of view."],
                                         :enum ["FADE_TYPE_UNSPECIFIED"
                                                "FADE_IN"
                                                "FADE_OUT"],
                                         :type "string"},
                              :xy {:description "Normalized coordinates based on output video resolution. Valid values: `0.0`–`1.0`. `xy` is the upper-left coordinate of the overlay object. For example, use the x and y coordinates {0,0} to position the top-left corner of the overlay animation in the top-left corner of the output video.",
                                   :$ref "NormalizedCoordinate"},
                              :startTimeOffset {:type "string",
                                                :description "The time to start the fade animation, in seconds. Default: 0",
                                                :format "google-duration"}}},
 :NormalizedCoordinate {:properties {:x {:description "Normalized x coordinate.",
                                         :format "double",
                                         :type "number"},
                                     :y {:format "double",
                                         :description "Normalized y coordinate.",
                                         :type "number"}},
                        :type "object",
                        :id "NormalizedCoordinate",
                        :description "2D normalized coordinates. Default: `{0.0, 0.0}`"},
 :Empty {:description "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`.",
         :type "object",
         :id "Empty",
         :properties {}},
 :VideoStream {:description "Video stream resource.",
               :type "object",
               :properties {:aqStrength {:type "number",
                                         :description "Specify the intensity of the adaptive quantizer (AQ). Must be between 0 and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A higher value equals a lower bitrate but smoother image. The default is 0.",
                                         :format "double"},
                            :vbvFullnessBits {:type "integer",
                                              :format "int32",
                                              :description "Initial fullness of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to 90% of `VideoStream.vbv_size_bits`."},
                            :widthPixels {:description "The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used.",
                                          :type "integer",
                                          :format "int32"},
                            :tune {:description "Enforces the specified codec tune. The available options are FFmpeg-compatible. Note that certain values for this field may cause the transcoder to override other fields you set in the `VideoStream` message.",
                                   :type "string"},
                            :heightPixels {:format "int32",
                                           :type "integer",
                                           :description "The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used."},
                            :entropyCoder {:type "string",
                                           :description "The entropy coder to use. The default is `\"cabac\"`. Supported entropy coders: - 'cavlc' - 'cabac'"},
                            :rateControlMode {:type "string",
                                              :description "Specify the `rate_control_mode`. The default is `\"vbr\"`. Supported rate control modes: - 'vbr' - variable bitrate - 'crf' - constant rate factor"},
                            :crfLevel {:format "int32",
                                       :type "integer",
                                       :description "Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21."},
                            :frameRate {:format "double",
                                        :description "Required. The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculate frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.",
                                        :type "number"},
                            :bitrateBps {:type "integer",
                                         :description "Required. The video bitrate in bits per second. The minimum value is 1,000. The maximum value for H264/H265 is 800,000,000. The maximum value for VP9 is 480,000,000.",
                                         :format "int32"},
                            :bFrameCount {:description "The number of consecutive B-frames. Must be greater than or equal to zero. Must be less than `VideoStream.gop_frame_count` if set. The default is 0.",
                                          :type "integer",
                                          :format "int32"},
                            :gopDuration {:format "google-duration",
                                          :description "Select the GOP size based on the specified duration. The default is `\"3s\"`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.",
                                          :type "string"},
                            :preset {:description "Enforces the specified codec preset. The default is `veryfast`. The available options are FFmpeg-compatible. Note that certain values for this field may cause the transcoder to override other fields you set in the `VideoStream` message.",
                                     :type "string"},
                            :codec {:description "Codec type. The following codecs are supported: * `h264` (default) * `h265` * `vp9`",
                                    :type "string"},
                            :pixelFormat {:description "Pixel format to use. The default is `\"yuv420p\"`. Supported pixel formats: - 'yuv420p' pixel format. - 'yuv422p' pixel format. - 'yuv444p' pixel format. - 'yuv420p10' 10-bit HDR pixel format. - 'yuv422p10' 10-bit HDR pixel format. - 'yuv444p10' 10-bit HDR pixel format. - 'yuv420p12' 12-bit HDR pixel format. - 'yuv422p12' 12-bit HDR pixel format. - 'yuv444p12' 12-bit HDR pixel format.",
                                          :type "string"},
                            :enableTwoPass {:description "Use two-pass encoding strategy to achieve better video quality. `VideoStream.rate_control_mode` must be `\"vbr\"`. The default is `false`.",
                                            :type "boolean"},
                            :gopFrameCount {:type "integer",
                                            :description "Select the GOP size based on the specified frame count. Must be greater than zero.",
                                            :format "int32"},
                            :vbvSizeBits {:format "int32",
                                          :description "Size of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to `VideoStream.bitrate_bps`.",
                                          :type "integer"},
                            :allowOpenGop {:description "Specifies whether an open Group of Pictures (GOP) structure should be allowed or not. The default is `false`.",
                                           :type "boolean"},
                            :bPyramid {:type "boolean",
                                       :description "Allow B-pyramid for reference frame selection. This may not be supported on all decoders. The default is `false`."},
                            :profile {:type "string",
                                      :description "Enforces the specified codec profile. The following profiles are supported: * `baseline` * `main` * `high` (default) The available options are FFmpeg-compatible. Note that certain values for this field may cause the transcoder to override other fields you set in the `VideoStream` message."}},
               :id "VideoStream"},
 :Job {:properties {:originUri {:readOnly true,
                                :description "Output only. The origin URI. *Note*: This feature is not yet available.",
                                :$ref "OriginUri"},
                    :outputUri {:type "string",
                                :description "Input only. Specify the `output_uri` to populate an empty `Job.config.output.uri` or `JobTemplate.config.output.uri` when using template. URI for the output file(s). For example, `gs://my-bucket/outputs/`."},
                    :ttlAfterCompletionDays {:description "Job time to live value in days, which will be effective after job completion. Job should be deleted automatically after the given TTL. Enter a value between 1 and 90. The default is 30.",
                                             :type "integer",
                                             :format "int32"},
                    :startTime {:format "google-datetime",
                                :type "string",
                                :readOnly true,
                                :description "Output only. The time the transcoding started."},
                    :config {:$ref "JobConfig",
                             :description "The configuration for this job."},
                    :name {:description "The resource name of the job. Format: `projects/{project}/locations/{location}/jobs/{job}`",
                           :type "string"},
                    :endTime {:description "Output only. The time the transcoding finished.",
                              :type "string",
                              :readOnly true,
                              :format "google-datetime"},
                    :createTime {:description "Output only. The time the job was created.",
                                 :type "string",
                                 :format "google-datetime",
                                 :readOnly true},
                    :state {:type "string",
                            :description "Output only. The current state of the job.",
                            :enum ["PROCESSING_STATE_UNSPECIFIED"
                                   "PENDING"
                                   "RUNNING"
                                   "SUCCEEDED"
                                   "FAILED"],
                            :readOnly true,
                            :enumDescriptions ["The processing state is not specified."
                                               "The job is enqueued and will be picked up for processing soon."
                                               "The job is being processed."
                                               "The job has been completed successfully."
                                               "The job has failed. For additional information, see `failure_reason` and `failure_details`"]},
                    :priority {:description "Specify the priority of the job. Enter a value between 0 and 100, where 0 is the lowest priority and 100 is the highest priority. The default is 0.",
                               :format "int32",
                               :type "integer"},
                    :failureDetails {:items {:$ref "FailureDetail"},
                                     :readOnly true,
                                     :type "array",
                                     :description "Output only. List of failure details. This property may contain additional information about the failure when `failure_reason` is present. *Note*: This feature is not yet available."},
                    :templateId {:type "string",
                                 :description "Input only. Specify the `template_id` to use for populating `Job.config`. The default is `preset/web-hd`. Preset Transcoder templates: - `preset/{preset_id}` - User defined JobTemplate: `{job_template_id}`"},
                    :failureReason {:readOnly true,
                                    :description "Output only. A description of the reason for the failure. This property is always present when `state` is `FAILED`.",
                                    :type "string"},
                    :progress {:$ref "Progress",
                               :readOnly true,
                               :description "Output only. Estimated fractional progress, from `0` to `1` for each step. *Note*: This feature is not yet available."},
                    :inputUri {:description "Input only. Specify the `input_uri` to populate empty `uri` fields in each element of `Job.config.inputs` or `JobTemplate.config.inputs` when using template. URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, `gs://bucket/inputs/file.mp4`).",
                               :type "string"}},
       :id "Job",
       :description "Transcoding job resource.",
       :type "object"},
 :SegmentSettings {:type "object",
                   :properties {:segmentDuration {:description "Duration of the segments in seconds. The default is `\"6.0s\"`. Note that `segmentDuration` must be greater than or equal to [`gopDuration`](#videostream), and `segmentDuration` must be divisible by [`gopDuration`](#videostream).",
                                                  :type "string",
                                                  :format "google-duration"},
                                :individualSegments {:type "boolean",
                                                     :description "Required. Create an individual segment file. The default is `false`."}},
                   :id "SegmentSettings",
                   :description "Segment settings for `\"ts\"`, `\"fmp4\"` and `\"vtt\"`."},
 :FailureDetail {:properties {:description {:description "A description of the failure.",
                                            :type "string"}},
                 :id "FailureDetail",
                 :type "object",
                 :description "Additional information about the reasons for the failure."},
 :ElementaryStream {:type "object",
                    :properties {:key {:description "A unique key for this elementary stream.",
                                       :type "string"},
                                 :videoStream {:$ref "VideoStream",
                                               :description "Encoding of a video stream."},
                                 :textStream {:$ref "TextStream",
                                              :description "Encoding of a text stream. For example, closed captions or subtitles."},
                                 :audioStream {:$ref "AudioStream",
                                               :description "Encoding of an audio stream."}},
                    :description "Encoding of an input file such as an audio, video, or text track. Elementary streams must be packaged before mapping and sharing between different output formats.",
                    :id "ElementaryStream"},
 :AdBreak {:id "AdBreak",
           :description "Ad break.",
           :properties {:startTimeOffset {:type "string",
                                          :format "google-duration",
                                          :description "Start time in seconds for the ad break, relative to the output file timeline. The default is `0s`."}},
           :type "object"},
 :Output {:properties {:uri {:type "string",
                             :description "URI for the output file(s). For example, `gs://my-bucket/outputs/`. If empty the value is populated from `Job.output_uri`."}},
          :type "object",
          :id "Output",
          :description "Location of output file(s) in a Cloud Storage bucket."},
 :OriginUri {:type "object",
             :properties {:hls {:type "string",
                                :description "HLS manifest URI per https://tools.ietf.org/html/rfc8216#section-4.3.4. If multiple HLS manifests are created, only the first one is listed."},
                          :dash {:type "string",
                                 :description "Dash manifest URI. If multiple Dash manifests are created, only the first one is listed."}},
             :description "The origin URI.",
             :id "OriginUri"},
 :EditAtom {:description "Edit atom.",
            :type "object",
            :id "EditAtom",
            :properties {:endTimeOffset {:description "End time in seconds for the atom, relative to the input file timeline. When `end_time_offset` is not specified, the `inputs` are used until the end of the atom.",
                                         :format "google-duration",
                                         :type "string"},
                         :key {:description "A unique key for this atom. Must be specified when using advanced mapping.",
                               :type "string"},
                         :inputs {:type "array",
                                  :description "List of `Input.key`s identifying files that should be used in this atom. The listed `inputs` must have the same timeline.",
                                  :items {:type "string"}},
                         :startTimeOffset {:type "string",
                                           :format "google-duration",
                                           :description "Start time in seconds for the atom, relative to the input file timeline. The default is `0s`."}}},
 :MpegCommonEncryption {:properties {:keyId {:description "Required. 128 bit Key ID represented as lowercase hexadecimal digits for use with common encryption.",
                                             :type "string"},
                                     :scheme {:type "string",
                                              :description "Required. Specify the encryption scheme. Supported encryption schemes: - 'cenc' - 'cbcs'"}},
                        :type "object",
                        :id "MpegCommonEncryption",
                        :description "Configuration for MPEG Common Encryption (MPEG-CENC)."},
 :Animation {:type "object",
             :id "Animation",
             :properties {:animationEnd {:description "End previous animation.",
                                         :$ref "AnimationEnd"},
                          :animationStatic {:$ref "AnimationStatic",
                                            :description "Display static overlay object."},
                          :animationFade {:$ref "AnimationFade",
                                          :description "Display overlay object with fade animation."}},
             :description "Animation types."},
 :AudioChannelInput {:properties {:track {:description "Required. The zero-based index of the track in the input file.",
                                          :type "integer",
                                          :format "int32"},
                                  :key {:description "Required. The `Input.key` that identifies the input file.",
                                        :type "string"},
                                  :channel {:description "Required. The zero-based index of the channel in the input file.",
                                            :format "int32",
                                            :type "integer"},
                                  :gainDb {:type "number",
                                           :description "Audio volume control in dB. Negative values decrease volume, positive values increase. The default is 0.",
                                           :format "double"}},
                     :id "AudioChannelInput",
                     :description "Identifies which input file, track, and channel should be used.",
                     :type "object"},
 :PreprocessingConfig {:type "object",
                       :id "PreprocessingConfig",
                       :properties {:deblock {:description "Deblock preprocessing configuration.",
                                              :$ref "Deblock"},
                                    :color {:$ref "Color",
                                            :description "Color preprocessing configuration."},
                                    :pad {:$ref "Pad",
                                          :description "Specify the video pad filter configuration."},
                                    :audio {:description "Audio preprocessing configuration.",
                                            :$ref "Audio"},
                                    :crop {:$ref "Crop",
                                           :description "Specify the video cropping configuration."},
                                    :denoise {:description "Denoise preprocessing configuration.",
                                              :$ref "Denoise"}},
                       :description "Preprocessing configurations."},
 :Denoise {:description "Denoise preprocessing configuration.",
           :properties {:tune {:description "Set the denoiser mode. The default is `\"standard\"`. Supported denoiser modes: - 'standard' - 'grain'",
                               :type "string"},
                        :strength {:type "number",
                                   :description "Set strength of the denoise. Enter a value between 0 and 1. The higher the value, the smoother the image. 0 is no denoising. The default is 0.",
                                   :format "double"}},
           :type "object",
           :id "Denoise"},
 :PubsubDestination {:description "A Pub/Sub destination.",
                     :id "PubsubDestination",
                     :type "object",
                     :properties {:topic {:description "The name of the Pub/Sub topic to publish job completion notification to. For example: `projects/{project}/topics/{topic}`.",
                                          :type "string"}}},
 :Aes128Encryption {:type "object",
                    :properties {:keyUri {:description "Required. URI of the key delivery service. This URI is inserted into the M3U8 header.",
                                          :type "string"}},
                    :id "Aes128Encryption",
                    :description "Configuration for AES-128 encryption."},
 :TextAtom {:type "object",
            :description "The mapping for the `Job.edit_list` atoms with text `EditAtom.inputs`.",
            :id "TextAtom",
            :properties {:inputs {:type "array",
                                  :items {:$ref "TextInput"},
                                  :description "List of `Job.inputs` that should be embedded in this atom. Only one input is supported."},
                         :key {:description "Required. The `EditAtom.key` that references atom with text inputs in the `Job.edit_list`.",
                               :type "string"}}},
 :JobConfig {:description "Job configuration",
             :properties {:overlays {:type "array",
                                     :items {:$ref "Overlay"},
                                     :description "List of overlays on the output video, in descending Z-order."},
                          :manifests {:items {:$ref "Manifest"},
                                      :type "array",
                                      :description "List of output manifests."},
                          :adBreaks {:description "List of ad breaks. Specifies where to insert ad break tags in the output manifests.",
                                     :type "array",
                                     :items {:$ref "AdBreak"}},
                          :output {:description "Output configuration.",
                                   :$ref "Output"},
                          :inputs {:items {:$ref "Input"},
                                   :description "List of input assets stored in Cloud Storage.",
                                   :type "array"},
                          :spriteSheets {:items {:$ref "SpriteSheet"},
                                         :description "List of output sprite sheets.",
                                         :type "array"},
                          :elementaryStreams {:items {:$ref "ElementaryStream"},
                                              :type "array",
                                              :description "List of elementary streams."},
                          :muxStreams {:items {:$ref "MuxStream"},
                                       :type "array",
                                       :description "List of multiplexing settings for output streams."},
                          :pubsubDestination {:$ref "PubsubDestination",
                                              :description "Destination on Pub/Sub."},
                          :editList {:type "array",
                                     :description "List of `Edit atom`s. Defines the ultimate timeline of the resulting file or manifest.",
                                     :items {:$ref "EditAtom"}}},
             :id "JobConfig",
             :type "object"},
 :Progress {:properties {:notified {:format "double",
                                    :description "Estimated fractional progress for `notifying` step.",
                                    :type "number"},
                         :encoded {:format "double",
                                   :description "Estimated fractional progress for `encoding` step.",
                                   :type "number"},
                         :analyzed {:format "double",
                                    :description "Estimated fractional progress for `analyzing` step.",
                                    :type "number"},
                         :uploaded {:type "number",
                                    :description "Estimated fractional progress for `uploading` step.",
                                    :format "double"}},
            :description "Estimated fractional progress for each step, from `0` to `1`.",
            :type "object",
            :id "Progress"},
 :AnimationEnd {:type "object",
                :description "End previous overlay animation from the video. Without AnimationEnd, the overlay object will keep the state of previous animation until the end of the video.",
                :id "AnimationEnd",
                :properties {:startTimeOffset {:description "The time to end overlay object, in seconds. Default: 0",
                                               :format "google-duration",
                                               :type "string"}}},
 :TextInput {:id "TextInput",
             :type "object",
             :properties {:key {:description "Required. The `Input.key` that identifies the input file.",
                                :type "string"},
                          :track {:format "int32",
                                  :type "integer",
                                  :description "Required. The zero-based index of the track in the input file."}},
             :description "Identifies which input file and track should be used."},
 :Audio {:id "Audio",
         :properties {:lowBoost {:description "Enable boosting low frequency components. The default is `false`.",
                                 :type "boolean"},
                      :highBoost {:description "Enable boosting high frequency components. The default is `false`.",
                                  :type "boolean"},
                      :lufs {:format "double",
                             :description "Specify audio loudness normalization in loudness units relative to full scale (LUFS). Enter a value between -24 and 0 (the default), where: * -24 is the Advanced Television Systems Committee (ATSC A/85) standard * -23 is the EU R128 broadcast standard * -19 is the prior standard for online mono audio * -18 is the ReplayGain standard * -16 is the prior standard for stereo audio * -14 is the new online audio standard recommended by Spotify, as well as Amazon Echo * 0 disables normalization",
                             :type "number"}},
         :description "Audio preprocessing configuration.",
         :type "object"},
 :AudioAtom {:properties {:key {:description "Required. The `EditAtom.key` that references the atom with audio inputs in the `Job.edit_list`.",
                                :type "string"},
                          :channels {:items {:$ref "AudioChannel"},
                                     :description "List of `Channel`s for this audio stream. for in-depth explanation.",
                                     :type "array"}},
             :id "AudioAtom",
             :type "object",
             :description "The mapping for the `Job.edit_list` atoms with audio `EditAtom.inputs`."},
 :AudioChannel {:description "The audio channel.",
                :properties {:inputs {:type "array",
                                      :description "List of `Job.inputs` for this audio channel.",
                                      :items {:$ref "AudioChannelInput"}}},
                :id "AudioChannel",
                :type "object"},
 :Overlay {:type "object",
           :properties {:image {:$ref "Image",
                                :description "Image overlay."},
                        :animations {:items {:$ref "Animation"},
                                     :type "array",
                                     :description "List of Animations. The list should be chronological, without any time overlap."}},
           :id "Overlay",
           :description "Overlay configuration."},
 :ListJobTemplatesResponse {:type "object",
                            :id "ListJobTemplatesResponse",
                            :description "Response message for `TranscoderService.ListJobTemplates`.",
                            :properties {:nextPageToken {:description "The pagination token.",
                                                         :type "string"},
                                         :jobTemplates {:description "List of job templates in the specified region.",
                                                        :items {:$ref "JobTemplate"},
                                                        :type "array"}}},
 :Deblock {:properties {:strength {:type "number",
                                   :format "double",
                                   :description "Set strength of the deblocker. Enter a value between 0 and 1. The higher the value, the stronger the block removal. 0 is no deblocking. The default is 0."},
                        :enabled {:description "Enable deblocker. The default is `false`.",
                                  :type "boolean"}},
           :type "object",
           :id "Deblock",
           :description "Deblock preprocessing configuration."},
 :Color {:id "Color",
         :description "Color preprocessing configuration.",
         :type "object",
         :properties {:contrast {:type "number",
                                 :description "Control black and white contrast of the video. Enter a value between -1 and 1, where -1 is minimum contrast and 1 is maximum contrast. 0 is no change. The default is 0.",
                                 :format "double"},
                      :saturation {:type "number",
                                   :description "Control color saturation of the video. Enter a value between -1 and 1, where -1 is fully desaturated and 1 is maximum saturation. 0 is no change. The default is 0.",
                                   :format "double"},
                      :brightness {:format "double",
                                   :description "Control brightness of the video. Enter a value between -1 and 1, where -1 is minimum brightness and 1 is maximum brightness. 0 is no change. The default is 0.",
                                   :type "number"}}},
 :Crop {:description "Video cropping configuration for the input video. The cropped input video is scaled to match the output resolution.",
        :id "Crop",
        :type "object",
        :properties {:leftPixels {:format "int32",
                                  :type "integer",
                                  :description "The number of pixels to crop from the left. The default is 0."},
                     :rightPixels {:format "int32",
                                   :type "integer",
                                   :description "The number of pixels to crop from the right. The default is 0."},
                     :topPixels {:type "integer",
                                 :description "The number of pixels to crop from the top. The default is 0.",
                                 :format "int32"},
                     :bottomPixels {:description "The number of pixels to crop from the bottom. The default is 0.",
                                    :format "int32",
                                    :type "integer"}}}}
