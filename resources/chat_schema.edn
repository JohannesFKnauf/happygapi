{:GoogleAppsCardV1Button {:type "object",
                          :description "A button. Can be a text button or an image button.",
                          :id "GoogleAppsCardV1Button",
                          :properties {:altText {:description "The alternative text used for accessibility. Has no effect when an icon is set; use `icon.alt_text` instead.",
                                                 :type "string"},
                                       :color {:description "If set, the button is filled with a solid background.",
                                               :$ref "Color"},
                                       :onClick {:description "The action to perform when the button is clicked.",
                                                 :$ref "GoogleAppsCardV1OnClick"},
                                       :disabled {:type "boolean",
                                                  :description "If true, the button is displayed in a disabled state and doesn't respond to user actions."},
                                       :text {:description "The text of the button.",
                                              :type "string"},
                                       :icon {:description "The icon image.",
                                              :$ref "GoogleAppsCardV1Icon"}}},
 :GoogleAppsCardV1CardHeader {:id "GoogleAppsCardV1CardHeader",
                              :type "object",
                              :properties {:imageType {:type "string",
                                                       :description "The image's type.",
                                                       :enum ["SQUARE"
                                                              "CIRCLE"],
                                                       :enumDescriptions ["Applies no cropping to the image."
                                                                          "Applies a circular mask to the image."]},
                                           :imageAltText {:type "string",
                                                          :description "The alternative text of this image which is used for accessibility."},
                                           :title {:type "string",
                                                   :description "The title of the card header. The title must be specified. The header has a fixed height: if both a title and subtitle are specified, each takes up one line. If only the title is specified, it takes up both lines."},
                                           :imageUrl {:type "string",
                                                      :description "The URL of the image in the card header."},
                                           :subtitle {:type "string",
                                                      :description "The subtitle of the card header."}}},
 :GoogleAppsCardV1ImageCropStyle {:properties {:aspectRatio {:description "The aspect ratio to use if the crop type is `RECTANGLE_CUSTOM`.",
                                                             :format "double",
                                                             :type "number"},
                                               :type {:description "The crop type.",
                                                      :enumDescriptions ["No value specified."
                                                                         "Applies a square crop."
                                                                         "Applies a circular crop."
                                                                         "Applies a rectangular crop with a custom aspect ratio."
                                                                         "Applies a rectangular crop with a 4:3 aspect ratio."],
                                                      :enum ["IMAGE_CROP_TYPE_UNSPECIFIED"
                                                             "SQUARE"
                                                             "CIRCLE"
                                                             "RECTANGLE_CUSTOM"
                                                             "RECTANGLE_4_3"],
                                                      :type "string"}},
                                  :description "Represents the crop style applied to an image.",
                                  :id "GoogleAppsCardV1ImageCropStyle",
                                  :type "object"},
 :Space {:type "object",
         :properties {:type {:type "string",
                             :description "Output only. The type of a space. This is deprecated. Use `single_user_bot_dm` instead.",
                             :enum ["TYPE_UNSPECIFIED" "ROOM" "DM"],
                             :enumDescriptions [""
                                                "Conversations between two or more humans."
                                                "1:1 Direct Message between a human and a Chat bot, where all messages are flat."]},
                      :displayName {:type "string",
                                    :description "Output only. The display name (only if the space is of type `ROOM`). Please note that this field might not be populated in direct messages between humans."},
                      :singleUserBotDm {:type "boolean",
                                        :description "Whether the space is a DM between a bot and a single human."},
                      :name {:description "Resource name of the space, in the form \"spaces/*\". Example: spaces/AAAAMpdlehYs",
                             :type "string"},
                      :threaded {:description "Whether the messages are threaded in this space.",
                                 :type "boolean"}},
         :description "A space in Google Chat. Spaces are conversations between two or more users or 1:1 messages between a user and a Chat bot.",
         :id "Space"},
 :GoogleAppsCardV1Card {:properties {:sections {:description "Sections are separated by a line divider.",
                                                :type "array",
                                                :items {:$ref "GoogleAppsCardV1Section"}},
                                     :displayStyle {:enum ["DISPLAY_STYLE_UNSPECIFIED"
                                                           "PEEK"
                                                           "REPLACE"],
                                                    :enumDescriptions [""
                                                                       "The header of the card appears at the bottom of the sidebar, partially covering the current top card of the stack. Clicking the header pops the card into the card stack. If the card has no header, a generated header is used instead."
                                                                       "The card is shown by replacing the view of the top card in the card stack."],
                                                    :description "The display style for peekCardHeader.",
                                                    :type "string"},
                                     :fixedFooter {:description "The fixed footer shown at the bottom of this card.",
                                                   :$ref "GoogleAppsCardV1CardFixedFooter"},
                                     :header {:description "The header of the card. A header usually contains a title and an image.",
                                              :$ref "GoogleAppsCardV1CardHeader"},
                                     :cardActions {:description "The actions of this card. They are added to a card's generated toolbar menu. For example, the following JSON constructs a card action menu with Settings and Send Feedback options: ``` \"card_actions\": [ { \"actionLabel\": \"Setting\", \"onClick\": { \"action\": { \"functionName\": \"goToView\", \"parameters\": [ { \"key\": \"viewType\", \"value\": \"SETTING\" } ], \"loadIndicator\": \"LoadIndicator.SPINNER\" } } }, { \"actionLabel\": \"Send Feedback\", \"onClick\": { \"openLink\": { \"url\": \"https://example.com/feedback\" } } } ] ```",
                                                   :items {:$ref "GoogleAppsCardV1CardAction"},
                                                   :type "array"},
                                     :peekCardHeader {:description "When displaying contextual content, the peek card header acts as a placeholder so that the user can navigate forward between the homepage cards and the contextual cards.",
                                                      :$ref "GoogleAppsCardV1CardHeader"},
                                     :name {:description "Name of the card, which is used as a identifier for the card in card navigation.",
                                            :type "string"}},
                        :type "object",
                        :description "A card is a UI element that can contain UI widgets such as text and images. For more information, see Cards . For example, the following JSON creates a card that has a header with the name, position, icons, and link for a contact, followed by a section with contact information like email and phone number. ``` { \"header\": { \"title\": \"Heba Salam\", \"subtitle\": \"Software Engineer\", \"imageStyle\": \"ImageStyle.AVATAR\", \"imageUrl\": \"https://example.com/heba_salam.png\", \"imageAltText\": \"Avatar for Heba Salam\" }, \"sections\" : [ { \"header\": \"Contact Info\", \"widgets\": [ { \"decorated_text\": { \"icon\": { \"knownIcon\": \"EMAIL\" }, \"content\": \"heba.salam@example.com\" } }, { \"decoratedText\": { \"icon\": { \"knownIcon\": \"PERSON\" }, \"content\": \"Online\" } }, { \"decoratedText\": { \"icon\": { \"knownIcon\": \"PHONE\" }, \"content\": \"+1 (555) 555-1234\" } }, { \"buttons\": [ { \"textButton\": { \"text\": \"Share\", }, \"onClick\": { \"openLink\": { \"url\": \"https://example.com/share\" } } }, { \"textButton\": { \"text\": \"Edit\", }, \"onClick\": { \"action\": { \"function\": \"goToView\", \"parameters\": [ { \"key\": \"viewType\", \"value\": \"EDIT\" } ], \"loadIndicator\": \"LoadIndicator.SPINNER\" } } } ] } ], \"collapsible\": true, \"uncollapsibleWidgetsCount\": 3 } ], \"cardActions\": [ { \"actionLabel\": \"Send Feedback\", \"onClick\": { \"openLink\": { \"url\": \"https://example.com/feedback\" } } } ], \"name\": \"contact-card-K3wB6arF2H9L\" } ```",
                        :id "GoogleAppsCardV1Card"},
 :GoogleAppsCardV1CardFixedFooter {:properties {:primaryButton {:description "The primary button of the fixed footer. The button must be a text button with text and color set.",
                                                                :$ref "GoogleAppsCardV1Button"},
                                                :secondaryButton {:description "The secondary button of the fixed footer. The button must be a text button with text and color set. `primaryButton` must be set if `secondaryButton` is set.",
                                                                  :$ref "GoogleAppsCardV1Button"}},
                                   :description "A persistent (sticky) footer that is added to the bottom of the card.",
                                   :id "GoogleAppsCardV1CardFixedFooter",
                                   :type "object"},
 :GoogleAppsCardV1DecoratedText {:properties {:wrapText {:description "The wrap text setting. If `true`, the text is wrapped and displayed in multiline. Otherwise, the text is truncated.",
                                                         :type "boolean"},
                                              :button {:description "A button that can be clicked to trigger an action.",
                                                       :$ref "GoogleAppsCardV1Button"},
                                              :endIcon {:description "An icon displayed after the text.",
                                                        :$ref "GoogleAppsCardV1Icon"},
                                              :bottomLabel {:type "string",
                                                            :description "The formatted text label that shows below the main text."},
                                              :icon {:$ref "GoogleAppsCardV1Icon",
                                                     :description "Deprecated in favor of start_icon."},
                                              :startIcon {:$ref "GoogleAppsCardV1Icon",
                                                          :description "The icon displayed in front of the text."},
                                              :switchControl {:description "A switch widget can be clicked to change its state or trigger an action.",
                                                              :$ref "GoogleAppsCardV1SwitchControl"},
                                              :onClick {:$ref "GoogleAppsCardV1OnClick",
                                                        :description "Only the top and bottom label and content region are clickable."},
                                              :topLabel {:description "The formatted text label that shows above the main text.",
                                                         :type "string"},
                                              :text {:type "string",
                                                     :description "Required. The main widget formatted text. See Text formatting for details."}},
                                 :id "GoogleAppsCardV1DecoratedText",
                                 :description "A widget that displays text with optional decorations such as a label above or below the text, an icon in front of the text, a selection widget or a button after the text.",
                                 :type "object"},
 :GoogleAppsCardV1Action {:type "object",
                          :properties {:loadIndicator {:type "string",
                                                       :enumDescriptions ["Displays a spinner to indicate that content is loading."
                                                                          "Nothing is displayed."],
                                                       :enum ["SPINNER"
                                                              "NONE"]},
                                       :persistValues {:type "boolean",
                                                       :description "Indicates whether form values persist after the action. The default value is `false`. If `true`, form values remain after the action is triggered. When using [LoadIndicator.NONE](workspace/add-ons/reference/rpc/google.apps.card.v1#loadindicator) for actions, `persist_values` = `true`is recommended, as it ensures that any changes made by the user after form or on change actions are sent to the server are not overwritten by the response. If `false`, the form values are cleared when the action is triggered. When `persist_values` is set to `false`, it is strongly recommended that the card use [LoadIndicator.SPINNER](workspace/add-ons/reference/rpc/google.apps.card.v1#loadindicator) for all actions, as this locks the UI to ensure no changes are made by the user while the action is being processed."},
                                       :function {:type "string",
                                                  :description "Apps Script function to invoke when the containing element is clicked/activated."},
                                       :parameters {:items {:$ref "GoogleAppsCardV1ActionParameter"},
                                                    :type "array",
                                                    :description "List of action parameters."}},
                          :id "GoogleAppsCardV1Action",
                          :description "An action that describes the behavior when the form is submitted. For example, an Apps Script can be invoked to handle the form."},
 :Inputs {:type "object",
          :description "The inputs with widgets.",
          :properties {:timeInput {:$ref "TimeInput"},
                       :dateInput {:$ref "DateInput"},
                       :stringInputs {:$ref "StringInputs"},
                       :dateTimeInput {:$ref "DateTimeInput"}},
          :id "Inputs"},
 :WidgetMarkup {:properties {:buttons {:type "array",
                                       :items {:$ref "Button"},
                                       :description "A list of buttons. Buttons is also oneof data and only one of these fields should be set."},
                             :image {:description "Display an image in this widget.",
                                     :$ref "Image"},
                             :keyValue {:description "Display a key value item in this widget.",
                                        :$ref "KeyValue"},
                             :textParagraph {:$ref "TextParagraph",
                                             :description "Display a text paragraph in this widget."}},
                :description "A widget is a UI element that presents texts, images, etc.",
                :id "WidgetMarkup",
                :type "object"},
 :GoogleAppsCardV1Icon {:id "GoogleAppsCardV1Icon",
                        :properties {:altText {:description "The description of the icon, used for accessibility. The default value is provided if you don't specify one.",
                                               :type "string"},
                                     :imageType {:description "The crop style applied to the image. In some cases, applying a `CIRCLE` crop causes the image to be drawn larger than a standard icon.",
                                                 :enumDescriptions ["Applies no cropping to the image."
                                                                    "Applies a circular mask to the image."],
                                                 :type "string",
                                                 :enum ["SQUARE"
                                                        "CIRCLE"]},
                                     :knownIcon {:description "The icon specified by the string name of a list of known icons",
                                                 :type "string"},
                                     :iconUrl {:type "string",
                                               :description "The icon specified by a URL."}},
                        :type "object"},
 :GoogleAppsCardV1SelectionInput {:type "object",
                                  :id "GoogleAppsCardV1SelectionInput",
                                  :description "A widget that creates a UI item (for example, a drop-down list) with options for users to select.",
                                  :properties {:type {:type "string",
                                                      :enumDescriptions ["The selection type is a checkbox."
                                                                         "The selection type is a radio button."
                                                                         "The selection type is a switch."
                                                                         "The selection type is a dropdown."],
                                                      :enum ["CHECK_BOX"
                                                             "RADIO_BUTTON"
                                                             "SWITCH"
                                                             "DROPDOWN"]},
                                               :onChangeAction {:description "If specified, the form is submitted when the selection changes. If not specified, you must specify a separate button.",
                                                                :$ref "GoogleAppsCardV1Action"},
                                               :label {:description "The label displayed ahead of the switch control.",
                                                       :type "string"},
                                               :name {:type "string",
                                                      :description "The name of the text input which is used in formInput."},
                                               :items {:items {:$ref "GoogleAppsCardV1SelectionItem"},
                                                       :type "array"}}},
 :SlashCommandMetadata {:properties {:commandName {:description "The name of the invoked slash command.",
                                                   :type "string"},
                                     :triggersDialog {:description "Indicating whether the slash command is for a dialog.",
                                                      :type "boolean"},
                                     :commandId {:format "int64",
                                                 :type "string",
                                                 :description "The command id of the invoked slash command."},
                                     :bot {:$ref "User",
                                           :description "The bot whose command was invoked."},
                                     :type {:description "The type of slash command.",
                                            :enum ["TYPE_UNSPECIFIED"
                                                   "ADD"
                                                   "INVOKE"],
                                            :type "string",
                                            :enumDescriptions ["Default value for the enum. DO NOT USE."
                                                               "Add bot to space."
                                                               "Invoke slash command in space."]}},
                        :type "object",
                        :description "Annotation metadata for slash commands (/).",
                        :id "SlashCommandMetadata"},
 :CardAction {:description "A card action is the action associated with the card. For an invoice card, a typical action would be: delete invoice, email invoice or open the invoice in browser.",
              :type "object",
              :id "CardAction",
              :properties {:onClick {:description "The onclick action for this action item.",
                                     :$ref "OnClick"},
                           :actionLabel {:type "string",
                                         :description "The label used to be displayed in the action menu item."}}},
 :TextButton {:properties {:onClick {:$ref "OnClick",
                                     :description "The onclick action of the button."},
                           :text {:type "string",
                                  :description "The text of the button."}},
              :type "object",
              :description "A button with text and onclick action.",
              :id "TextButton"},
 :GoogleAppsCardV1SuggestionItem {:description "A suggestion item. Only supports text for now.",
                                  :properties {:text {:type "string"}},
                                  :type "object",
                                  :id "GoogleAppsCardV1SuggestionItem"},
 :Message {:properties {:space {:$ref "Space",
                                :description "The space the message belongs to."},
                        :fallbackText {:description "A plain-text description of the message's cards, used when the actual cards cannot be displayed (e.g. mobile notifications).",
                                       :type "string"},
                        :name {:type "string"},
                        :createTime {:readOnly true,
                                     :format "google-datetime",
                                     :type "string",
                                     :description "Output only. The time at which the message was created in Google Chat server."},
                        :previewText {:description "Text for generating preview chips. This text will not be displayed to the user, but any links to images, web pages, videos, etc. included here will generate preview chips.",
                                      :type "string"},
                        :argumentText {:description "Plain-text body of the message with all bot mentions stripped out.",
                                       :type "string"},
                        :thread {:$ref "Thread",
                                 :description "The thread the message belongs to."},
                        :actionResponse {:$ref "ActionResponse",
                                         :description "Input only. Parameters that a bot can use to configure how its response is posted."},
                        :sender {:$ref "User",
                                 :description "The user who created the message."},
                        :cards {:type "array",
                                :description "Rich, formatted and interactive cards that can be used to display UI elements such as: formatted texts, buttons, clickable images. Cards are normally displayed below the plain-text body of the message.",
                                :items {:$ref "Card"}},
                        :lastUpdateTime {:type "string",
                                         :format "google-datetime",
                                         :description "Output only. The time at which the message was last updated in Google Chat server. If the message was never updated, this field will be same as create_time.",
                                         :readOnly true},
                        :annotations {:type "array",
                                      :items {:$ref "Annotation"},
                                      :description "Output only. Annotations associated with the text in this message."},
                        :slashCommand {:$ref "SlashCommand",
                                       :description "Slash command information, if applicable."},
                        :attachment {:description "User uploaded attachment.",
                                     :items {:$ref "Attachment"},
                                     :type "array"},
                        :text {:description "Plain-text body of the message.",
                               :type "string"}},
           :description "A message in Google Chat.",
           :id "Message",
           :type "object"},
 :Image {:type "object",
         :id "Image",
         :description "An image that is specified by a URL and can have an onclick action.",
         :properties {:onClick {:$ref "OnClick",
                                :description "The onclick action."},
                      :aspectRatio {:type "number",
                                    :format "double",
                                    :description "The aspect ratio of this image (width/height). This field allows clients to reserve the right height for the image while waiting for it to load. It's not meant to override the native aspect ratio of the image. If unset, the server fills it by prefetching the image."},
                      :imageUrl {:description "The URL of the image.",
                                 :type "string"}}},
 :DateInput {:type "object",
             :properties {:msSinceEpoch {:type "string",
                                         :format "int64"}},
             :id "DateInput",
             :description "Input Parameter for Date Picker widget."},
 :CardHeader {:properties {:imageStyle {:enumDescriptions [""
                                                           "Square border."
                                                           "Circular border."],
                                        :type "string",
                                        :description "The image's type (e.g. square border or circular border).",
                                        :enum ["IMAGE_STYLE_UNSPECIFIED"
                                               "IMAGE"
                                               "AVATAR"]},
                           :imageUrl {:type "string",
                                      :description "The URL of the image in the card header."},
                           :subtitle {:type "string",
                                      :description "The subtitle of the card header."},
                           :title {:type "string",
                                   :description "The title must be specified. The header has a fixed height: if both a title and subtitle is specified, each will take up 1 line. If only the title is specified, it will take up both lines."}},
              :id "CardHeader",
              :type "object"},
 :KeyValue {:type "object",
            :description "A UI element contains a key (label) and a value (content). And this element may also contain some actions such as onclick button.",
            :properties {:icon {:type "string",
                                :description "An enum value that will be replaced by the Chat API with the corresponding icon image.",
                                :enum ["ICON_UNSPECIFIED"
                                       "AIRPLANE"
                                       "BOOKMARK"
                                       "BUS"
                                       "CAR"
                                       "CLOCK"
                                       "CONFIRMATION_NUMBER_ICON"
                                       "DOLLAR"
                                       "DESCRIPTION"
                                       "EMAIL"
                                       "EVENT_PERFORMER"
                                       "EVENT_SEAT"
                                       "FLIGHT_ARRIVAL"
                                       "FLIGHT_DEPARTURE"
                                       "HOTEL"
                                       "HOTEL_ROOM_TYPE"
                                       "INVITE"
                                       "MAP_PIN"
                                       "MEMBERSHIP"
                                       "MULTIPLE_PEOPLE"
                                       "OFFER"
                                       "PERSON"
                                       "PHONE"
                                       "RESTAURANT_ICON"
                                       "SHOPPING_CART"
                                       "STAR"
                                       "STORE"
                                       "TICKET"
                                       "TRAIN"
                                       "VIDEO_CAMERA"
                                       "VIDEO_PLAY"],
                                :enumDescriptions [""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""]},
                         :iconUrl {:type "string",
                                   :description "The icon specified by a URL."},
                         :topLabel {:description "The text of the top label. Formatted text supported.",
                                    :type "string"},
                         :contentMultiline {:type "boolean",
                                            :description "If the content should be multiline."},
                         :bottomLabel {:description "The text of the bottom label. Formatted text supported.",
                                       :type "string"},
                         :button {:description "A button that can be clicked to trigger an action.",
                                  :$ref "Button"},
                         :onClick {:$ref "OnClick",
                                   :description "The onclick action. Only the top label, bottom label and content region are clickable."},
                         :content {:type "string",
                                   :description "The text of the content. Formatted text supported and always required."}},
            :id "KeyValue"},
 :GoogleAppsCardV1SwitchControl {:id "GoogleAppsCardV1SwitchControl",
                                 :type "object",
                                 :properties {:value {:description "The value is what is passed back in the callback.",
                                                      :type "string"},
                                              :selected {:description "If the switch is selected.",
                                                         :type "boolean"},
                                              :onChangeAction {:description "The action when the switch state is changed.",
                                                               :$ref "GoogleAppsCardV1Action"},
                                              :name {:type "string",
                                                     :description "The name of the switch widget that's used in formInput."},
                                              :controlType {:enum ["SWITCH"
                                                                   "CHECKBOX"
                                                                   "CHECK_BOX"],
                                                            :type "string",
                                                            :enumDescriptions [""
                                                                               "Deprecated in favor of `CHECK_BOX`."
                                                                               ""],
                                                            :description "The control type, either switch or checkbox."}}},
 :DialogAction {:id "DialogAction",
                :description "Contains dialog if present as well as the ActionStatus for the request sent from user.",
                :type "object",
                :properties {:actionStatus {:description "Status for either invoke dialog or submit dialog requests. This will be used to display a status and message to user if needed. For example in case of an error or success.",
                                            :$ref "ActionStatus"},
                             :dialog {:$ref "Dialog",
                                      :description "Dialog for the request."}}},
 :Thread {:properties {:name {:type "string",
                              :description "Resource name, in the form \"spaces/*/threads/*\". Example: spaces/AAAAMpdlehY/threads/UMxbHmzDlr4"}},
          :id "Thread",
          :type "object",
          :description "A thread in Google Chat."},
 :OnClick {:description "An onclick action (e.g. open a link).",
           :id "OnClick",
           :properties {:openLink {:$ref "OpenLink",
                                   :description "This onclick triggers an open link action if specified."},
                        :action {:description "A form action will be triggered by this onclick if specified.",
                                 :$ref "FormAction"}},
           :type "object"},
 :Dialog {:properties {:body {:description "Body of the dialog, which will be rendered in a modal. NOTE: The following fields within the objects are not supported: google.apps.card.v1.Widget.date_time_picker google.apps.card.v1.DecoratedText.SwitchControl.on_change_action google.apps.card.v1.TextInput.on_change_action google.apps.card.v1.SelectionInput.on_change_action google.apps.card.v1.DateTimePicker.on_change_action Setting the fields above will have no effect on the dialog.",
                              :$ref "GoogleAppsCardV1Card"}},
          :type "object",
          :id "Dialog",
          :description "Wrapper around the card body of the dialog."},
 :GoogleAppsCardV1OpenLink {:id "GoogleAppsCardV1OpenLink",
                            :type "object",
                            :properties {:onClose {:type "string",
                                                   :enumDescriptions ["Doesn’t reload the card after the child window closes. Reloads the card after the child window closes. If used in conjunction with [OpenAs.OVERLAY](/workspace/add-ons/reference/rpc/google.apps.card.v1#openas), the child window acts as a modal dialog and the main card is blocked until the child window closes."
                                                                      ""],
                                                   :enum ["NOTHING"
                                                          "RELOAD"]},
                                         :url {:description "The URL to open.",
                                               :type "string"},
                                         :openAs {:enum ["FULL_SIZE"
                                                         "OVERLAY"],
                                                  :type "string",
                                                  :enumDescriptions ["The link opens as a full size window (if that's the frame used by the client."
                                                                     "The link opens as an overlay, such as a pop-up."]}}},
 :CommonEventObject {:type "object",
                     :id "CommonEventObject",
                     :properties {:userLocale {:description "The full locale.displayName in the format of [ISO 639 language code]-[ISO 3166 country/region code] such as \"en-US\"",
                                               :type "string"},
                                  :invokedFunction {:type "string",
                                                    :description "Name of the invoked function associated with the widget. This field is currently only set for chat."},
                                  :platform {:type "string",
                                             :enum ["UNKNOWN_PLATFORM"
                                                    "WEB"
                                                    "IOS"
                                                    "ANDROID"],
                                             :enumDescriptions [""
                                                                ""
                                                                ""
                                                                ""],
                                             :description "The platform enum which indicates the platform where the add-on is running."},
                                  :formInputs {:type "object",
                                               :additionalProperties {:$ref "Inputs"},
                                               :description "The keys are the string IDs associated with the widget and the values are inputs with a widget in the card."},
                                  :timeZone {:$ref "TimeZone"},
                                  :hostApp {:type "string",
                                            :description "The hostApp enum which indicates the app the add-on is invoked from",
                                            :enum ["UNSPECIFIED_HOST_APP"
                                                   "GMAIL"
                                                   "CALENDAR"
                                                   "DRIVE"
                                                   "DEMO"
                                                   "DOCS"
                                                   "SHEETS"
                                                   "SLIDES"
                                                   "DRAWINGS"
                                                   "CHAT"
                                                   "ALL_HOST_APPS"],
                                            :enumDescriptions [""
                                                               ""
                                                               ""
                                                               ""
                                                               ""
                                                               ""
                                                               ""
                                                               ""
                                                               ""
                                                               ""
                                                               "This is only used for aggregating logs on the server. Clients should never send these values directly."]},
                                  :parameters {:additionalProperties {:type "string"},
                                               :description "Any additional parameters.",
                                               :type "object"}},
                     :description "Next available ID = 8"},
 :ActionResponse {:description "Parameters that a bot can use to configure how it's response is posted.",
                  :id "ActionResponse",
                  :type "object",
                  :properties {:type {:type "string",
                                      :enum ["TYPE_UNSPECIFIED"
                                             "NEW_MESSAGE"
                                             "UPDATE_MESSAGE"
                                             "REQUEST_CONFIG"],
                                      :enumDescriptions ["Default type; will be handled as NEW_MESSAGE."
                                                         "Post as a new message in the topic."
                                                         "Update the bot's message. This is only permitted on a CARD_CLICKED event where the message sender type is BOT."
                                                         "Update a message, with cards only. (Only after a MESSAGE event with a matched url, or a CARD_CLICKED event on a human created message)."],
                                      :description "The type of bot response."},
                               :dialogAction {:description "This response is for Dialog related events and must be accompanied by ResponseType.Dialog",
                                              :$ref "DialogAction"},
                               :url {:type "string",
                                     :description "URL for users to auth or config. (Only for REQUEST_CONFIG response types.)"}}},
 :DeprecatedEvent {:type "object",
                   :properties {:configCompleteRedirectUrl {:type "string",
                                                            :description "The URL the bot should redirect the user to after they have completed an authorization or configuration flow outside of Google Chat. See the [Authorizing access to 3p services guide](/chat/how-tos/auth-3p) for more information."},
                                :dialogEventType {:type "string",
                                                  :enumDescriptions ["This could be used when the corresponding event is not dialog related. For example an @mention."
                                                                     "For any user action that would result in a dialog opening."
                                                                     "For card click events from any dialog."
                                                                     "For native cancellation button."],
                                                  :description "The type of dialog event we have received.",
                                                  :enum ["TYPE_UNSPECIFIED"
                                                         "REQUEST_DIALOG"
                                                         "SUBMIT_DIALOG"
                                                         "CANCEL_DIALOG"]},
                                :space {:$ref "Space",
                                        :description "The space in which the event occurred."},
                                :type {:type "string",
                                       :enum ["UNSPECIFIED"
                                              "MESSAGE"
                                              "ADDED_TO_SPACE"
                                              "REMOVED_FROM_SPACE"
                                              "CARD_CLICKED"],
                                       :description "The type of the event.",
                                       :enumDescriptions ["Default value for the enum. DO NOT USE."
                                                          "A message was sent in a space."
                                                          "The bot was added to a space."
                                                          "The bot was removed from a space."
                                                          "The bot's interactive card was clicked."]},
                                :common {:$ref "CommonEventObject",
                                         :description "This will include form information for dialogs such as form inputs, action parameters."},
                                :token {:type "string",
                                        :description "A secret value that bots can use to verify if a request is from Google. The token is randomly generated by Google, remains static, and can be obtained from the Google Chat API configuration page in the Cloud Console. Developers can revoke/regenerate it if needed from the same page."},
                                :action {:$ref "FormAction",
                                         :description "The form action data associated with an interactive card that was clicked. Only populated for CARD_CLICKED events. See the [Interactive Cards guide](/chat/how-tos/cards-onclick) for more information."},
                                :eventTime {:type "string",
                                            :description "The timestamp indicating when the event was dispatched.",
                                            :format "google-datetime"},
                                :isDialogEvent {:type "boolean",
                                                :description "Whether or not this event is related to dialogs request, submit or cancel. This will be set to true when we want a request/submit/cancel event."},
                                :user {:$ref "User",
                                       :description "The user that triggered the event."},
                                :message {:$ref "Message",
                                          :description "The message that triggered the event, if applicable."},
                                :threadKey {:description "The bot-defined key for the thread related to the event. See the thread_key field of the `spaces.message.create` request for more information.",
                                            :type "string"}},
                   :description "Google Chat events.",
                   :id "DeprecatedEvent"},
 :FormAction {:type "object",
              :description "A form action describes the behavior when the form is submitted. For example, an Apps Script can be invoked to handle the form.",
              :properties {:parameters {:items {:$ref "ActionParameter"},
                                        :type "array",
                                        :description "List of action parameters."},
                           :actionMethodName {:type "string",
                                              :description "The method name is used to identify which part of the form triggered the form submission. This information is echoed back to the bot as part of the card click event. The same method name can be used for several elements that trigger a common behavior if desired."}},
              :id "FormAction"},
 :Empty {:type "object",
         :properties {},
         :description "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`.",
         :id "Empty"},
 :GoogleAppsCardV1GridItem {:description "Represents a single item in the grid layout.",
                            :properties {:textAlignment {:enumDescriptions ["Unspecified alignment."
                                                                            "Alignment to the start position."
                                                                            "Alignment to the center position."
                                                                            "Alignment to the end position."],
                                                         :enum ["HORIZONTAL_ALIGNMENT_UNSPECIFIED"
                                                                "START"
                                                                "CENTER"
                                                                "END"],
                                                         :description "The horizontal alignment of the grid item's text.",
                                                         :type "string"},
                                         :title {:type "string",
                                                 :description "The grid item's title."},
                                         :subtitle {:type "string",
                                                    :description "The grid item's subtitle."},
                                         :image {:description "The image that displays in the grid item.",
                                                 :$ref "GoogleAppsCardV1ImageComponent"},
                                         :layout {:description "The layout to use for the grid item.",
                                                  :type "string",
                                                  :enumDescriptions ["No layout specified."
                                                                     "The title and subtitle are shown below the grid item's image."
                                                                     "The title and subtitle are shown above the grid item's image."],
                                                  :enum ["GRID_ITEM_LAYOUT_UNSPECIFIED"
                                                         "TEXT_BELOW"
                                                         "TEXT_ABOVE"]},
                                         :id {:description "A user-specified identifier for this grid item. This identifier is returned in the parent Grid's onClick callback parameters.",
                                              :type "string"}},
                            :type "object",
                            :id "GoogleAppsCardV1GridItem"},
 :Membership {:type "object",
              :id "Membership",
              :description "Represents a membership relation in Google Chat.",
              :properties {:state {:type "string",
                                   :enumDescriptions ["Default, do not use."
                                                      "The user has joined the space."
                                                      "The user has been invited, is able to join the space, but currently has not joined."
                                                      "The user is not a member of the space, has not been invited and is not able to join the space."],
                                   :enum ["MEMBERSHIP_STATE_UNSPECIFIED"
                                          "JOINED"
                                          "INVITED"
                                          "NOT_A_MEMBER"],
                                   :description "State of the membership."},
                           :member {:$ref "User",
                                    :description "A user in Google Chat."},
                           :name {:type "string"},
                           :createTime {:type "string",
                                        :format "google-datetime",
                                        :description "The creation time of the membership a.k.a the time at which the member joined the space, if applicable."}}},
 :GoogleAppsCardV1OnClick {:id "GoogleAppsCardV1OnClick",
                           :properties {:openLink {:description "If specified, this onClick triggers an open link action.",
                                                   :$ref "GoogleAppsCardV1OpenLink"},
                                        :card {:$ref "GoogleAppsCardV1Card",
                                               :description "A new card is pushed to the card stack after clicking if specified."},
                                        :action {:$ref "GoogleAppsCardV1Action",
                                                 :description "If specified, an action is triggered by this onClick."},
                                        :openDynamicLinkAction {:$ref "GoogleAppsCardV1Action",
                                                                :description "An add-on triggers this action when the action needs to open a link. This differs from the open_link above in that this needs to talk to server to get the link. Thus some preparation work is required for web client to do before the open link action response comes back."}},
                           :type "object"},
 :GoogleAppsCardV1Widget {:properties {:dateTimePicker {:$ref "GoogleAppsCardV1DateTimePicker",
                                                        :description "Displays a selection/input widget for date/time. For example, the following JSON creates a date/time picker for an appointment time: ``` \"date_time_picker\": { \"name\": \"appointment_time\", \"label\": \"Book your appointment at:\", \"type\": \"DateTimePickerType.DATE_AND_TIME\", \"valueMsEpoch\": \"796435200000\" } ```"},
                                       :selectionInput {:$ref "GoogleAppsCardV1SelectionInput",
                                                        :description "Displays a switch control in this widget. For example, the following JSON creates a dropdown selection for size: ``` \"switchControl\": { \"name\": \"size\", \"label\": \"Size\" \"type\": \"SelectionType.DROPDOWN\", \"items\": [ { \"text\": \"S\", \"value\": \"small\", \"selected\": false }, { \"text\": \"M\", \"value\": \"medium\", \"selected\": true }, { \"text\": \"L\", \"value\": \"large\", \"selected\": false }, { \"text\": \"XL\", \"value\": \"extra_large\", \"selected\": false } ] } ```"},
                                       :grid {:description "Displays a grid with a collection of items. For example, the following JSON creates a 2 column grid with a single item: ``` \"grid\": { \"title\": \"A fine collection of items\", \"numColumns\": 2, \"borderStyle\": { \"type\": \"STROKE\", \"cornerRadius\": 4.0 }, \"items\": [ \"image\": { \"imageUri\": \"https://www.example.com/image.png\", \"cropStyle\": { \"type\": \"SQUARE\" }, \"borderStyle\": { \"type\": \"STROKE\" } }, \"title\": \"An item\", \"textAlignment\": \"CENTER\" ], \"onClick\": { \"openLink\": { \"url\":\"https://www.example.com\" } } } ```",
                                              :$ref "GoogleAppsCardV1Grid"},
                                       :decoratedText {:description "Displays a decorated text item in this widget. For example, the following JSON creates a decorated text widget showing email address: ``` \"decoratedText\": { \"icon\": { \"knownIcon\": \"EMAIL\" }, \"topLabel\": \"Email Address\", \"content\": \"heba.salam@example.com\", \"bottomLabel\": \"This is a new Email address!\", \"switchWidget\": { \"name\": \"has_send_welcome_email_to_heba_salam\", \"selected\": false, \"controlType\": \"ControlType.CHECKBOX\" } } ```",
                                                       :$ref "GoogleAppsCardV1DecoratedText"},
                                       :divider {:description "Displays a divider. For example, the following JSON creates a divider: ``` \"divider\": { } ```",
                                                 :$ref "GoogleAppsCardV1Divider"},
                                       :textParagraph {:$ref "GoogleAppsCardV1TextParagraph",
                                                       :description "Displays a text paragraph in this widget. For example, the following JSON creates a bolded text: ``` \"textParagraph\": { \"text\": \" *bold text*\" } ```"},
                                       :buttonList {:description "A list of buttons. For example, the following JSON creates two buttons. The first is a filled text button and the second is an image button that opens a link: ``` \"buttonList\": { \"buttons\": [ \"button\": { \"text\": \"Edit\", \"Color\": { \"Red\": 255 \"Green\": 255 \"Blue\": 255 } \"disabled\": true }, \"button\": { \"icon\": { \"knownIcon\": \"INVITE\" \"altText\": \"check calendar\" }, \"onClick\": { \"openLink\": { \"url\": \"https://example.com/calendar\" } } }, ] } ```",
                                                    :$ref "GoogleAppsCardV1ButtonList"},
                                       :textInput {:description "Displays a text input in this widget. For example, the following JSON creates a text input for mail address: ``` \"textInput\": { \"name\": \"mailing_address\", \"label\": \"Mailing Address\" } ``` As another example, the following JSON creates a text input for programming language with static suggestions: ``` \"textInput\": { \"name\": \"preferred_programing_language\", \"label\": \"Preferred Language\", \"initialSuggestions\": { \"items\": [ { \"text\": \"C++\" }, { \"text\": \"Java\" }, { \"text\": \"JavaScript\" }, { \"text\": \"Python\" } ] } } ```",
                                                   :$ref "GoogleAppsCardV1TextInput"},
                                       :image {:$ref "GoogleAppsCardV1Image",
                                               :description "Displays an image in this widget. For example, the following JSON creates an image with alternative text: ``` \"image\": { \"imageUrl\": \"https://example.com/heba_salam.png\" \"altText\": \"Avatar for Heba Salam\" } ```"},
                                       :horizontalAlignment {:description "The horizontal alignment of this widget.",
                                                             :type "string",
                                                             :enum ["HORIZONTAL_ALIGNMENT_UNSPECIFIED"
                                                                    "START"
                                                                    "CENTER"
                                                                    "END"],
                                                             :enumDescriptions ["Unspecified alignment."
                                                                                "Alignment to the start position."
                                                                                "Alignment to the center position."
                                                                                "Alignment to the end position."]}},
                          :type "object",
                          :description "A widget is a UI element that presents texts, images, etc.",
                          :id "GoogleAppsCardV1Widget"},
 :SlashCommand {:properties {:commandId {:type "string",
                                         :description "The id of the slash command invoked.",
                                         :format "int64"}},
                :type "object",
                :id "SlashCommand",
                :description "A Slash Command in Chat."},
 :Card {:id "Card",
        :type "object",
        :properties {:name {:type "string",
                            :description "Name of the card."},
                     :cardActions {:type "array",
                                   :items {:$ref "CardAction"},
                                   :description "The actions of this card."},
                     :sections {:type "array",
                                :items {:$ref "Section"},
                                :description "Sections are separated by a line divider."},
                     :header {:description "The header of the card. A header usually contains a title and an image.",
                              :$ref "CardHeader"}},
        :description "A card is a UI element that can contain UI widgets such as texts, images."},
 :GoogleAppsCardV1SelectionItem {:type "object",
                                 :id "GoogleAppsCardV1SelectionItem",
                                 :description "The item in the switch control. A radio button, at most one of the items is selected.",
                                 :properties {:selected {:description "If more than one item is selected for `RADIO_BUTTON` and `DROPDOWN`, the first selected item is treated as selected and the ones after are ignored.",
                                                         :type "boolean"},
                                              :value {:description "The value associated with this item. The client should use this as a form input value.",
                                                      :type "string"},
                                              :text {:description "The text to be displayed.",
                                                     :type "string"}}},
 :ListSpacesResponse {:type "object",
                      :properties {:nextPageToken {:description "Continuation token to retrieve the next page of results. It will be empty for the last page of results. Tokens expire in an hour. An error is thrown if an expired token is passed.",
                                                   :type "string"},
                                   :spaces {:description "List of spaces in the requested (or first) page.",
                                            :type "array",
                                            :items {:$ref "Space"}}},
                      :id "ListSpacesResponse"},
 :GoogleAppsCardV1Section {:description "A section contains a collection of widgets that are rendered vertically in the order that they are specified. Across all platforms, cards have a narrow fixed width, so there is currently no need for layout properties, for example, float.",
                           :id "GoogleAppsCardV1Section",
                           :properties {:uncollapsibleWidgetsCount {:description "The number of uncollapsible widgets. For example, when a section contains five widgets and the `numUncollapsibleWidget` is set to `2`, the first two widgets are always shown and the last three are collapsed as default. The `numUncollapsibleWidget` is taken into account only when collapsible is set to `true`.",
                                                                    :format "int32",
                                                                    :type "integer"},
                                        :collapsible {:type "boolean",
                                                      :description "Indicates whether this section is collapsible. If a section is collapsible, the description must be given."},
                                        :header {:description "The header of the section. Formatted text is supported.",
                                                 :type "string"},
                                        :widgets {:description "A section must contain at least 1 widget.",
                                                  :type "array",
                                                  :items {:$ref "GoogleAppsCardV1Widget"}}},
                           :type "object"},
 :GoogleAppsCardV1Suggestions {:properties {:items {:items {:$ref "GoogleAppsCardV1SuggestionItem"},
                                                    :type "array",
                                                    :description "A list of suggestions items which will be used in are used in autocomplete."}},
                               :type "object",
                               :id "GoogleAppsCardV1Suggestions",
                               :description "A container wrapping elements necessary for showing suggestion items used in text input autocomplete."},
 :GoogleAppsCardV1Divider {:description "A divider that appears in between widgets.",
                           :id "GoogleAppsCardV1Divider",
                           :type "object",
                           :properties {}},
 :GoogleAppsCardV1DateTimePicker {:description "The widget that lets users to specify a date and time.",
                                  :type "object",
                                  :id "GoogleAppsCardV1DateTimePicker",
                                  :properties {:name {:type "string",
                                                      :description "The name of the text input that's used in formInput, and uniquely identifies this input."},
                                               :valueMsEpoch {:format "int64",
                                                              :description "The value to display as the default value before user input or previous user input. It is represented in milliseconds (Epoch time). For `DATE_AND_TIME` type, the full epoch value is used. For `DATE_ONLY` type, only date of the epoch time is used. For `TIME_ONLY` type, only time of the epoch time is used. For example, you can set epoch time to `3 * 60 * 60 * 1000` to represent 3am.",
                                                              :type "string"},
                                               :type {:type "string",
                                                      :enum ["DATE_AND_TIME"
                                                             "DATE_ONLY"
                                                             "TIME_ONLY"],
                                                      :description "The type of the date/time picker.",
                                                      :enumDescriptions ["The user can select a date and time."
                                                                         "The user can only select a date."
                                                                         "The user can only select a time."]},
                                               :label {:type "string",
                                                       :description "The label for the field that displays to the user."},
                                               :timezoneOffsetDate {:format "int32",
                                                                    :type "integer",
                                                                    :description "The number representing the time zone offset from UTC, in minutes. If set, the `value_ms_epoch` is displayed in the specified time zone. If not set, it uses the user's time zone setting on the client side."},
                                               :onChangeAction {:description "Triggered when the user clicks Save or Clear from the date/time picker dialog. This is only triggered if the value changed as a result of the Save/Clear operation.",
                                                                :$ref "GoogleAppsCardV1Action"}}},
 :User {:properties {:domainId {:description "Obfuscated domain information.",
                                :type "string"},
                     :type {:type "string",
                            :enum ["TYPE_UNSPECIFIED" "HUMAN" "BOT"],
                            :description "User type.",
                            :enumDescriptions ["Default value for the enum. DO NOT USE."
                                               "Human user."
                                               "Bot user."]},
                     :name {:type "string",
                            :description "Resource name, in the format \"users/*\"."},
                     :isAnonymous {:type "boolean",
                                   :description "True when the user is deleted or the user's profile is not visible."},
                     :displayName {:description "The user's display name.",
                                   :type "string"}},
        :description "A user in Google Chat.",
        :id "User",
        :type "object"},
 :GoogleAppsCardV1Image {:id "GoogleAppsCardV1Image",
                         :properties {:altText {:type "string",
                                                :description "The alternative text of this image, used for accessibility."},
                                      :imageUrl {:description "An image URL.",
                                                 :type "string"},
                                      :onClick {:$ref "GoogleAppsCardV1OnClick"}},
                         :type "object",
                         :description "An image that is specified by a URL and can have an onClick action."},
 :TimeZone {:description "The timezone id and offset. The id is the tz database time zones such as \"America/Toronto\". The user timezone offset, in milliseconds, from Coordinated Universal Time (UTC).",
            :id "TimeZone",
            :type "object",
            :properties {:offset {:type "integer", :format "int32"},
                         :id {:type "string"}}},
 :DateTimeInput {:id "DateTimeInput",
                 :properties {:hasTime {:type "boolean"},
                              :msSinceEpoch {:type "string",
                                             :format "int64"},
                              :hasDate {:type "boolean"}},
                 :description "Input Parameter for Date and Time Picker widget.",
                 :type "object"},
 :AttachmentDataRef {:type "object",
                     :id "AttachmentDataRef",
                     :properties {:resourceName {:description "The resource name of the attachment data. This is used with the media API to download the attachment data.",
                                                 :type "string"}},
                     :description "A reference to the data of an attachment."},
 :TimeInput {:description "Input Parameter for Time Picker widget.",
             :properties {:minutes {:type "integer", :format "int32"},
                          :hours {:format "int32", :type "integer"}},
             :id "TimeInput",
             :type "object"},
 :GoogleAppsCardV1ActionParameter {:properties {:key {:type "string",
                                                      :description "The name of the parameter for the action script."},
                                                :value {:type "string",
                                                        :description "The value of the parameter."}},
                                   :type "object",
                                   :description "List of string parameters to supply when the action method is invoked. For example, consider three snooze buttons: snooze now, snooze 1 day, snooze next week. You might use action method = snooze(), passing the snooze type and snooze time in the list of string parameters.",
                                   :id "GoogleAppsCardV1ActionParameter"},
 :ImageButton {:id "ImageButton",
               :type "object",
               :description "An image button with an onclick action.",
               :properties {:iconUrl {:description "The icon specified by a URL.",
                                      :type "string"},
                            :name {:description "The name of this image_button which will be used for accessibility. Default value will be provided if developers don't specify.",
                                   :type "string"},
                            :icon {:enum ["ICON_UNSPECIFIED"
                                          "AIRPLANE"
                                          "BOOKMARK"
                                          "BUS"
                                          "CAR"
                                          "CLOCK"
                                          "CONFIRMATION_NUMBER_ICON"
                                          "DOLLAR"
                                          "DESCRIPTION"
                                          "EMAIL"
                                          "EVENT_PERFORMER"
                                          "EVENT_SEAT"
                                          "FLIGHT_ARRIVAL"
                                          "FLIGHT_DEPARTURE"
                                          "HOTEL"
                                          "HOTEL_ROOM_TYPE"
                                          "INVITE"
                                          "MAP_PIN"
                                          "MEMBERSHIP"
                                          "MULTIPLE_PEOPLE"
                                          "OFFER"
                                          "PERSON"
                                          "PHONE"
                                          "RESTAURANT_ICON"
                                          "SHOPPING_CART"
                                          "STAR"
                                          "STORE"
                                          "TICKET"
                                          "TRAIN"
                                          "VIDEO_CAMERA"
                                          "VIDEO_PLAY"],
                                   :enumDescriptions [""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""],
                                   :type "string",
                                   :description "The icon specified by an enum that indices to an icon provided by Chat API."},
                            :onClick {:$ref "OnClick",
                                      :description "The onclick action."}}},
 :Attachment {:id "Attachment",
              :type "object",
              :properties {:contentType {:type "string",
                                         :description "The content type (MIME type) of the file."},
                           :thumbnailUri {:type "string",
                                          :description "Output only. The thumbnail URL which should be used to preview the attachment to a human user. Bots should not use this URL to download attachment content."},
                           :name {:description "Resource name of the attachment, in the form \"spaces/*/messages/*/attachments/*\".",
                                  :type "string"},
                           :downloadUri {:description "Output only. The download URL which should be used to allow a human user to download the attachment. Bots should not use this URL to download attachment content.",
                                         :type "string"},
                           :contentName {:type "string",
                                         :description "The original file name for the content, not the full path."},
                           :source {:description "The source of the attachment.",
                                    :type "string",
                                    :enumDescriptions ["" "" ""],
                                    :enum ["SOURCE_UNSPECIFIED"
                                           "DRIVE_FILE"
                                           "UPLOADED_CONTENT"]},
                           :driveDataRef {:description "A reference to the drive attachment. This is used with the Drive API.",
                                          :$ref "DriveDataRef"},
                           :attachmentDataRef {:$ref "AttachmentDataRef",
                                               :description "A reference to the attachment data. This is used with the media API to download the attachment data."}},
              :description "An attachment in Google Chat."},
 :ActionStatus {:properties {:userFacingMessage {:description "This message will be the corresponding string to the above status_code. If unset, an appropriate generic message based on the status_code will be shown to the user. If this field is set then the message will be surfaced to the user for both successes and errors.",
                                                 :type "string"},
                             :statusCode {:description "The status code.",
                                          :enumDescriptions ["Not an error; returned on success HTTP Mapping: 200 OK"
                                                             "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request"
                                                             "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error"
                                                             "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request"
                                                             "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout"
                                                             "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found"
                                                             "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict"
                                                             "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden"
                                                             "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized"
                                                             "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests"
                                                             "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request"
                                                             "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict"
                                                             "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request"
                                                             "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented"
                                                             "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error"
                                                             "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable"
                                                             "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"],
                                          :enum ["OK"
                                                 "CANCELLED"
                                                 "UNKNOWN"
                                                 "INVALID_ARGUMENT"
                                                 "DEADLINE_EXCEEDED"
                                                 "NOT_FOUND"
                                                 "ALREADY_EXISTS"
                                                 "PERMISSION_DENIED"
                                                 "UNAUTHENTICATED"
                                                 "RESOURCE_EXHAUSTED"
                                                 "FAILED_PRECONDITION"
                                                 "ABORTED"
                                                 "OUT_OF_RANGE"
                                                 "UNIMPLEMENTED"
                                                 "INTERNAL"
                                                 "UNAVAILABLE"
                                                 "DATA_LOSS"],
                                          :type "string"}},
                :description "ActionStatus represents status of a request from the bot developer's side. In specific, for each request a bot gets, the bot developer will set both fields below in relation to what the response status and message related to status should be.",
                :id "ActionStatus",
                :type "object"},
 :Section {:properties {:widgets {:description "A section must contain at least 1 widget.",
                                  :type "array",
                                  :items {:$ref "WidgetMarkup"}},
                        :header {:description "The header of the section, text formatted supported.",
                                 :type "string"}},
           :type "object",
           :id "Section",
           :description "A section contains a collection of widgets that are rendered (vertically) in the order that they are specified. Across all platforms, cards have a narrow fixed width, so there is currently no need for layout properties (e.g. float)."},
 :TextParagraph {:properties {:text {:type "string"}},
                 :description "A paragraph of text. Formatted text supported.",
                 :id "TextParagraph",
                 :type "object"},
 :GoogleAppsCardV1TextInput {:description "A text input is a UI item where users can input text. A text input can also have an onChange action and suggestions.",
                             :id "GoogleAppsCardV1TextInput",
                             :properties {:autoCompleteAction {:$ref "GoogleAppsCardV1Action",
                                                               :description "The refresh function that returns suggestions based on the user's input text. If the callback is not specified, autocomplete is done in client side based on the initial suggestion items."},
                                          :onChangeAction {:$ref "GoogleAppsCardV1Action",
                                                           :description "The onChange action, for example, invoke a function."},
                                          :name {:description "The name of the text input which is used in formInput.",
                                                 :type "string"},
                                          :type {:enumDescriptions ["The text is put into a single line."
                                                                    "The text is put into multiple lines."],
                                                 :enum ["SINGLE_LINE"
                                                        "MULTIPLE_LINE"],
                                                 :description "The style of the text, for example, a single line or multiple lines.",
                                                 :type "string"},
                                          :initialSuggestions {:$ref "GoogleAppsCardV1Suggestions",
                                                               :description "The initial suggestions made before any user input."},
                                          :label {:type "string",
                                                  :description "At least one of label and hintText must be specified."},
                                          :value {:description "The default value when there is no input from the user.",
                                                  :type "string"},
                                          :hintText {:type "string",
                                                     :description "The hint text."}},
                             :type "object"},
 :GoogleAppsCardV1TextParagraph {:properties {:text {:type "string",
                                                     :description "The text that's shown in the widget."}},
                                 :description "A paragraph of text that supports formatting. See [Text formatting](workspace/add-ons/concepts/widgets#text_formatting\") for details.",
                                 :type "object",
                                 :id "GoogleAppsCardV1TextParagraph"},
 :StringInputs {:description "Input parameter for regular widgets. For single-valued widgets, it will be a single value list; for multi-valued widgets, such as checkbox, all the values are presented.",
                :type "object",
                :id "StringInputs",
                :properties {:value {:items {:type "string"},
                                     :type "array"}}},
 :ActionParameter {:type "object",
                   :description "List of string parameters to supply when the action method is invoked. For example, consider three snooze buttons: snooze now, snooze 1 day, snooze next week. You might use action method = snooze(), passing the snooze type and snooze time in the list of string parameters.",
                   :id "ActionParameter",
                   :properties {:key {:type "string",
                                      :description "The name of the parameter for the action script."},
                                :value {:description "The value of the parameter.",
                                        :type "string"}}},
 :GoogleAppsCardV1CardAction {:type "object",
                              :id "GoogleAppsCardV1CardAction",
                              :properties {:onClick {:description "The onclick action for this action item.",
                                                     :$ref "GoogleAppsCardV1OnClick"},
                                           :actionLabel {:description "The label that displays as the action menu item.",
                                                         :type "string"}},
                              :description "A card action is the action associated with the card. For example, an invoice card might include actions such as delete invoice, email invoice, or open the invoice in a browser."},
 :DriveDataRef {:description "A reference to the data of a drive attachment.",
                :type "object",
                :id "DriveDataRef",
                :properties {:driveFileId {:type "string",
                                           :description "The id for the drive file, for use with the Drive API."}}},
 :GoogleAppsCardV1Grid {:id "GoogleAppsCardV1Grid",
                        :properties {:onClick {:$ref "GoogleAppsCardV1OnClick",
                                               :description "This callback is reused by each individual grid item, but with the item's identifier and index in the items list added to the callback's parameters."},
                                     :title {:type "string",
                                             :description "The text that displays in the grid header."},
                                     :borderStyle {:$ref "GoogleAppsCardV1BorderStyle",
                                                   :description "The border style to apply to each grid item."},
                                     :items {:items {:$ref "GoogleAppsCardV1GridItem"},
                                             :description "The items to display in the grid.",
                                             :type "array"},
                                     :columnCount {:format "int32",
                                                   :description "The number of columns to display in the grid. A default value is used if this field isn't specified, and that default value is different depending on where the grid is shown (dialog versus companion).",
                                                   :type "integer"}},
                        :type "object",
                        :description "Represents a Grid widget that displays items in a configurable grid layout."},
 :GoogleAppsCardV1BorderStyle {:type "object",
                               :description "Represents the complete border style applied to widgets.",
                               :properties {:strokeColor {:$ref "Color",
                                                          :description "The colors to use when the type is `BORDER_TYPE_STROKE`."},
                                            :cornerRadius {:description "The corner radius for the border.",
                                                           :format "int32",
                                                           :type "integer"},
                                            :type {:description "The border type.",
                                                   :enumDescriptions ["No value specified."
                                                                      "No border."
                                                                      "Outline."],
                                                   :type "string",
                                                   :enum ["BORDER_TYPE_UNSPECIFIED"
                                                          "NO_BORDER"
                                                          "STROKE"]}},
                               :id "GoogleAppsCardV1BorderStyle"},
 :GoogleAppsCardV1ImageComponent {:id "GoogleAppsCardV1ImageComponent",
                                  :type "object",
                                  :properties {:cropStyle {:$ref "GoogleAppsCardV1ImageCropStyle",
                                                           :description "The crop style to apply to the image."},
                                               :borderStyle {:$ref "GoogleAppsCardV1BorderStyle",
                                                             :description "The border style to apply to the image."},
                                               :imageUri {:description "The image URL.",
                                                          :type "string"},
                                               :altText {:type "string",
                                                         :description "The accessibility label for the image."}}},
 :UserMentionMetadata {:type "object",
                       :properties {:user {:description "The user mentioned.",
                                           :$ref "User"},
                                    :type {:enumDescriptions ["Default value for the enum. DO NOT USE."
                                                              "Add user to space."
                                                              "Mention user in space."],
                                           :description "The type of user mention.",
                                           :type "string",
                                           :enum ["TYPE_UNSPECIFIED"
                                                  "ADD"
                                                  "MENTION"]}},
                       :id "UserMentionMetadata",
                       :description "Annotation metadata for user mentions (@)."},
 :GoogleAppsCardV1ButtonList {:id "GoogleAppsCardV1ButtonList",
                              :type "object",
                              :properties {:buttons {:items {:$ref "GoogleAppsCardV1Button"},
                                                     :type "array"}},
                              :description "A list of buttons layed out horizontally."},
 :Media {:properties {:resourceName {:type "string",
                                     :description "Name of the media resource."}},
         :type "object",
         :description "Media resource.",
         :id "Media"},
 :Annotation {:type "object",
              :description "Annotations associated with the plain-text body of the message. Example plain-text message body: ``` Hello @FooBot how are you!\" ``` The corresponding annotations metadata: ``` \"annotations\":[{ \"type\":\"USER_MENTION\", \"startIndex\":6, \"length\":7, \"userMention\": { \"user\": { \"name\":\"users/107946847022116401880\", \"displayName\":\"FooBot\", \"avatarUrl\":\"https://goo.gl/aeDtrS\", \"type\":\"BOT\" }, \"type\":\"MENTION\" } }] ```",
              :id "Annotation",
              :properties {:userMention {:$ref "UserMentionMetadata",
                                         :description "The metadata of user mention."},
                           :startIndex {:type "integer",
                                        :format "int32",
                                        :description "Start index (0-based, inclusive) in the plain-text message body this annotation corresponds to."},
                           :type {:enumDescriptions ["Default value for the enum. DO NOT USE."
                                                     "A user is mentioned."
                                                     "A slash command is invoked."],
                                  :type "string",
                                  :description "The type of this annotation.",
                                  :enum ["ANNOTATION_TYPE_UNSPECIFIED"
                                         "USER_MENTION"
                                         "SLASH_COMMAND"]},
                           :slashCommand {:$ref "SlashCommandMetadata",
                                          :description "The metadata for a slash command."},
                           :length {:description "Length of the substring in the plain-text message body this annotation corresponds to.",
                                    :type "integer",
                                    :format "int32"}}},
 :Color {:properties {:alpha {:type "number",
                              :description "The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color = alpha * (this color) + (1.0 - alpha) * (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0).",
                              :format "float"},
                      :blue {:type "number",
                             :format "float",
                             :description "The amount of blue in the color as a value in the interval [0, 1]."},
                      :red {:type "number",
                            :description "The amount of red in the color as a value in the interval [0, 1].",
                            :format "float"},
                      :green {:description "The amount of green in the color as a value in the interval [0, 1].",
                              :format "float",
                              :type "number"}},
         :description "Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to/from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't carry information about the absolute color space that should be used to interpret the RGB value (e.g. sRGB, Adobe RGB, DCI-P3, BT.2020, etc.). By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most 1e-5. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...",
         :id "Color",
         :type "object"},
 :Button {:type "object",
          :properties {:imageButton {:$ref "ImageButton",
                                     :description "A button with image and onclick action."},
                       :textButton {:$ref "TextButton",
                                    :description "A button with text and onclick action."}},
          :description "A button. Can be a text button or an image button.",
          :id "Button"},
 :ListMembershipsResponse {:id "ListMembershipsResponse",
                           :type "object",
                           :properties {:memberships {:type "array",
                                                      :items {:$ref "Membership"},
                                                      :description "List of memberships in the requested (or first) page."},
                                        :nextPageToken {:description "Continuation token to retrieve the next page of results. It will be empty for the last page of results.",
                                                        :type "string"}}},
 :OpenLink {:description "A link that opens a new window.",
            :id "OpenLink",
            :type "object",
            :properties {:url {:type "string",
                               :description "The URL to open."}}}}
