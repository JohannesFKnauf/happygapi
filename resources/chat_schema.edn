{:GoogleAppsCardV1Button {:id "GoogleAppsCardV1Button",
                          :description "A button. Can be a text button or an image button.",
                          :type "object",
                          :properties {:color {:description "If set, the button is filled with a solid background.",
                                               :$ref "Color"},
                                       :altText {:type "string",
                                                 :description "The alternative text used for accessibility. Has no effect when an icon is set; use `icon.alt_text` instead."},
                                       :disabled {:type "boolean",
                                                  :description "If true, the button is displayed in a disabled state and doesn't respond to user actions."},
                                       :icon {:description "The icon image.",
                                              :$ref "GoogleAppsCardV1Icon"},
                                       :text {:type "string",
                                              :description "The text of the button."},
                                       :onClick {:$ref "GoogleAppsCardV1OnClick",
                                                 :description "The action to perform when the button is clicked."}}},
 :GoogleAppsCardV1CardHeader {:properties {:imageType {:enumDescriptions ["Applies no cropping to the image."
                                                                          "Applies a circular mask to the image."],
                                                       :description "The image's type.",
                                                       :type "string",
                                                       :enum ["SQUARE"
                                                              "CIRCLE"]},
                                           :title {:type "string",
                                                   :description "The title of the card header. The title must be specified. The header has a fixed height: if both a title and subtitle are specified, each takes up one line. If only the title is specified, it takes up both lines."},
                                           :imageAltText {:description "The alternative text of this image which is used for accessibility.",
                                                          :type "string"},
                                           :imageUrl {:type "string",
                                                      :description "The URL of the image in the card header."},
                                           :subtitle {:type "string",
                                                      :description "The subtitle of the card header."}},
                              :type "object",
                              :id "GoogleAppsCardV1CardHeader"},
 :GoogleAppsCardV1ImageCropStyle {:properties {:aspectRatio {:format "double",
                                                             :description "The aspect ratio to use if the crop type is `RECTANGLE_CUSTOM`.",
                                                             :type "number"},
                                               :type {:enum ["IMAGE_CROP_TYPE_UNSPECIFIED"
                                                             "SQUARE"
                                                             "CIRCLE"
                                                             "RECTANGLE_CUSTOM"
                                                             "RECTANGLE_4_3"],
                                                      :description "The crop type.",
                                                      :enumDescriptions ["No value specified."
                                                                         "Applies a square crop."
                                                                         "Applies a circular crop."
                                                                         "Applies a rectangular crop with a custom aspect ratio."
                                                                         "Applies a rectangular crop with a 4:3 aspect ratio."],
                                                      :type "string"}},
                                  :id "GoogleAppsCardV1ImageCropStyle",
                                  :type "object",
                                  :description "Represents the crop style applied to an image."},
 :Space {:id "Space",
         :properties {:type {:description "Output only. The type of a space. This is deprecated. Use `single_user_bot_dm` instead.",
                             :type "string",
                             :enumDescriptions [""
                                                "Multi-user spaces such as rooms and DMs between humans."
                                                "1:1 Direct Message between a human and a bot, where all messages are flat."],
                             :enum ["TYPE_UNSPECIFIED" "ROOM" "DM"]},
                      :displayName {:type "string",
                                    :description "Output only. The display name (only if the space is a room). Please note that this field might not be populated in direct messages between humans."},
                      :name {:type "string",
                             :description "Resource name of the space, in the form \"spaces/*\". Example: spaces/AAAAMpdlehYs"},
                      :threaded {:description "Whether the messages are threaded in this space.",
                                 :type "boolean"},
                      :singleUserBotDm {:description "Whether the space is a DM between a bot and a single human.",
                                        :type "boolean"}},
         :description "A room or DM in Hangouts Chat.",
         :type "object"},
 :GoogleAppsCardV1Card {:properties {:name {:description "Name of the card, which is used as a identifier for the card in card navigation.",
                                            :type "string"},
                                     :cardActions {:type "array",
                                                   :description "The actions of this card. They are added to a card's generated toolbar menu. For example, the following JSON constructs a card action menu with Settings and Send Feedback options: ``` \"card_actions\": [ { \"actionLabel\": \"Setting\", \"onClick\": { \"action\": { \"functionName\": \"goToView\", \"parameters\": [ { \"key\": \"viewType\", \"value\": \"SETTING\" } ], \"loadIndicator\": \"LoadIndicator.SPINNER\" } } }, { \"actionLabel\": \"Send Feedback\", \"onClick\": { \"openLink\": { \"url\": \"https://example.com/feedback\" } } } ] ```",
                                                   :items {:$ref "GoogleAppsCardV1CardAction"}},
                                     :displayStyle {:enum ["DISPLAY_STYLE_UNSPECIFIED"
                                                           "PEEK"
                                                           "REPLACE"],
                                                    :description "The display style for peekCardHeader.",
                                                    :type "string",
                                                    :enumDescriptions [""
                                                                       "The header of the card appears at the bottom of the sidebar, partially covering the current top card of the stack. Clicking the header pops the card into the card stack. If the card has no header, a generated header is used instead."
                                                                       "The card is shown by replacing the view of the top card in the card stack."]},
                                     :fixedFooter {:description "The fixed footer shown at the bottom of this card.",
                                                   :$ref "GoogleAppsCardV1CardFixedFooter"},
                                     :sections {:type "array",
                                                :items {:$ref "GoogleAppsCardV1Section"},
                                                :description "Sections are separated by a line divider."},
                                     :header {:description "The header of the card. A header usually contains a title and an image.",
                                              :$ref "GoogleAppsCardV1CardHeader"},
                                     :peekCardHeader {:$ref "GoogleAppsCardV1CardHeader",
                                                      :description "When displaying contextual content, the peek card header acts as a placeholder so that the user can navigate forward between the homepage cards and the contextual cards."}},
                        :type "object",
                        :description "A card is a UI element that can contain UI widgets such as text and images. For more information, see Cards . For example, the following JSON creates a card that has a header with the name, position, icons, and link for a contact, followed by a section with contact information like email and phone number. ``` { \"header\": { \"title\": \"Heba Salam\", \"subtitle\": \"Software Engineer\", \"imageStyle\": \"ImageStyle.AVATAR\", \"imageUrl\": \"https://example.com/heba_salam.png\", \"imageAltText\": \"Avatar for Heba Salam\" }, \"sections\" : [ { \"header\": \"Contact Info\", \"widgets\": [ { \"decorated_text\": { \"icon\": { \"knownIcon\": \"EMAIL\" }, \"content\": \"heba.salam@example.com\" } }, { \"decoratedText\": { \"icon\": { \"knownIcon\": \"PERSON\" }, \"content\": \"Online\" } }, { \"decoratedText\": { \"icon\": { \"knownIcon\": \"PHONE\" }, \"content\": \"+1 (555) 555-1234\" } }, { \"buttons\": [ { \"textButton\": { \"text\": \"Share\", }, \"onClick\": { \"openLink\": { \"url\": \"https://example.com/share\" } } }, { \"textButton\": { \"text\": \"Edit\", }, \"onClick\": { \"action\": { \"function\": \"goToView\", \"parameters\": [ { \"key\": \"viewType\", \"value\": \"EDIT\" } ], \"loadIndicator\": \"LoadIndicator.SPINNER\" } } } ] } ], \"collapsible\": true, \"uncollapsibleWidgetsCount\": 3 } ], \"cardActions\": [ { \"actionLabel\": \"Send Feedback\", \"onClick\": { \"openLink\": { \"url\": \"https://example.com/feedback\" } } } ], \"name\": \"contact-card-K3wB6arF2H9L\" } ```",
                        :id "GoogleAppsCardV1Card"},
 :GoogleAppsCardV1CardFixedFooter {:properties {:primaryButton {:description "The primary button of the fixed footer. The button must be a text button with text and color set.",
                                                                :$ref "GoogleAppsCardV1Button"},
                                                :secondaryButton {:description "The secondary button of the fixed footer. The button must be a text button with text and color set. `primaryButton` must be set if `secondaryButton` is set.",
                                                                  :$ref "GoogleAppsCardV1Button"}},
                                   :id "GoogleAppsCardV1CardFixedFooter",
                                   :type "object",
                                   :description "A persistent (sticky) footer that is added to the bottom of the card."},
 :GoogleAppsCardV1DecoratedText {:description "A widget that displays text with optional decorations such as a label above or below the text, an icon in front of the text, a selection widget or a button after the text.",
                                 :properties {:wrapText {:type "boolean",
                                                         :description "The wrap text setting. If `true`, the text is wrapped and displayed in multiline. Otherwise, the text is truncated."},
                                              :button {:$ref "GoogleAppsCardV1Button",
                                                       :description "A button that can be clicked to trigger an action."},
                                              :endIcon {:description "An icon displayed after the text.",
                                                        :$ref "GoogleAppsCardV1Icon"},
                                              :bottomLabel {:type "string",
                                                            :description "The formatted text label that shows below the main text."},
                                              :icon {:$ref "GoogleAppsCardV1Icon",
                                                     :description "Deprecated in favor of start_icon."},
                                              :startIcon {:$ref "GoogleAppsCardV1Icon",
                                                          :description "The icon displayed in front of the text."},
                                              :switchControl {:$ref "GoogleAppsCardV1SwitchControl",
                                                              :description "A switch widget can be clicked to change its state or trigger an action."},
                                              :onClick {:description "Only the top and bottom label and content region are clickable.",
                                                        :$ref "GoogleAppsCardV1OnClick"},
                                              :topLabel {:type "string",
                                                         :description "The formatted text label that shows above the main text."},
                                              :text {:description "Required. The main widget formatted text. See Text formatting for details.",
                                                     :type "string"}},
                                 :id "GoogleAppsCardV1DecoratedText",
                                 :type "object"},
 :GoogleAppsCardV1Action {:description "An action that describes the behavior when the form is submitted. For example, an Apps Script can be invoked to handle the form.",
                          :properties {:persistValues {:type "boolean",
                                                       :description "Indicates whether form values persist after the action. The default value is `false`. If `true`, form values remain after the action is triggered. When using [LoadIndicator.NONE](workspace/add-ons/reference/rpc/google.apps.card.v1#loadindicator) for actions, `persist_values` = `true`is recommended, as it ensures that any changes made by the user after form or on change actions are sent to the server are not overwritten by the response. If `false`, the form values are cleared when the action is triggered. When `persist_values` is set to `false`, it is strongly recommended that the card use [LoadIndicator.SPINNER](workspace/add-ons/reference/rpc/google.apps.card.v1#loadindicator) for all actions, as this locks the UI to ensure no changes are made by the user while the action is being processed."},
                                       :function {:description "Apps Script function to invoke when the containing element is clicked/activated.",
                                                  :type "string"},
                                       :loadIndicator {:type "string",
                                                       :enumDescriptions ["Displays a spinner to indicate that content is loading."
                                                                          "Nothing is displayed."],
                                                       :enum ["SPINNER"
                                                              "NONE"]},
                                       :parameters {:items {:$ref "GoogleAppsCardV1ActionParameter"},
                                                    :type "array",
                                                    :description "List of action parameters."}},
                          :id "GoogleAppsCardV1Action",
                          :type "object"},
 :WidgetMarkup {:description "A widget is a UI element that presents texts, images, etc.",
                :properties {:buttons {:description "A list of buttons. Buttons is also oneof data and only one of these fields should be set.",
                                       :type "array",
                                       :items {:$ref "Button"}},
                             :image {:$ref "Image",
                                     :description "Display an image in this widget."},
                             :keyValue {:$ref "KeyValue",
                                        :description "Display a key value item in this widget."},
                             :textParagraph {:$ref "TextParagraph",
                                             :description "Display a text paragraph in this widget."}},
                :type "object",
                :id "WidgetMarkup"},
 :GoogleAppsCardV1Icon {:properties {:imageType {:enum ["SQUARE"
                                                        "CIRCLE"],
                                                 :type "string",
                                                 :enumDescriptions ["Applies no cropping to the image."
                                                                    "Applies a circular mask to the image."],
                                                 :description "The crop style applied to the image. In some cases, applying a `CIRCLE` crop causes the image to be drawn larger than a standard icon."},
                                     :altText {:type "string",
                                               :description "The description of the icon, used for accessibility. The default value is provided if you don't specify one."},
                                     :iconUrl {:type "string",
                                               :description "The icon specified by a URL."},
                                     :knownIcon {:type "string",
                                                 :description "The icon specified by the string name of a list of known icons"}},
                        :id "GoogleAppsCardV1Icon",
                        :type "object"},
 :GoogleAppsCardV1SelectionInput {:description "A widget that creates a UI item (for example, a drop-down list) with options for users to select.",
                                  :properties {:type {:type "string",
                                                      :enumDescriptions ["The selection type is a checkbox."
                                                                         "The selection type is a radio button."
                                                                         "The selection type is a switch."
                                                                         "The selection type is a dropdown."],
                                                      :enum ["CHECK_BOX"
                                                             "RADIO_BUTTON"
                                                             "SWITCH"
                                                             "DROPDOWN"]},
                                               :label {:type "string",
                                                       :description "The label displayed ahead of the switch control."},
                                               :items {:type "array",
                                                       :items {:$ref "GoogleAppsCardV1SelectionItem"}},
                                               :name {:description "The name of the text input which is used in formInput.",
                                                      :type "string"},
                                               :onChangeAction {:$ref "GoogleAppsCardV1Action",
                                                                :description "If specified, the form is submitted when the selection changes. If not specified, you must specify a separate button."}},
                                  :type "object",
                                  :id "GoogleAppsCardV1SelectionInput"},
 :SlashCommandMetadata {:id "SlashCommandMetadata",
                        :description "Annotation metadata for slash commands (/).",
                        :type "object",
                        :properties {:triggersDialog {:description "Indicating whether the slash command is for a dialog.",
                                                      :type "boolean"},
                                     :type {:type "string",
                                            :description "The type of slash command.",
                                            :enumDescriptions ["Default value for the enum. DO NOT USE."
                                                               "Add bot to space."
                                                               "Invoke slash command in space."],
                                            :enum ["TYPE_UNSPECIFIED"
                                                   "ADD"
                                                   "INVOKE"]},
                                     :bot {:description "The bot whose command was invoked.",
                                           :$ref "User"},
                                     :commandId {:description "The command id of the invoked slash command.",
                                                 :type "string",
                                                 :format "int64"},
                                     :commandName {:type "string",
                                                   :description "The name of the invoked slash command."}}},
 :CardAction {:properties {:actionLabel {:type "string",
                                         :description "The label used to be displayed in the action menu item."},
                           :onClick {:description "The onclick action for this action item.",
                                     :$ref "OnClick"}},
              :id "CardAction",
              :description "A card action is the action associated with the card. For an invoice card, a typical action would be: delete invoice, email invoice or open the invoice in browser.",
              :type "object"},
 :TextButton {:description "A button with text and onclick action.",
              :properties {:onClick {:$ref "OnClick",
                                     :description "The onclick action of the button."},
                           :text {:type "string",
                                  :description "The text of the button."}},
              :id "TextButton",
              :type "object"},
 :GoogleAppsCardV1SuggestionItem {:id "GoogleAppsCardV1SuggestionItem",
                                  :properties {:text {:type "string"}},
                                  :type "object",
                                  :description "A suggestion item. Only supports text for now."},
 :Message {:description "A message in Hangouts Chat.",
           :id "Message",
           :properties {:space {:description "The space the message belongs to.",
                                :$ref "Space"},
                        :fallbackText {:type "string",
                                       :description "A plain-text description of the message's cards, used when the actual cards cannot be displayed (e.g. mobile notifications)."},
                        :name {:type "string"},
                        :createTime {:type "string",
                                     :format "google-datetime",
                                     :description "Output only. The time at which the message was created in Hangouts Chat server."},
                        :previewText {:type "string",
                                      :description "Text for generating preview chips. This text will not be displayed to the user, but any links to images, web pages, videos, etc. included here will generate preview chips."},
                        :argumentText {:description "Plain-text body of the message with all bot mentions stripped out.",
                                       :type "string"},
                        :thread {:description "The thread the message belongs to.",
                                 :$ref "Thread"},
                        :actionResponse {:description "Input only. Parameters that a bot can use to configure how its response is posted.",
                                         :$ref "ActionResponse"},
                        :sender {:description "The user who created the message.",
                                 :$ref "User"},
                        :cards {:description "Rich, formatted and interactive cards that can be used to display UI elements such as: formatted texts, buttons, clickable images. Cards are normally displayed below the plain-text body of the message.",
                                :type "array",
                                :items {:$ref "Card"}},
                        :annotations {:items {:$ref "Annotation"},
                                      :type "array",
                                      :description "Output only. Annotations associated with the text in this message."},
                        :slashCommand {:$ref "SlashCommand",
                                       :description "Slash command information, if applicable."},
                        :cardsV2 {:type "array",
                                  :description "Rich, formatted and interactive cards that can be used to display UI elements and editable widgets, such as: formatted text, buttons, clickable images, checkboxes, radio buttons. Cards are normally displayed below the plain-text body of the message. This v2 allows input widgets. The string key is a unique identifier among cards in the same message for identifying inputs.",
                                  :items {:$ref "CardWithId"}},
                        :attachment {:type "array",
                                     :description "User uploaded attachment.",
                                     :items {:$ref "Attachment"}},
                        :text {:description "Plain-text body of the message.",
                               :type "string"}},
           :type "object"},
 :Image {:description "An image that is specified by a URL and can have an onclick action.",
         :type "object",
         :id "Image",
         :properties {:imageUrl {:description "The URL of the image.",
                                 :type "string"},
                      :aspectRatio {:description "The aspect ratio of this image (width/height). This field allows clients to reserve the right height for the image while waiting for it to load. It's not meant to override the native aspect ratio of the image. If unset, the server fills it by prefetching the image.",
                                    :type "number",
                                    :format "double"},
                      :onClick {:$ref "OnClick",
                                :description "The onclick action."}}},
 :CardHeader {:properties {:title {:description "The title must be specified. The header has a fixed height: if both a title and subtitle is specified, each will take up 1 line. If only the title is specified, it will take up both lines.",
                                   :type "string"},
                           :imageStyle {:enum ["IMAGE_STYLE_UNSPECIFIED"
                                               "IMAGE"
                                               "AVATAR"],
                                        :type "string",
                                        :description "The image's type (e.g. square border or circular border).",
                                        :enumDescriptions [""
                                                           "Square border."
                                                           "Circular border."]},
                           :imageUrl {:type "string",
                                      :description "The URL of the image in the card header."},
                           :subtitle {:description "The subtitle of the card header.",
                                      :type "string"}},
              :id "CardHeader",
              :type "object"},
 :KeyValue {:properties {:bottomLabel {:description "The text of the bottom label. Formatted text supported.",
                                       :type "string"},
                         :content {:description "The text of the content. Formatted text supported and always required.",
                                   :type "string"},
                         :button {:description "A button that can be clicked to trigger an action.",
                                  :$ref "Button"},
                         :topLabel {:type "string",
                                    :description "The text of the top label. Formatted text supported."},
                         :onClick {:description "The onclick action. Only the top label, bottom label and content region are clickable.",
                                   :$ref "OnClick"},
                         :contentMultiline {:description "If the content should be multiline.",
                                            :type "boolean"},
                         :iconUrl {:type "string",
                                   :description "The icon specified by a URL."},
                         :icon {:enumDescriptions [""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""
                                                   ""],
                                :type "string",
                                :enum ["ICON_UNSPECIFIED"
                                       "AIRPLANE"
                                       "BOOKMARK"
                                       "BUS"
                                       "CAR"
                                       "CLOCK"
                                       "CONFIRMATION_NUMBER_ICON"
                                       "DOLLAR"
                                       "DESCRIPTION"
                                       "EMAIL"
                                       "EVENT_PERFORMER"
                                       "EVENT_SEAT"
                                       "FLIGHT_ARRIVAL"
                                       "FLIGHT_DEPARTURE"
                                       "HOTEL"
                                       "HOTEL_ROOM_TYPE"
                                       "INVITE"
                                       "MAP_PIN"
                                       "MEMBERSHIP"
                                       "MULTIPLE_PEOPLE"
                                       "OFFER"
                                       "PERSON"
                                       "PHONE"
                                       "RESTAURANT_ICON"
                                       "SHOPPING_CART"
                                       "STAR"
                                       "STORE"
                                       "TICKET"
                                       "TRAIN"
                                       "VIDEO_CAMERA"
                                       "VIDEO_PLAY"],
                                :description "An enum value that will be replaced by the Chat API with the corresponding icon image."}},
            :type "object",
            :description "A UI element contains a key (label) and a value (content). And this element may also contain some actions such as onclick button.",
            :id "KeyValue"},
 :GoogleAppsCardV1SwitchControl {:id "GoogleAppsCardV1SwitchControl",
                                 :type "object",
                                 :properties {:name {:description "The name of the switch widget that's used in formInput.",
                                                     :type "string"},
                                              :selected {:description "If the switch is selected.",
                                                         :type "boolean"},
                                              :onChangeAction {:description "The action when the switch state is changed.",
                                                               :$ref "GoogleAppsCardV1Action"},
                                              :value {:description "The value is what is passed back in the callback.",
                                                      :type "string"},
                                              :controlType {:enum ["SWITCH"
                                                                   "CHECKBOX"
                                                                   "CHECK_BOX"],
                                                            :description "The control type, either switch or checkbox.",
                                                            :type "string",
                                                            :enumDescriptions [""
                                                                               "Deprecated in favor of `CHECK_BOX`."
                                                                               ""]}}},
 :Thread {:id "Thread",
          :properties {:name {:description "Resource name, in the form \"spaces/*/threads/*\". Example: spaces/AAAAMpdlehY/threads/UMxbHmzDlr4",
                              :type "string"}},
          :description "A thread in Hangouts Chat.",
          :type "object"},
 :OnClick {:id "OnClick",
           :type "object",
           :properties {:openLink {:description "This onclick triggers an open link action if specified.",
                                   :$ref "OpenLink"},
                        :action {:description "A form action will be triggered by this onclick if specified.",
                                 :$ref "FormAction"}},
           :description "An onclick action (e.g. open a link)."},
 :GoogleAppsCardV1OpenLink {:properties {:url {:type "string",
                                               :description "The URL to open."},
                                         :openAs {:enumDescriptions ["The link opens as a full size window (if that's the frame used by the client."
                                                                     "The link opens as an overlay, such as a pop-up."],
                                                  :type "string",
                                                  :enum ["FULL_SIZE"
                                                         "OVERLAY"]},
                                         :onClose {:type "string",
                                                   :enumDescriptions ["Doesn’t reload the card after the child window closes. Reloads the card after the child window closes. If used in conjunction with [OpenAs.OVERLAY](/workspace/add-ons/reference/rpc/google.apps.card.v1#openas), the child window acts as a modal dialog and the main card is blocked until the child window closes."
                                                                      ""],
                                                   :enum ["NOTHING"
                                                          "RELOAD"]}},
                            :id "GoogleAppsCardV1OpenLink",
                            :type "object"},
 :ActionResponse {:properties {:type {:type "string",
                                      :enumDescriptions ["Default type; will be handled as NEW_MESSAGE."
                                                         "Post as a new message in the topic."
                                                         "Update the bot's message. This is only permitted on a CARD_CLICKED event where the message sender type is BOT."
                                                         "Update a message, with cards only. (Only after a MESSAGE event with a matched url, or a CARD_CLICKED event on a human created message)."],
                                      :enum ["TYPE_UNSPECIFIED"
                                             "NEW_MESSAGE"
                                             "UPDATE_MESSAGE"
                                             "REQUEST_CONFIG"],
                                      :description "The type of bot response."},
                               :url {:type "string",
                                     :description "URL for users to auth or config. (Only for REQUEST_CONFIG response types.)"}},
                  :id "ActionResponse",
                  :description "Parameters that a bot can use to configure how it's response is posted.",
                  :type "object"},
 :DeprecatedEvent {:description "Google Chat events.",
                   :type "object",
                   :id "DeprecatedEvent",
                   :properties {:configCompleteRedirectUrl {:description "The URL the bot should redirect the user to after they have completed an authorization or configuration flow outside of Google Chat. See the [Authorizing access to 3p services guide](/chat/how-tos/auth-3p) for more information.",
                                                            :type "string"},
                                :space {:description "The room or DM in which the event occurred.",
                                        :$ref "Space"},
                                :type {:type "string",
                                       :enumDescriptions ["Default value for the enum. DO NOT USE."
                                                          "A message was sent in a room or direct message."
                                                          "The bot was added to a room or DM."
                                                          "The bot was removed from a room or DM."
                                                          "The bot's interactive card was clicked."],
                                       :enum ["UNSPECIFIED"
                                              "MESSAGE"
                                              "ADDED_TO_SPACE"
                                              "REMOVED_FROM_SPACE"
                                              "CARD_CLICKED"],
                                       :description "The type of the event."},
                                :token {:description "A secret value that bots can use to verify if a request is from Google. The token is randomly generated by Google, remains static, and can be obtained from the Google Chat API configuration page in the Cloud Console. Developers can revoke/regenerate it if needed from the same page.",
                                        :type "string"},
                                :action {:description "The form action data associated with an interactive card that was clicked. Only populated for CARD_CLICKED events. See the [Interactive Cards guide](/chat/how-tos/cards-onclick) for more information.",
                                         :$ref "FormAction"},
                                :eventTime {:format "google-datetime",
                                            :type "string",
                                            :description "The timestamp indicating when the event was dispatched."},
                                :user {:description "The user that triggered the event.",
                                       :$ref "User"},
                                :message {:$ref "Message",
                                          :description "The message that triggered the event, if applicable."},
                                :threadKey {:description "The bot-defined key for the thread related to the event. See the thread_key field of the `spaces.message.create` request for more information.",
                                            :type "string"}}},
 :FormAction {:type "object",
              :description "A form action describes the behavior when the form is submitted. For example, an Apps Script can be invoked to handle the form.",
              :id "FormAction",
              :properties {:parameters {:description "List of action parameters.",
                                        :items {:$ref "ActionParameter"},
                                        :type "array"},
                           :actionMethodName {:type "string",
                                              :description "The method name is used to identify which part of the form triggered the form submission. This information is echoed back to the bot as part of the card click event. The same method name can be used for several elements that trigger a common behavior if desired."}}},
 :Empty {:description "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`.",
         :id "Empty",
         :properties {},
         :type "object"},
 :GoogleAppsCardV1GridItem {:properties {:id {:type "string",
                                              :description "A user-specified identifier for this grid item. This identifier is returned in the parent Grid's onClick callback parameters."},
                                         :subtitle {:type "string",
                                                    :description "The grid item's subtitle."},
                                         :image {:description "The image that displays in the grid item.",
                                                 :$ref "GoogleAppsCardV1ImageComponent"},
                                         :layout {:enumDescriptions ["No layout specified."
                                                                     "The title and subtitle are shown below the grid item's image."
                                                                     "The title and subtitle are shown above the grid item's image."],
                                                  :type "string",
                                                  :enum ["GRID_ITEM_LAYOUT_UNSPECIFIED"
                                                         "TEXT_BELOW"
                                                         "TEXT_ABOVE"],
                                                  :description "The layout to use for the grid item."},
                                         :textAlignment {:enum ["HORIZONTAL_ALIGNMENT_UNSPECIFIED"
                                                                "START"
                                                                "CENTER"
                                                                "END"],
                                                         :type "string",
                                                         :description "The horizontal alignment of the grid item's text.",
                                                         :enumDescriptions ["Unspecified alignment."
                                                                            "Alignment to the start position."
                                                                            "Alignment to the center position."
                                                                            "Alignment to the end position."]},
                                         :title {:type "string",
                                                 :description "The grid item's title."}},
                            :id "GoogleAppsCardV1GridItem",
                            :type "object",
                            :description "Represents a single item in the grid layout."},
 :Membership {:description "Represents a membership relation in Hangouts Chat.",
              :properties {:member {:$ref "User",
                                    :description "A User in Hangout Chat"},
                           :name {:type "string"},
                           :state {:type "string",
                                   :description "State of the membership.",
                                   :enum ["MEMBERSHIP_STATE_UNSPECIFIED"
                                          "JOINED"
                                          "INVITED"
                                          "NOT_A_MEMBER"],
                                   :enumDescriptions ["Default, do not use."
                                                      "The user has joined the space."
                                                      "The user has been invited, is able to join the space, but currently has not joined."
                                                      "The user is not a member of the space, has not been invited and is not able to join the space."]},
                           :createTime {:format "google-datetime",
                                        :description "The creation time of the membership a.k.a the time at which the member joined the space, if applicable.",
                                        :type "string"}},
              :type "object",
              :id "Membership"},
 :GoogleAppsCardV1OnClick {:type "object",
                           :properties {:card {:description "A new card is pushed to the card stack after clicking if specified.",
                                               :$ref "GoogleAppsCardV1Card"},
                                        :openDynamicLinkAction {:description "An add-on triggers this action when the action needs to open a link. This differs from the open_link above in that this needs to talk to server to get the link. Thus some preparation work is required for web client to do before the open link action response comes back.",
                                                                :$ref "GoogleAppsCardV1Action"},
                                        :action {:description "If specified, an action is triggered by this onClick.",
                                                 :$ref "GoogleAppsCardV1Action"},
                                        :openLink {:description "If specified, this onClick triggers an open link action.",
                                                   :$ref "GoogleAppsCardV1OpenLink"}},
                           :id "GoogleAppsCardV1OnClick"},
 :GoogleAppsCardV1Widget {:description "A widget is a UI element that presents texts, images, etc.",
                          :type "object",
                          :properties {:dateTimePicker {:$ref "GoogleAppsCardV1DateTimePicker",
                                                        :description "Displays a selection/input widget for date/time. For example, the following JSON creates a date/time picker for an appointment time: ``` \"date_time_picker\": { \"name\": \"appointment_time\", \"label\": \"Book your appointment at:\", \"type\": \"DateTimePickerType.DATE_AND_TIME\", \"valueMsEpoch\": \"796435200000\" } ```"},
                                       :selectionInput {:description "Displays a switch control in this widget. For example, the following JSON creates a dropdown selection for size: ``` \"switchControl\": { \"name\": \"size\", \"label\": \"Size\" \"type\": \"SelectionType.DROPDOWN\", \"items\": [ { \"text\": \"S\", \"value\": \"small\", \"selected\": false }, { \"text\": \"M\", \"value\": \"medium\", \"selected\": true }, { \"text\": \"L\", \"value\": \"large\", \"selected\": false }, { \"text\": \"XL\", \"value\": \"extra_large\", \"selected\": false } ] } ```",
                                                        :$ref "GoogleAppsCardV1SelectionInput"},
                                       :grid {:$ref "GoogleAppsCardV1Grid",
                                              :description "Displays a grid with a collection of items. For example, the following JSON creates a 2 column grid with a single item: ``` \"grid\": { \"title\": \"A fine collection of items\", \"numColumns\": 2, \"borderStyle\": { \"type\": \"STROKE\", \"cornerRadius\": 4.0 }, \"items\": [ \"image\": { \"imageUri\": \"https://www.example.com/image.png\", \"cropStyle\": { \"type\": \"SQUARE\" }, \"borderStyle\": { \"type\": \"STROKE\" } }, \"title\": \"An item\", \"textAlignment\": \"CENTER\" ], \"onClick\": { \"openLink\": { \"url\":\"https://www.example.com\" } } } ```"},
                                       :decoratedText {:$ref "GoogleAppsCardV1DecoratedText",
                                                       :description "Displays a decorated text item in this widget. For example, the following JSON creates a decorated text widget showing email address: ``` \"decoratedText\": { \"icon\": { \"knownIcon\": \"EMAIL\" }, \"topLabel\": \"Email Address\", \"content\": \"heba.salam@example.com\", \"bottomLabel\": \"This is a new Email address!\", \"switchWidget\": { \"name\": \"has_send_welcome_email_to_heba_salam\", \"selected\": false, \"controlType\": \"ControlType.CHECKBOX\" } } ```"},
                                       :divider {:$ref "GoogleAppsCardV1Divider",
                                                 :description "Displays a divider. For example, the following JSON creates a divider: ``` \"divider\": { } ```"},
                                       :textParagraph {:$ref "GoogleAppsCardV1TextParagraph",
                                                       :description "Displays a text paragraph in this widget. For example, the following JSON creates a bolded text: ``` \"textParagraph\": { \"text\": \" *bold text*\" } ```"},
                                       :buttonList {:$ref "GoogleAppsCardV1ButtonList",
                                                    :description "A list of buttons. For example, the following JSON creates two buttons. The first is a filled text button and the second is an image button that opens a link: ``` \"buttonList\": { \"buttons\": [ \"button\": { \"text\": \"Edit\", \"Color\": { \"Red\": 255 \"Green\": 255 \"Blue\": 255 } \"disabled\": true }, \"button\": { \"icon\": { \"knownIcon\": \"INVITE\" \"altText\": \"check calendar\" }, \"onClick\": { \"openLink\": { \"url\": \"https://example.com/calendar\" } } }, ] } ```"},
                                       :textInput {:$ref "GoogleAppsCardV1TextInput",
                                                   :description "Displays a text input in this widget. For example, the following JSON creates a text input for mail address: ``` \"textInput\": { \"name\": \"mailing_address\", \"label\": \"Mailing Address\" } ``` As another example, the following JSON creates a text input for programming language with static suggestions: ``` \"textInput\": { \"name\": \"preferred_programing_language\", \"label\": \"Preferred Language\", \"initialSuggestions\": { \"items\": [ { \"text\": \"C++\" }, { \"text\": \"Java\" }, { \"text\": \"JavaScript\" }, { \"text\": \"Python\" } ] } } ```"},
                                       :image {:$ref "GoogleAppsCardV1Image",
                                               :description "Displays an image in this widget. For example, the following JSON creates an image with alternative text: ``` \"image\": { \"imageUrl\": \"https://example.com/heba_salam.png\" \"altText\": \"Avatar for Heba Salam\" } ```"},
                                       :horizontalAlignment {:enum ["HORIZONTAL_ALIGNMENT_UNSPECIFIED"
                                                                    "START"
                                                                    "CENTER"
                                                                    "END"],
                                                             :enumDescriptions ["Unspecified alignment."
                                                                                "Alignment to the start position."
                                                                                "Alignment to the center position."
                                                                                "Alignment to the end position."],
                                                             :description "The horizontal alignment of this widget.",
                                                             :type "string"}},
                          :id "GoogleAppsCardV1Widget"},
 :SlashCommand {:type "object",
                :description "A Slash Command in Chat.",
                :id "SlashCommand",
                :properties {:commandId {:description "The id of the slash command invoked.",
                                         :type "string",
                                         :format "int64"}}},
 :Card {:properties {:cardActions {:type "array",
                                   :description "The actions of this card.",
                                   :items {:$ref "CardAction"}},
                     :name {:type "string",
                            :description "Name of the card."},
                     :header {:$ref "CardHeader",
                              :description "The header of the card. A header usually contains a title and an image."},
                     :sections {:items {:$ref "Section"},
                                :description "Sections are separated by a line divider.",
                                :type "array"}},
        :description "A card is a UI element that can contain UI widgets such as texts, images.",
        :id "Card",
        :type "object"},
 :GoogleAppsCardV1SelectionItem {:description "The item in the switch control. A radio button, at most one of the items is selected.",
                                 :properties {:selected {:description "If more than one item is selected for `RADIO_BUTTON` and `DROPDOWN`, the first selected item is treated as selected and the ones after are ignored.",
                                                         :type "boolean"},
                                              :text {:description "The text to be displayed.",
                                                     :type "string"},
                                              :value {:type "string",
                                                      :description "The value associated with this item. The client should use this as a form input value."}},
                                 :id "GoogleAppsCardV1SelectionItem",
                                 :type "object"},
 :ListSpacesResponse {:properties {:spaces {:type "array",
                                            :description "List of spaces in the requested (or first) page.",
                                            :items {:$ref "Space"}},
                                   :nextPageToken {:type "string",
                                                   :description "Continuation token to retrieve the next page of results. It will be empty for the last page of results. Tokens expire in an hour. An error is thrown if an expired token is passed."}},
                      :id "ListSpacesResponse",
                      :type "object"},
 :GoogleAppsCardV1Section {:id "GoogleAppsCardV1Section",
                           :properties {:widgets {:type "array",
                                                  :items {:$ref "GoogleAppsCardV1Widget"},
                                                  :description "A section must contain at least 1 widget."},
                                        :collapsible {:type "boolean",
                                                      :description "Indicates whether this section is collapsible. If a section is collapsible, the description must be given."},
                                        :uncollapsibleWidgetsCount {:format "int32",
                                                                    :type "integer",
                                                                    :description "The number of uncollapsible widgets. For example, when a section contains five widgets and the `numUncollapsibleWidget` is set to `2`, the first two widgets are always shown and the last three are collapsed as default. The `numUncollapsibleWidget` is taken into account only when collapsible is set to `true`."},
                                        :header {:type "string",
                                                 :description "The header of the section. Formatted text is supported."}},
                           :description "A section contains a collection of widgets that are rendered vertically in the order that they are specified. Across all platforms, cards have a narrow fixed width, so there is currently no need for layout properties, for example, float.",
                           :type "object"},
 :GoogleAppsCardV1Suggestions {:properties {:items {:description "A list of suggestions items which will be used in are used in autocomplete.",
                                                    :type "array",
                                                    :items {:$ref "GoogleAppsCardV1SuggestionItem"}}},
                               :description "A container wrapping elements necessary for showing suggestion items used in text input autocomplete.",
                               :id "GoogleAppsCardV1Suggestions",
                               :type "object"},
 :GoogleAppsCardV1Divider {:id "GoogleAppsCardV1Divider",
                           :type "object",
                           :description "A divider that appears in between widgets.",
                           :properties {}},
 :GoogleAppsCardV1DateTimePicker {:id "GoogleAppsCardV1DateTimePicker",
                                  :properties {:onChangeAction {:$ref "GoogleAppsCardV1Action",
                                                                :description "Triggered when the user clicks Save or Clear from the date/time picker dialog. This is only triggered if the value changed as a result of the Save/Clear operation."},
                                               :valueMsEpoch {:format "int64",
                                                              :description "The value to display as the default value before user input or previous user input. It is represented in milliseconds (Epoch time). For `DATE_AND_TIME` type, the full epoch value is used. For `DATE_ONLY` type, only date of the epoch time is used. For `TIME_ONLY` type, only time of the epoch time is used. For example, you can set epoch time to `3 * 60 * 60 * 1000` to represent 3am.",
                                                              :type "string"},
                                               :label {:type "string",
                                                       :description "The label for the field that displays to the user."},
                                               :type {:enum ["DATE_AND_TIME"
                                                             "DATE_ONLY"
                                                             "TIME_ONLY"],
                                                      :type "string",
                                                      :description "The type of the date/time picker.",
                                                      :enumDescriptions ["The user can select a date and time."
                                                                         "The user can only select a date."
                                                                         "The user can only select a time."]},
                                               :timezoneOffsetDate {:format "int32",
                                                                    :type "integer",
                                                                    :description "The number representing the time zone offset from UTC, in minutes. If set, the `value_ms_epoch` is displayed in the specified time zone. If not set, it uses the user's time zone setting on the client side."},
                                               :name {:type "string",
                                                      :description "The name of the text input that's used in formInput, and uniquely identifies this input."}},
                                  :description "The widget that lets users to specify a date and time.",
                                  :type "object"},
 :User {:properties {:type {:type "string",
                            :enumDescriptions ["Default value for the enum. DO NOT USE."
                                               "Human user."
                                               "Bot user."],
                            :enum ["TYPE_UNSPECIFIED" "HUMAN" "BOT"],
                            :description "User type."},
                     :name {:description "Resource name, in the format \"users/*\".",
                            :type "string"},
                     :domainId {:description "Obfuscated domain information.",
                                :type "string"},
                     :displayName {:description "The user's display name.",
                                   :type "string"},
                     :isAnonymous {:description "True when the user is deleted or the user's profile is not visible.",
                                   :type "boolean"}},
        :type "object",
        :description "A user in Google Chat.",
        :id "User"},
 :GoogleAppsCardV1Image {:id "GoogleAppsCardV1Image",
                         :description "An image that is specified by a URL and can have an onClick action.",
                         :type "object",
                         :properties {:altText {:type "string",
                                                :description "The alternative text of this image, used for accessibility."},
                                      :onClick {:$ref "GoogleAppsCardV1OnClick"},
                                      :imageUrl {:description "An image URL.",
                                                 :type "string"}}},
 :AttachmentDataRef {:description "A reference to the data of an attachment.",
                     :id "AttachmentDataRef",
                     :type "object",
                     :properties {:resourceName {:description "The resource name of the attachment data. This is used with the media API to download the attachment data.",
                                                 :type "string"}}},
 :GoogleAppsCardV1ActionParameter {:type "object",
                                   :properties {:value {:type "string",
                                                        :description "The value of the parameter."},
                                                :key {:type "string",
                                                      :description "The name of the parameter for the action script."}},
                                   :id "GoogleAppsCardV1ActionParameter",
                                   :description "List of string parameters to supply when the action method is invoked. For example, consider three snooze buttons: snooze now, snooze 1 day, snooze next week. You might use action method = snooze(), passing the snooze type and snooze time in the list of string parameters."},
 :ImageButton {:description "An image button with an onclick action.",
               :type "object",
               :id "ImageButton",
               :properties {:iconUrl {:type "string",
                                      :description "The icon specified by a URL."},
                            :icon {:description "The icon specified by an enum that indices to an icon provided by Chat API.",
                                   :enum ["ICON_UNSPECIFIED"
                                          "AIRPLANE"
                                          "BOOKMARK"
                                          "BUS"
                                          "CAR"
                                          "CLOCK"
                                          "CONFIRMATION_NUMBER_ICON"
                                          "DOLLAR"
                                          "DESCRIPTION"
                                          "EMAIL"
                                          "EVENT_PERFORMER"
                                          "EVENT_SEAT"
                                          "FLIGHT_ARRIVAL"
                                          "FLIGHT_DEPARTURE"
                                          "HOTEL"
                                          "HOTEL_ROOM_TYPE"
                                          "INVITE"
                                          "MAP_PIN"
                                          "MEMBERSHIP"
                                          "MULTIPLE_PEOPLE"
                                          "OFFER"
                                          "PERSON"
                                          "PHONE"
                                          "RESTAURANT_ICON"
                                          "SHOPPING_CART"
                                          "STAR"
                                          "STORE"
                                          "TICKET"
                                          "TRAIN"
                                          "VIDEO_CAMERA"
                                          "VIDEO_PLAY"],
                                   :type "string",
                                   :enumDescriptions [""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""
                                                      ""]},
                            :onClick {:$ref "OnClick",
                                      :description "The onclick action."},
                            :name {:description "The name of this image_button which will be used for accessibility. Default value will be provided if developers don't specify.",
                                   :type "string"}}},
 :Attachment {:id "Attachment",
              :type "object",
              :properties {:source {:enumDescriptions ["" "" ""],
                                    :type "string",
                                    :enum ["SOURCE_UNSPECIFIED"
                                           "DRIVE_FILE"
                                           "UPLOADED_CONTENT"],
                                    :description "The source of the attachment."},
                           :downloadUri {:type "string",
                                         :description "Output only. The download URL which should be used to allow a human user to download the attachment. Bots should not use this URL to download attachment content."},
                           :driveDataRef {:description "A reference to the drive attachment. This is used with the Drive API.",
                                          :$ref "DriveDataRef"},
                           :attachmentDataRef {:$ref "AttachmentDataRef",
                                               :description "A reference to the attachment data. This is used with the media API to download the attachment data."},
                           :contentName {:type "string",
                                         :description "The original file name for the content, not the full path."},
                           :name {:description "Resource name of the attachment, in the form \"spaces/*/messages/*/attachments/*\".",
                                  :type "string"},
                           :thumbnailUri {:type "string",
                                          :description "Output only. The thumbnail URL which should be used to preview the attachment to a human user. Bots should not use this URL to download attachment content."},
                           :contentType {:description "The content type (MIME type) of the file.",
                                         :type "string"}},
              :description "An attachment in Hangouts Chat."},
 :Section {:properties {:widgets {:description "A section must contain at least 1 widget.",
                                  :type "array",
                                  :items {:$ref "WidgetMarkup"}},
                        :header {:type "string",
                                 :description "The header of the section, text formatted supported."}},
           :description "A section contains a collection of widgets that are rendered (vertically) in the order that they are specified. Across all platforms, cards have a narrow fixed width, so there is currently no need for layout properties (e.g. float).",
           :type "object",
           :id "Section"},
 :TextParagraph {:id "TextParagraph",
                 :description "A paragraph of text. Formatted text supported.",
                 :type "object",
                 :properties {:text {:type "string"}}},
 :GoogleAppsCardV1TextInput {:properties {:autoCompleteAction {:$ref "GoogleAppsCardV1Action",
                                                               :description "The refresh function that returns suggestions based on the user's input text. If the callback is not specified, autocomplete is done in client side based on the initial suggestion items."},
                                          :hintText {:description "The hint text.",
                                                     :type "string"},
                                          :onChangeAction {:$ref "GoogleAppsCardV1Action",
                                                           :description "The onChange action, for example, invoke a function."},
                                          :name {:type "string",
                                                 :description "The name of the text input which is used in formInput."},
                                          :label {:description "At least one of label and hintText must be specified.",
                                                  :type "string"},
                                          :type {:type "string",
                                                 :enum ["SINGLE_LINE"
                                                        "MULTIPLE_LINE"],
                                                 :enumDescriptions ["The text is put into a single line."
                                                                    "The text is put into multiple lines."],
                                                 :description "The style of the text, for example, a single line or multiple lines."},
                                          :initialSuggestions {:description "The initial suggestions made before any user input.",
                                                               :$ref "GoogleAppsCardV1Suggestions"},
                                          :value {:description "The default value when there is no input from the user.",
                                                  :type "string"}},
                             :type "object",
                             :id "GoogleAppsCardV1TextInput",
                             :description "A text input is a UI item where users can input text. A text input can also have an onChange action and suggestions."},
 :GoogleAppsCardV1TextParagraph {:properties {:text {:type "string",
                                                     :description "The text that's shown in the widget."}},
                                 :id "GoogleAppsCardV1TextParagraph",
                                 :description "A paragraph of text that supports formatting. See [Text formatting](workspace/add-ons/concepts/widgets#text_formatting\") for details.",
                                 :type "object"},
 :ActionParameter {:type "object",
                   :id "ActionParameter",
                   :properties {:value {:description "The value of the parameter.",
                                        :type "string"},
                                :key {:type "string",
                                      :description "The name of the parameter for the action script."}},
                   :description "List of string parameters to supply when the action method is invoked. For example, consider three snooze buttons: snooze now, snooze 1 day, snooze next week. You might use action method = snooze(), passing the snooze type and snooze time in the list of string parameters."},
 :GoogleAppsCardV1CardAction {:properties {:actionLabel {:description "The label that displays as the action menu item.",
                                                         :type "string"},
                                           :onClick {:description "The onclick action for this action item.",
                                                     :$ref "GoogleAppsCardV1OnClick"}},
                              :id "GoogleAppsCardV1CardAction",
                              :type "object",
                              :description "A card action is the action associated with the card. For example, an invoice card might include actions such as delete invoice, email invoice, or open the invoice in a browser."},
 :DriveDataRef {:id "DriveDataRef",
                :description "A reference to the data of a drive attachment.",
                :properties {:driveFileId {:type "string",
                                           :description "The id for the drive file, for use with the Drive API."}},
                :type "object"},
 :GoogleAppsCardV1Grid {:properties {:columnCount {:type "integer",
                                                   :description "The number of columns to display in the grid. A default value is used if this field isn't specified, and that default value is different depending on where the grid is shown (dialog versus companion).",
                                                   :format "int32"},
                                     :borderStyle {:description "The border style to apply to each grid item.",
                                                   :$ref "GoogleAppsCardV1BorderStyle"},
                                     :items {:items {:$ref "GoogleAppsCardV1GridItem"},
                                             :type "array",
                                             :description "The items to display in the grid."},
                                     :title {:description "The text that displays in the grid header.",
                                             :type "string"},
                                     :onClick {:description "This callback is reused by each individual grid item, but with the item's identifier and index in the items list added to the callback's parameters.",
                                               :$ref "GoogleAppsCardV1OnClick"}},
                        :description "Represents a Grid widget that displays items in a configurable grid layout.",
                        :id "GoogleAppsCardV1Grid",
                        :type "object"},
 :CardWithId {:properties {:card {:$ref "GoogleAppsCardV1Card",
                                  :description "Card proto that allows chatbots to specify UI elements and editable widgets."},
                           :cardId {:type "string",
                                    :description "Chatbot-specified identifier for this widget. Scoped within a message."}},
              :type "object",
              :description "Widgets for chatbots to specify.",
              :id "CardWithId"},
 :GoogleAppsCardV1BorderStyle {:properties {:type {:enumDescriptions ["No value specified."
                                                                      "No border."
                                                                      "Outline."],
                                                   :enum ["BORDER_TYPE_UNSPECIFIED"
                                                          "NO_BORDER"
                                                          "STROKE"],
                                                   :description "The border type.",
                                                   :type "string"},
                                            :strokeColor {:description "The colors to use when the type is `BORDER_TYPE_STROKE`.",
                                                          :$ref "Color"},
                                            :cornerRadius {:description "The corner radius for the border.",
                                                           :type "integer",
                                                           :format "int32"}},
                               :id "GoogleAppsCardV1BorderStyle",
                               :type "object",
                               :description "Represents the complete border style applied to widgets."},
 :GoogleAppsCardV1ImageComponent {:type "object",
                                  :properties {:borderStyle {:description "The border style to apply to the image.",
                                                             :$ref "GoogleAppsCardV1BorderStyle"},
                                               :cropStyle {:description "The crop style to apply to the image.",
                                                           :$ref "GoogleAppsCardV1ImageCropStyle"},
                                               :imageUri {:type "string",
                                                          :description "The image URL."},
                                               :altText {:type "string",
                                                         :description "The accessibility label for the image."}},
                                  :id "GoogleAppsCardV1ImageComponent"},
 :UserMentionMetadata {:properties {:user {:$ref "User",
                                           :description "The user mentioned."},
                                    :type {:type "string",
                                           :description "The type of user mention.",
                                           :enum ["TYPE_UNSPECIFIED"
                                                  "ADD"
                                                  "MENTION"],
                                           :enumDescriptions ["Default value for the enum. DO NOT USE."
                                                              "Add user to space."
                                                              "Mention user in space."]}},
                       :description "Annotation metadata for user mentions (@).",
                       :id "UserMentionMetadata",
                       :type "object"},
 :GoogleAppsCardV1ButtonList {:type "object",
                              :description "A list of buttons layed out horizontally.",
                              :properties {:buttons {:items {:$ref "GoogleAppsCardV1Button"},
                                                     :type "array"}},
                              :id "GoogleAppsCardV1ButtonList"},
 :Media {:properties {:resourceName {:description "Name of the media resource.",
                                     :type "string"}},
         :description "Media resource.",
         :id "Media",
         :type "object"},
 :Annotation {:description "Annotations associated with the plain-text body of the message. Example plain-text message body: ``` Hello @FooBot how are you!\" ``` The corresponding annotations metadata: ``` \"annotations\":[{ \"type\":\"USER_MENTION\", \"startIndex\":6, \"length\":7, \"userMention\": { \"user\": { \"name\":\"users/107946847022116401880\", \"displayName\":\"FooBot\", \"avatarUrl\":\"https://goo.gl/aeDtrS\", \"type\":\"BOT\" }, \"type\":\"MENTION\" } }] ```",
              :properties {:startIndex {:format "int32",
                                        :description "Start index (0-based, inclusive) in the plain-text message body this annotation corresponds to.",
                                        :type "integer"},
                           :type {:enumDescriptions ["Default value for the enum. DO NOT USE."
                                                     "A user is mentioned."
                                                     "A slash command is invoked."],
                                  :enum ["ANNOTATION_TYPE_UNSPECIFIED"
                                         "USER_MENTION"
                                         "SLASH_COMMAND"],
                                  :type "string",
                                  :description "The type of this annotation."},
                           :slashCommand {:$ref "SlashCommandMetadata",
                                          :description "The metadata for a slash command."},
                           :length {:type "integer",
                                    :format "int32",
                                    :description "Length of the substring in the plain-text message body this annotation corresponds to."},
                           :userMention {:description "The metadata of user mention.",
                                         :$ref "UserMentionMetadata"}},
              :id "Annotation",
              :type "object"},
 :Color {:id "Color",
         :type "object",
         :properties {:blue {:format "float",
                             :type "number",
                             :description "The amount of blue in the color as a value in the interval [0, 1]."},
                      :alpha {:format "float",
                              :type "number",
                              :description "The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color = alpha * (this color) + (1.0 - alpha) * (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0)."},
                      :green {:format "float",
                              :description "The amount of green in the color as a value in the interval [0, 1].",
                              :type "number"},
                      :red {:description "The amount of red in the color as a value in the interval [0, 1].",
                            :format "float",
                            :type "number"}},
         :description "Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to/from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't carry information about the absolute color space that should be used to interpret the RGB value (e.g. sRGB, Adobe RGB, DCI-P3, BT.2020, etc.). By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most 1e-5. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ..."},
 :Button {:type "object",
          :properties {:textButton {:$ref "TextButton",
                                    :description "A button with text and onclick action."},
                       :imageButton {:description "A button with image and onclick action.",
                                     :$ref "ImageButton"}},
          :id "Button",
          :description "A button. Can be a text button or an image button."},
 :ListMembershipsResponse {:properties {:nextPageToken {:description "Continuation token to retrieve the next page of results. It will be empty for the last page of results.",
                                                        :type "string"},
                                        :memberships {:items {:$ref "Membership"},
                                                      :description "List of memberships in the requested (or first) page.",
                                                      :type "array"}},
                           :id "ListMembershipsResponse",
                           :type "object"},
 :OpenLink {:description "A link that opens a new window.",
            :properties {:url {:description "The URL to open.",
                               :type "string"}},
            :type "object",
            :id "OpenLink"}}
