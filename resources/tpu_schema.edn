{:Operation {:type "object",
             :id "Operation",
             :description "This resource represents a long-running operation that is the result of a network API call.",
             :properties {:name {:description "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                                 :type "string"},
                          :error {:description "The error result of the operation in case of failure or cancellation.",
                                  :$ref "Status"},
                          :response {:additionalProperties {:type "any",
                                                            :description "Properties of the object. Contains field @type with type URL."},
                                     :type "object",
                                     :description "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."},
                          :done {:description "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                                 :type "boolean"},
                          :metadata {:description "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                                     :additionalProperties {:type "any",
                                                            :description "Properties of the object. Contains field @type with type URL."},
                                     :type "object"}}},
 :AcceleratorType {:description "A accelerator type that a Node can be configured with.",
                   :properties {:type {:type "string",
                                       :description "the accelerator type."},
                                :name {:type "string",
                                       :description "The resource name."}},
                   :type "object",
                   :id "AcceleratorType"},
 :StopNodeRequest {:properties {},
                   :type "object",
                   :id "StopNodeRequest",
                   :description "Request for StopNode."},
 :ListNodesResponse {:description "Response for ListNodes.",
                     :properties {:nodes {:items {:$ref "Node"},
                                          :description "The listed nodes.",
                                          :type "array"},
                                  :nextPageToken {:description "The next page token or empty if none.",
                                                  :type "string"},
                                  :unreachable {:description "Locations that could not be reached.",
                                                :type "array",
                                                :items {:type "string"}}},
                     :id "ListNodesResponse",
                     :type "object"},
 :Symptom {:description "A Symptom instance.",
           :id "Symptom",
           :properties {:createTime {:description "Timestamp when the Symptom is created.",
                                     :type "string",
                                     :format "google-datetime"},
                        :details {:type "string",
                                  :description "Detailed information of the current Symptom."},
                        :symptomType {:description "Type of the Symptom.",
                                      :enum ["SYMPTOM_TYPE_UNSPECIFIED"
                                             "LOW_MEMORY"
                                             "OUT_OF_MEMORY"
                                             "EXECUTE_TIMED_OUT"
                                             "MESH_BUILD_FAIL"
                                             "HBM_OUT_OF_MEMORY"
                                             "PROJECT_ABUSE"],
                                      :type "string",
                                      :enumDescriptions ["Unspecified symptom."
                                                         "TPU VM memory is low."
                                                         "TPU runtime is out of memory."
                                                         "TPU runtime execution has timed out."
                                                         "TPU runtime fails to construct a mesh that recognizes each TPU device's neighbors."
                                                         "TPU HBM is out of memory."
                                                         "Abusive behaviors have been identified on the current project."]},
                        :workerId {:type "string",
                                   :description "A string used to uniquely distinguish a worker within a TPU node."}},
           :type "object"},
 :Empty {:properties {},
         :type "object",
         :description "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`.",
         :id "Empty"},
 :StartNodeRequest {:description "Request for StartNode.",
                    :id "StartNodeRequest",
                    :properties {},
                    :type "object"},
 :TensorFlowVersion {:description "A tensorflow version that a Node can be configured with.",
                     :type "object",
                     :properties {:name {:description "The resource name.",
                                         :type "string"},
                                  :version {:description "the tensorflow version.",
                                            :type "string"}},
                     :id "TensorFlowVersion"},
 :SchedulingConfig {:description "Sets the scheduling options for this node.",
                    :id "SchedulingConfig",
                    :properties {:reserved {:type "boolean",
                                            :description "Whether the node is created under a reservation."},
                                 :preemptible {:description "Defines whether the node is preemptible.",
                                               :type "boolean"}},
                    :type "object"},
 :ListLocationsResponse {:description "The response message for Locations.ListLocations.",
                         :properties {:nextPageToken {:type "string",
                                                      :description "The standard List next-page token."},
                                      :locations {:items {:$ref "Location"},
                                                  :description "A list of locations that matches the specified filter in the request.",
                                                  :type "array"}},
                         :id "ListLocationsResponse",
                         :type "object"},
 :ListTensorFlowVersionsResponse {:id "ListTensorFlowVersionsResponse",
                                  :description "Response for ListTensorFlowVersions.",
                                  :properties {:nextPageToken {:description "The next page token or empty if none.",
                                                               :type "string"},
                                               :tensorflowVersions {:items {:$ref "TensorFlowVersion"},
                                                                    :description "The listed nodes.",
                                                                    :type "array"},
                                               :unreachable {:description "Locations that could not be reached.",
                                                             :items {:type "string"},
                                                             :type "array"}},
                                  :type "object"},
 :Node {:id "Node",
        :description "A TPU instance.",
        :type "object",
        :properties {:description {:description "The user-supplied description of the TPU. Maximum of 512 characters.",
                                   :type "string"},
                     :serviceAccount {:description "Output only. The service account used to run the tensor flow services within the node. To share resources, including Google Cloud Storage data, with the Tensorflow job running in the Node, this account must have permissions to that data.",
                                      :type "string",
                                      :readOnly true},
                     :labels {:additionalProperties {:type "string"},
                              :type "object",
                              :description "Resource labels to represent user-provided metadata."},
                     :acceleratorType {:description "Required. The type of hardware accelerators associated with this node.",
                                       :type "string"},
                     :schedulingConfig {:$ref "SchedulingConfig",
                                        :description "The scheduling options for this node."},
                     :name {:description "Output only. Immutable. The name of the TPU",
                            :readOnly true,
                            :type "string"},
                     :symptoms {:readOnly true,
                                :type "array",
                                :items {:$ref "Symptom"},
                                :description "Output only. The Symptoms that have occurred to the TPU Node."},
                     :healthDescription {:description "Output only. If this field is populated, it contains a description of why the TPU Node is unhealthy.",
                                         :type "string",
                                         :readOnly true},
                     :createTime {:description "Output only. The time when the node was created.",
                                  :type "string",
                                  :format "google-datetime",
                                  :readOnly true},
                     :state {:enumDescriptions ["TPU node state is not known/set."
                                                "TPU node is being created."
                                                "TPU node has been created."
                                                "TPU node is restarting."
                                                "TPU node is undergoing reimaging."
                                                "TPU node is being deleted."
                                                "TPU node is being repaired and may be unusable. Details can be found in the `help_description` field."
                                                "TPU node is stopped."
                                                "TPU node is currently stopping."
                                                "TPU node is currently starting."
                                                "TPU node has been preempted. Only applies to Preemptible TPU Nodes."
                                                "TPU node has been terminated due to maintenance or has reached the end of its life cycle (for preemptible nodes)."
                                                "TPU node is currently hiding."
                                                "TPU node has been hidden."
                                                "TPU node is currently unhiding."],
                             :description "Output only. The current state for the TPU Node.",
                             :enum ["STATE_UNSPECIFIED"
                                    "CREATING"
                                    "READY"
                                    "RESTARTING"
                                    "REIMAGING"
                                    "DELETING"
                                    "REPAIRING"
                                    "STOPPED"
                                    "STOPPING"
                                    "STARTING"
                                    "PREEMPTED"
                                    "TERMINATED"
                                    "HIDING"
                                    "HIDDEN"
                                    "UNHIDING"],
                             :readOnly true,
                             :type "string"},
                     :port {:type "string",
                            :description "Output only. DEPRECATED! Use network_endpoints instead. The network port for the TPU Node as visible to Compute Engine instances."},
                     :useServiceNetworking {:type "boolean",
                                            :description "Whether the VPC peering for the node is set up through Service Networking API. The VPC Peering should be set up before provisioning the node. If this field is set, cidr_block field should not be specified. If the network, that you want to peer the TPU Node to, is Shared VPC networks, the node must be created with this this field enabled."},
                     :networkEndpoints {:description "Output only. The network endpoints where TPU workers can be accessed and sent work. It is recommended that Tensorflow clients of the node reach out to the 0th entry in this map first.",
                                        :items {:$ref "NetworkEndpoint"},
                                        :type "array",
                                        :readOnly true},
                     :health {:description "The health status of the TPU node.",
                              :type "string",
                              :enum ["HEALTH_UNSPECIFIED"
                                     "HEALTHY"
                                     "DEPRECATED_UNHEALTHY"
                                     "TIMEOUT"
                                     "UNHEALTHY_TENSORFLOW"
                                     "UNHEALTHY_MAINTENANCE"],
                              :enumDescriptions ["Health status is unknown: not initialized or failed to retrieve."
                                                 "The resource is healthy."
                                                 "The resource is unhealthy."
                                                 "The resource is unresponsive."
                                                 "The in-guest ML stack is unhealthy."
                                                 "The node is under maintenance/priority boost caused rescheduling and will resume running once rescheduled."]},
                     :apiVersion {:type "string",
                                  :enumDescriptions ["API version is unknown."
                                                     "TPU API V1Alpha1 version."
                                                     "TPU API V1 version."
                                                     "TPU API V2Alpha1 version."],
                                  :readOnly true,
                                  :enum ["API_VERSION_UNSPECIFIED"
                                         "V1_ALPHA1"
                                         "V1"
                                         "V2_ALPHA1"],
                                  :description "Output only. The API version that created this Node."},
                     :ipAddress {:description "Output only. DEPRECATED! Use network_endpoints instead. The network address for the TPU Node as visible to Compute Engine instances.",
                                 :type "string"},
                     :network {:type "string",
                               :description "The name of a network they wish to peer the TPU node to. It must be a preexisting Compute Engine network inside of the project on which this API has been activated. If none is provided, \"default\" will be used."},
                     :tensorflowVersion {:description "Required. The version of Tensorflow running in the Node.",
                                         :type "string"},
                     :cidrBlock {:type "string",
                                 :description "The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must be a /29 block; the Compute Engine networks API forbids a smaller block, and using a larger block would be wasteful (a node can only consume one IP address). Errors will occur if the CIDR block has already been used for a currently existing TPU node, the CIDR block conflicts with any subnetworks in the user's provided network, or the provided network is peered with another network that is using that CIDR block."}}},
 :ListAcceleratorTypesResponse {:type "object",
                                :properties {:unreachable {:description "Locations that could not be reached.",
                                                           :items {:type "string"},
                                                           :type "array"},
                                             :acceleratorTypes {:description "The listed nodes.",
                                                                :items {:$ref "AcceleratorType"},
                                                                :type "array"},
                                             :nextPageToken {:description "The next page token or empty if none.",
                                                             :type "string"}},
                                :id "ListAcceleratorTypesResponse",
                                :description "Response for ListAcceleratorTypes."},
 :OperationMetadata {:properties {:createTime {:readOnly true,
                                               :type "string",
                                               :format "google-datetime",
                                               :description "Output only. The time the operation was created."},
                                  :apiVersion {:description "Output only. API version used to start the operation.",
                                               :readOnly true,
                                               :type "string"},
                                  :verb {:readOnly true,
                                         :description "Output only. Name of the verb executed by the operation.",
                                         :type "string"},
                                  :endTime {:format "google-datetime",
                                            :readOnly true,
                                            :type "string",
                                            :description "Output only. The time the operation finished running."},
                                  :statusDetail {:description "Output only. Human-readable status of the operation, if any.",
                                                 :type "string",
                                                 :readOnly true},
                                  :cancelRequested {:type "boolean",
                                                    :readOnly true,
                                                    :description "Output only. Identifies whether the user has requested cancellation of the operation. Operations that have been cancelled successfully have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`."},
                                  :target {:readOnly true,
                                           :type "string",
                                           :description "Output only. Server-defined resource path for the target of the operation."}},
                     :id "OperationMetadata",
                     :type "object",
                     :description "Represents the metadata of the long-running operation."},
 :ListOperationsResponse {:description "The response message for Operations.ListOperations.",
                          :id "ListOperationsResponse",
                          :type "object",
                          :properties {:operations {:description "A list of operations that matches the specified filter in the request.",
                                                    :type "array",
                                                    :items {:$ref "Operation"}},
                                       :nextPageToken {:description "The standard List next-page token.",
                                                       :type "string"}}},
 :Location {:description "A resource that represents Google Cloud Platform location.",
            :properties {:metadata {:type "object",
                                    :additionalProperties {:description "Properties of the object. Contains field @type with type URL.",
                                                           :type "any"},
                                    :description "Service-specific metadata. For example the available capacity at the given location."},
                         :name {:type "string",
                                :description "Resource name for the location, which may vary between implementations. For example: `\"projects/example-project/locations/us-east1\"`"},
                         :displayName {:type "string",
                                       :description "The friendly name for this location, typically a nearby city name. For example, \"Tokyo\"."},
                         :labels {:type "object",
                                  :description "Cross-service attributes for the location. For example {\"cloud.googleapis.com/region\": \"us-east1\"}",
                                  :additionalProperties {:type "string"}},
                         :locationId {:type "string",
                                      :description "The canonical id for this location. For example: `\"us-east1\"`."}},
            :type "object",
            :id "Location"},
 :ReimageNodeRequest {:id "ReimageNodeRequest",
                      :description "Request for ReimageNode.",
                      :type "object",
                      :properties {:tensorflowVersion {:type "string",
                                                       :description "The version for reimage to create."}}},
 :NetworkEndpoint {:description "A network endpoint over which a TPU worker can be reached.",
                   :properties {:port {:type "integer",
                                       :format "int32",
                                       :description "The port of this network endpoint."},
                                :ipAddress {:description "The IP address of this network endpoint.",
                                            :type "string"}},
                   :id "NetworkEndpoint",
                   :type "object"},
 :Status {:id "Status",
          :description "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
          :properties {:code {:description "The status code, which should be an enum value of google.rpc.Code.",
                              :type "integer",
                              :format "int32"},
                       :details {:description "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                                 :type "array",
                                 :items {:type "object",
                                         :additionalProperties {:description "Properties of the object. Contains field @type with type URL.",
                                                                :type "any"}}},
                       :message {:description "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
                                 :type "string"}},
          :type "object"}}
