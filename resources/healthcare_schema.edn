{:DeidentifyDatasetRequest {:id "DeidentifyDatasetRequest",
                            :properties {:destinationDataset {:description "The name of the dataset resource to create and write the redacted data to. * The destination dataset must not exist. * The destination dataset must be in the same location as the source dataset. De-identifying data across multiple locations is not supported.",
                                                              :type "string"},
                                         :config {:$ref "DeidentifyConfig",
                                                  :description "Deidentify configuration."}},
                            :description "Redacts identifying information from the specified dataset.",
                            :type "object"},
 :ExportDicomDataRequest {:description "Exports data from the specified DICOM store. If a given resource, such as a DICOM object with the same SOPInstance UID, already exists in the output, it is overwritten with the version in the source dataset. Exported DICOM data persists when the DICOM store from which it was exported is deleted.",
                          :properties {:bigqueryDestination {:$ref "GoogleCloudHealthcareV1DicomBigQueryDestination",
                                                             :description "The BigQuery output destination. You can only export to a BigQuery dataset that's in the same project as the DICOM store you're exporting from. The Cloud Healthcare Service Agent requires two IAM roles on the BigQuery location: `roles/bigquery.dataEditor` and `roles/bigquery.jobUser`."},
                                       :gcsDestination {:$ref "GoogleCloudHealthcareV1DicomGcsDestination",
                                                        :description "The Cloud Storage output destination. The Cloud Healthcare Service Agent requires the `roles/storage.objectAdmin` Cloud IAM roles on the Cloud Storage location."}},
                          :id "ExportDicomDataRequest",
                          :type "object"},
 :IngestMessageResponse {:description "Acknowledges that a message has been ingested into the specified HL7v2 store.",
                         :type "object",
                         :properties {:hl7Ack {:type "string",
                                               :format "byte",
                                               :description "HL7v2 ACK message."},
                                      :message {:$ref "Message",
                                                :description "Created message resource."}},
                         :id "IngestMessageResponse"},
 :ArchiveUserDataMappingResponse {:id "ArchiveUserDataMappingResponse",
                                  :type "object",
                                  :properties {},
                                  :description "Archives the specified User data mapping."},
 :CharacterMaskConfig {:properties {:maskingCharacter {:description "Character to mask the sensitive values. If not supplied, defaults to \"*\".",
                                                       :type "string"}},
                       :description "Mask a string by replacing its characters with a fixed character.",
                       :id "CharacterMaskConfig",
                       :type "object"},
 :Signature {:properties {:userId {:type "string",
                                   :description "Required. User's UUID provided by the client."},
                          :image {:description "Optional. An image of the user's signature.",
                                  :$ref "Image"},
                          :signatureTime {:type "string",
                                          :format "google-datetime",
                                          :description "Optional. Timestamp of the signature."},
                          :metadata {:type "object",
                                     :additionalProperties {:type "string"},
                                     :description "Optional. Metadata associated with the user's signature. For example, the user's name or the user's title."}},
             :id "Signature",
             :description "User signature.",
             :type "object"},
 :NotificationConfig {:id "NotificationConfig",
                      :properties {:pubsubTopic {:description "The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that notifications of changes are published on. Supplied by the client. PubsubMessage.Data contains the resource name. PubsubMessage.MessageId is the ID of this message. It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message was published. Notifications are only sent if the topic is non-empty. [Topic names](https://cloud.google.com/pubsub/docs/overview#names) must be scoped to a project. Cloud Healthcare API service account must have publisher permissions on the given Pub/Sub topic. Not having adequate permissions causes the calls that send notifications to fail. If a notification can't be published to Pub/Sub, errors are logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)). If the number of errors exceeds a certain rate, some aren't submitted. Note that not all operations trigger notifications, see [Configuring Pub/Sub notifications](https://cloud.google.com/healthcare/docs/how-tos/pubsub) for specific details.",
                                                 :type "string"}},
                      :description "Specifies where to send notifications upon changes to a data store.",
                      :type "object"},
 :DicomFilterConfig {:properties {:resourcePathsGcsUri {:description "The Cloud Storage location of the filter configuration file. The `gcs_uri` must be in the format `gs://bucket/path/to/object`. The filter configuration file must contain a list of resource paths separated by newline characters (\\n or \\r\\n). Each resource path must be in the format \"/studies/{studyUID}[/series/{seriesUID}[/instances/{instanceUID}]]\" The Cloud Healthcare API service account must have the `roles/storage.objectViewer` Cloud IAM role for this Cloud Storage location.",
                                                        :type "string"}},
                     :id "DicomFilterConfig",
                     :description "Specifies the filter configuration for DICOM resources.",
                     :type "object"},
 :Resources {:type "object",
             :properties {:resources {:description "List of resources IDs. For example, \"Patient/1234\".",
                                      :type "array",
                                      :items {:type "string"}}},
             :id "Resources",
             :description "A list of FHIR resources."},
 :CryptoHashConfig {:properties {:cryptoKey {:type "string",
                                             :format "byte",
                                             :description "An AES 128/192/256 bit key. Causes the hash to be computed based on this key. A default key is generated for each Deidentify operation and is used wherever crypto_key is not specified."}},
                    :description "Pseudonymization method that generates surrogates via cryptographic hashing. Uses SHA-256. Outputs a base64-encoded representation of the hashed output (for example, `L7k0BHmF1ha5U3NfGykjro4xWi1MPVQPjhMAZbSV9mM=`).",
                    :id "CryptoHashConfig",
                    :type "object"},
 :IngestMessageRequest {:description "Ingests a message into the specified HL7v2 store.",
                        :properties {:message {:description "HL7v2 message to ingest.",
                                               :$ref "Message"}},
                        :type "object",
                        :id "IngestMessageRequest"},
 :ImportDicomDataResponse {:type "object",
                           :properties {},
                           :id "ImportDicomDataResponse",
                           :description "Returns additional information in regards to a completed DICOM store import."},
 :ListConsentsResponse {:properties {:nextPageToken {:type "string",
                                                     :description "Token to retrieve the next page of results, or empty if there are no more results in the list."},
                                     :consents {:type "array",
                                                :description "The returned Consents. The maximum number of Consents returned is determined by the value of page_size in the ListConsentsRequest.",
                                                :items {:$ref "Consent"}}},
                        :type "object",
                        :id "ListConsentsResponse"},
 :ImportResourcesResponse {:id "ImportResourcesResponse",
                           :properties {},
                           :description "Final response of importing resources. This structure is included in the response to describe the detailed outcome after the operation finishes successfully.",
                           :type "object"},
 :QueryAccessibleDataResponse {:type "object",
                               :properties {:gcsUris {:type "array",
                                                      :items {:type "string"},
                                                      :description "List of files, each of which contains a list of data_id(s) that are consented for a specified use in the request."}},
                               :description "Response for successful QueryAccessibleData operations. This structure is included in the response upon operation completion.",
                               :id "QueryAccessibleDataResponse"},
 :FhirFilter {:id "FhirFilter",
              :type "object",
              :description "Filter configuration.",
              :properties {:resources {:$ref "Resources",
                                       :description "List of resources to include in the output. If this list is empty or not specified, all resources are included in the output."}}},
 :Hl7V2NotificationConfig {:description "Specifies where and whether to send notifications upon changes to a data store.",
                           :type "object",
                           :properties {:pubsubTopic {:description "The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that notifications of changes are published on. Supplied by the client. The notification is a `PubsubMessage` with the following fields: * `PubsubMessage.Data` contains the resource name. * `PubsubMessage.MessageId` is the ID of this notification. It's guaranteed to be unique within the topic. * `PubsubMessage.PublishTime` is the time when the message was published. Note that notifications are only sent if the topic is non-empty. [Topic names](https://cloud.google.com/pubsub/docs/overview#names) must be scoped to a project. The Cloud Healthcare API service account, service-PROJECT_NUMBER@gcp-sa-healthcare.iam.gserviceaccount.com, must have publisher permissions on the given Pub/Sub topic. Not having adequate permissions causes the calls that send notifications to fail. If a notification cannot be published to Pub/Sub, errors are logged to Cloud Logging. For more information, see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).",
                                                      :type "string"},
                                        :filter {:description "Restricts notifications sent for messages matching a filter. If this is empty, all messages are matched. The following syntax is available: * A string field value can be written as text inside quotation marks, for example `\"query text\"`. The only valid relational operation for text fields is equality (`=`), where text is searched within the field, rather than having the field be equal to the text. For example, `\"Comment = great\"` returns messages with `great` in the comment field. * A number field value can be written as an integer, a decimal, or an exponential. The valid relational operators for number fields are the equality operator (`=`), along with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * A date field value must be written in `yyyy-mm-dd` form. Fields with date and time use the RFC3339 time format. Leading zeros are required for one-digit months and days. The valid relational operators for date fields are the equality operator (`=`) , along with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * Multiple field query expressions can be combined in one query by adding `AND` or `OR` operators between the expressions. If a boolean operator appears within a quoted string, it is not treated as special, it's just another part of the character string to be matched. You can prepend the `NOT` operator to an expression to negate it. The following fields and functions are available for filtering: * `message_type`, from the MSH-9.1 field. For example, `NOT message_type = \"ADT\"`. * `send_date` or `sendDate`, the YYYY-MM-DD date the message was sent in the dataset's time_zone, from the MSH-7 segment. For example, `send_date < \"2017-01-02\"`. * `send_time`, the timestamp when the message was sent, using the RFC3339 time format for comparisons, from the MSH-7 segment. For example, `send_time < \"2017-01-02T00:00:00-05:00\"`. * `create_time`, the timestamp when the message was created in the HL7v2 store. Use the RFC3339 time format for comparisons. For example, `create_time < \"2017-01-02T00:00:00-05:00\"`. * `send_facility`, the care center that the message came from, from the MSH-4 segment. For example, `send_facility = \"ABC\"`. * `PatientId(value, type)`, which matches if the message lists a patient having an ID of the given value and type in the PID-2, PID-3, or PID-4 segments. For example, `PatientId(\"123456\", \"MRN\")`. * `labels.x`, a string value of the label with key `x` as set using the Message.labels map. For example, `labels.\"priority\"=\"high\"`. The operator `:*` can be used to assert the existence of a label. For example, `labels.\"priority\":*`.",
                                                 :type "string"}},
                           :id "Hl7V2NotificationConfig"},
 :Message {:description "A complete HL7v2 message. See [Introduction to HL7 Standards] (https://www.hl7.org/implement/standards/index.cfm?ref=common) for details on the standard.",
           :id "Message",
           :properties {:labels {:additionalProperties {:type "string"},
                                 :type "object",
                                 :description "User-supplied key-value pairs used to organize HL7v2 stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \\p{Ll}\\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63} No more than 64 labels can be associated with a given store."},
                        :messageType {:description "The message type for this message. MSH-9.1.",
                                      :type "string"},
                        :sendTime {:format "google-datetime",
                                   :type "string",
                                   :description "The datetime the sending application sent this message. MSH-7."},
                        :name {:description "Resource name of the Message, of the form `projects/{project_id}/datasets/{dataset_id}/hl7V2Stores/{hl7_v2_store_id}/messages/{message_id}`. Assigned by the server.",
                               :type "string"},
                        :createTime {:type "string",
                                     :description "Output only. The datetime when the message was created. Set by the server.",
                                     :format "google-datetime",
                                     :readOnly true},
                        :parsedData {:readOnly true,
                                     :$ref "ParsedData",
                                     :description "Output only. The parsed version of the raw message data."},
                        :sendFacility {:description "The hospital that this message came from. MSH-4.",
                                       :type "string"},
                        :patientIds {:items {:$ref "PatientId"},
                                     :type "array",
                                     :description "All patient IDs listed in the PID-2, PID-3, and PID-4 segments of this message."},
                        :schematizedData {:$ref "SchematizedData",
                                          :description "The parsed version of the raw message data schematized according to this store's schemas and type definitions."},
                        :data {:format "byte",
                               :description "Raw message bytes.",
                               :type "string"}},
           :type "object"},
 :Image {:description "Raw bytes representing consent artifact content.",
         :id "Image",
         :type "object",
         :properties {:gcsUri {:description "Input only. Points to a Cloud Storage URI containing the consent artifact content. The URI must be in the following format: `gs://{bucket_id}/{object_id}`. The Cloud Healthcare API service account must have the `roles/storage.objectViewer` Cloud IAM role for this Cloud Storage location. The consent artifact content at this URI is copied to a Cloud Storage location managed by the Cloud Healthcare API. Responses to fetching requests return the consent artifact content in raw_bytes.",
                               :type "string"},
                      :rawBytes {:description "Consent artifact content represented as a stream of bytes. This field is populated when returned in GetConsentArtifact response, but not included in CreateConsentArtifact and ListConsentArtifact response.",
                                 :type "string",
                                 :format "byte"}}},
 :Operation {:id "Operation",
             :properties {:done {:type "boolean",
                                 :description "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."},
                          :name {:description "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                                 :type "string"},
                          :metadata {:description "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                                     :type "object",
                                     :additionalProperties {:description "Properties of the object. Contains field @type with type URL.",
                                                            :type "any"}},
                          :response {:description "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                                     :type "object",
                                     :additionalProperties {:type "any",
                                                            :description "Properties of the object. Contains field @type with type URL."}},
                          :error {:$ref "Status",
                                  :description "The error result of the operation in case of failure or cancellation."}},
             :type "object",
             :description "This resource represents a long-running operation that is the result of a network API call."},
 :ConsentArtifact {:properties {:userSignature {:description "Optional. User's signature.",
                                                :$ref "Signature"},
                                :metadata {:description "Optional. Metadata associated with the Consent artifact. For example, the consent locale or user agent version.",
                                           :type "object",
                                           :additionalProperties {:type "string"}},
                                :userId {:type "string",
                                         :description "Required. User's UUID provided by the client."},
                                :guardianSignature {:description "Optional. A signature from a guardian.",
                                                    :$ref "Signature"},
                                :consentContentVersion {:type "string",
                                                        :description "Optional. An string indicating the version of the consent information shown to the user."},
                                :consentContentScreenshots {:items {:$ref "Image"},
                                                            :type "array",
                                                            :description "Optional. Screenshots, PDFs, or other binary information documenting the user's consent."},
                                :witnessSignature {:$ref "Signature",
                                                   :description "Optional. A signature from a witness."},
                                :name {:description "Resource name of the Consent artifact, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}`. Cannot be changed after creation.",
                                       :type "string"}},
                   :type "object",
                   :description "Documentation of a user's consent.",
                   :id "ConsentArtifact"},
 :SetIamPolicyRequest {:type "object",
                       :description "Request message for `SetIamPolicy` method.",
                       :properties {:updateMask {:type "string",
                                                 :description "OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: \"bindings, etag\"`",
                                                 :format "google-fieldmask"},
                                    :policy {:$ref "Policy",
                                             :description "REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them."}},
                       :id "SetIamPolicyRequest"},
 :AuditConfig {:type "object",
               :properties {:service {:description "Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.",
                                      :type "string"},
                            :auditLogConfigs {:type "array",
                                              :description "The configuration for logging of each type of permission.",
                                              :items {:$ref "AuditLogConfig"}}},
               :description "Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { \"audit_configs\": [ { \"service\": \"allServices\", \"audit_log_configs\": [ { \"log_type\": \"DATA_READ\", \"exempted_members\": [ \"user:jose@example.com\" ] }, { \"log_type\": \"DATA_WRITE\" }, { \"log_type\": \"ADMIN_READ\" } ] }, { \"service\": \"sampleservice.googleapis.com\", \"audit_log_configs\": [ { \"log_type\": \"DATA_READ\" }, { \"log_type\": \"DATA_WRITE\", \"exempted_members\": [ \"user:aliya@example.com\" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.",
               :id "AuditConfig"},
 :RejectConsentRequest {:type "object",
                        :id "RejectConsentRequest",
                        :properties {:consentArtifact {:description "Optional. The resource name of the Consent artifact that contains documentation of the user's rejection of the draft Consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}`. If the draft Consent had a Consent artifact, this Consent artifact overwrites it.",
                                                       :type "string"}},
                        :description "Rejects the latest revision of the specified Consent by committing a new revision with `state` updated to `REJECTED`. If the latest revision of the given Consent is in the `REJECTED` state, no new revision is committed."},
 :GoogleCloudHealthcareV1ConsentGcsDestination {:id "GoogleCloudHealthcareV1ConsentGcsDestination",
                                                :description "The Cloud Storage location for export.",
                                                :type "object",
                                                :properties {:uriPrefix {:description "URI for a Cloud Storage directory where the server writes result files, in the format `gs://{bucket-id}/{path/to/destination/dir}`. If there is no trailing slash, the service appends one when composing the object path. The user is responsible for creating the Cloud Storage bucket and directory referenced in `uri_prefix`.",
                                                                         :type "string"}}},
 :DicomStore {:id "DicomStore",
              :description "Represents a DICOM store.",
              :type "object",
              :properties {:labels {:additionalProperties {:type "string"},
                                    :type "object",
                                    :description "User-supplied key-value pairs used to organize DICOM stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \\p{Ll}\\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63} No more than 64 labels can be associated with a given store."},
                           :name {:type "string",
                                  :description "Resource name of the DICOM store, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`."},
                           :notificationConfig {:$ref "NotificationConfig",
                                                :description "Notification destination for new DICOM instances. Supplied by the client."}}},
 :AuditLogConfig {:description "Provides the configuration for logging a type of permissions. Example: { \"audit_log_configs\": [ { \"log_type\": \"DATA_READ\", \"exempted_members\": [ \"user:jose@example.com\" ] }, { \"log_type\": \"DATA_WRITE\" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.",
                  :type "object",
                  :id "AuditLogConfig",
                  :properties {:exemptedMembers {:description "Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.",
                                                 :type "array",
                                                 :items {:type "string"}},
                               :logType {:description "The log type that this config enables.",
                                         :enumDescriptions ["Default case. Should never be this."
                                                            "Admin reads. Example: CloudIAM getIamPolicy"
                                                            "Data writes. Example: CloudSQL Users create"
                                                            "Data reads. Example: CloudSQL Users list"],
                                         :type "string",
                                         :enum ["LOG_TYPE_UNSPECIFIED"
                                                "ADMIN_READ"
                                                "DATA_WRITE"
                                                "DATA_READ"]}}},
 :ListUserDataMappingsResponse {:properties {:userDataMappings {:type "array",
                                                                :items {:$ref "UserDataMapping"},
                                                                :description "The returned User data mappings. The maximum number of User data mappings returned is determined by the value of page_size in the ListUserDataMappingsRequest."},
                                             :nextPageToken {:description "Token to retrieve the next page of results, or empty if there are no more results in the list.",
                                                             :type "string"}},
                                :id "ListUserDataMappingsResponse",
                                :type "object"},
 :DicomConfig {:type "object",
               :properties {:removeList {:description "List of tags to remove. Keep all other tags.",
                                         :$ref "TagFilterList"},
                            :filterProfile {:enumDescriptions ["No tag filtration profile provided. Same as KEEP_ALL_PROFILE."
                                                               "Keep only tags required to produce valid DICOM."
                                                               "Remove tags based on DICOM Standard's Attribute Confidentiality Basic Profile (DICOM Standard Edition 2018e) http://dicom.nema.org/medical/dicom/2018e/output/chtml/part15/chapter_E.html."
                                                               "Keep all tags."
                                                               "Inspects within tag contents and replaces sensitive text. The process can be configured using the TextConfig. Applies to all tags with the following Value Representation names: AE, LO, LT, PN, SH, ST, UC, UT, DA, DT, AS"],
                                            :description "Tag filtering profile that determines which tags to keep/remove.",
                                            :type "string",
                                            :enum ["TAG_FILTER_PROFILE_UNSPECIFIED"
                                                   "MINIMAL_KEEP_LIST_PROFILE"
                                                   "ATTRIBUTE_CONFIDENTIALITY_BASIC_PROFILE"
                                                   "KEEP_ALL_PROFILE"
                                                   "DEIDENTIFY_TAG_CONTENTS"]},
                            :skipIdRedaction {:type "boolean",
                                              :description "If true, skip replacing StudyInstanceUID, SeriesInstanceUID, SOPInstanceUID, and MediaStorageSOPInstanceUID and leave them untouched. The Cloud Healthcare API regenerates these UIDs by default based on the DICOM Standard's reasoning: \"Whilst these UIDs cannot be mapped directly to an individual out of context, given access to the original images, or to a database of the original images containing the UIDs, it would be possible to recover the individual's identity.\" http://dicom.nema.org/medical/dicom/current/output/chtml/part15/sect_E.3.9.html"},
                            :keepList {:description "List of tags to keep. Remove all other tags.",
                                       :$ref "TagFilterList"}},
               :description "Specifies the parameters needed for de-identification of DICOM stores.",
               :id "DicomConfig"},
 :Field {:type "object",
         :id "Field",
         :properties {:minOccurs {:type "integer",
                                  :format "int32",
                                  :description "The minimum number of times this field must be present/repeated."},
                      :name {:type "string",
                             :description "The name of the field. For example, \"PID-1\" or just \"1\"."},
                      :maxOccurs {:description "The maximum number of times this field can be repeated. 0 or -1 means unbounded.",
                                  :type "integer",
                                  :format "int32"},
                      :type {:description "The type of this field. A Type with this name must be defined in an Hl7TypesConfig.",
                             :type "string"},
                      :table {:description "The HL7v2 table this field refers to. For example, PID-15 (Patient's Primary Language) usually refers to table \"0296\".",
                              :type "string"}},
         :description "A (sub) field of a type."},
 :GoogleCloudHealthcareV1DeidentifyDeidentifyDicomStoreSummary {:description "Contains a summary of the DeidentifyDicomStore operation.",
                                                                :type "object",
                                                                :properties {},
                                                                :id "GoogleCloudHealthcareV1DeidentifyDeidentifyDicomStoreSummary"},
 :ConsentList {:type "object",
               :properties {:consents {:description "The resource names of the Consents to evaluate against, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}`.",
                                       :type "array",
                                       :items {:type "string"}}},
               :id "ConsentList",
               :description "List of resource names of Consent resources."},
 :FhirConfig {:properties {:fieldMetadataList {:type "array",
                                               :items {:$ref "FieldMetadata"},
                                               :description "Specifies FHIR paths to match and how to transform them. Any field that is not matched by a FieldMetadata is passed through to the output dataset unmodified. All extensions are removed in the output."}},
              :description "Specifies how to handle de-identification of a FHIR store.",
              :type "object",
              :id "FhirConfig"},
 :CancelOperationRequest {:description "The request message for Operations.CancelOperation.",
                          :id "CancelOperationRequest",
                          :type "object",
                          :properties {}},
 :ListFhirStoresResponse {:id "ListFhirStoresResponse",
                          :type "object",
                          :properties {:fhirStores {:description "The returned FHIR stores. Won't be more FHIR stores than the value of page_size in the request.",
                                                    :items {:$ref "FhirStore"},
                                                    :type "array"},
                                       :nextPageToken {:type "string",
                                                       :description "Token to retrieve the next page of results or empty if there are no more results in the list."}},
                          :description "Lists the FHIR stores in the given dataset."},
 :Hl7V2Store {:id "Hl7V2Store",
              :description "Represents an HL7v2 store.",
              :type "object",
              :properties {:name {:type "string",
                                  :description "Resource name of the HL7v2 store, of the form `projects/{project_id}/datasets/{dataset_id}/hl7V2Stores/{hl7v2_store_id}`."},
                           :labels {:additionalProperties {:type "string"},
                                    :description "User-supplied key-value pairs used to organize HL7v2 stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \\p{Ll}\\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.",
                                    :type "object"},
                           :rejectDuplicateMessage {:type "boolean",
                                                    :description "Determines whether to reject duplicate messages. A duplicate message is a message with the same raw bytes as a message that has already been ingested/created in this HL7v2 store. The default value is false, meaning that the store accepts the duplicate messages and it also returns the same ACK message in the IngestMessageResponse as has been returned previously. Note that only one resource is created in the store. When this field is set to true, CreateMessage/IngestMessage requests with a duplicate message will be rejected by the store, and IngestMessageErrorDetail returns a NACK message upon rejection."},
                           :parserConfig {:description "The configuration for the parser. It determines how the server parses the messages.",
                                          :$ref "ParserConfig"},
                           :notificationConfigs {:description "A list of notification configs. Each configuration uses a filter to determine whether to publish a message (both Ingest & Create) on the corresponding notification destination. Only the message name is sent as part of the notification. Supplied by the client.",
                                                 :type "array",
                                                 :items {:$ref "Hl7V2NotificationConfig"}}}},
 :UserDataMapping {:type "object",
                   :description "Maps a resource to the associated user and Attributes.",
                   :properties {:name {:type "string",
                                       :description "Resource name of the User data mapping, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/userDataMappings/{user_data_mapping_id}`."},
                                :dataId {:type "string",
                                         :description "Required. A unique identifier for the mapped resource."},
                                :userId {:type "string",
                                         :description "Required. User's UUID provided by the client."},
                                :archiveTime {:type "string",
                                              :description "Output only. Indicates the time when this mapping was archived.",
                                              :format "google-datetime",
                                              :readOnly true},
                                :archived {:description "Output only. Indicates whether this mapping is archived.",
                                           :type "boolean",
                                           :readOnly true},
                                :resourceAttributes {:type "array",
                                                     :items {:$ref "Attribute"},
                                                     :description "Attributes of the resource. Only explicitly set attributes are displayed here. Attribute definitions with defaults set implicitly apply to these User data mappings. Attributes listed here must be single valued, that is, exactly one value is specified for the field \"values\" in each Attribute."}},
                   :id "UserDataMapping"},
 :Result {:type "object",
          :id "Result",
          :description "The consent evaluation result for a single `data_id`.",
          :properties {:consentDetails {:type "object",
                                        :description "The resource names of all evaluated Consents mapped to their evaluation.",
                                        :additionalProperties {:$ref "ConsentEvaluation"}},
                       :consented {:type "boolean",
                                   :description "Whether the resource is consented for the given use."},
                       :dataId {:type "string",
                                :description "The unique identifier of the evaluated resource."}}},
 :ImportResourcesRequest {:type "object",
                          :description "Request to import resources.",
                          :id "ImportResourcesRequest",
                          :properties {:gcsSource {:description "Cloud Storage source data location and import configuration. The Healthcare Service Agent account requires the `roles/storage.objectAdmin` role on the Cloud Storage location. Each Cloud Storage object should be a text file that contains the format specified in ContentStructure.",
                                                   :$ref "GoogleCloudHealthcareV1FhirGcsSource"},
                                       :contentStructure {:enum ["CONTENT_STRUCTURE_UNSPECIFIED"
                                                                 "BUNDLE"
                                                                 "RESOURCE"
                                                                 "BUNDLE_PRETTY"
                                                                 "RESOURCE_PRETTY"],
                                                          :description "The content structure in the source location. If not specified, the server treats the input source files as BUNDLE.",
                                                          :type "string",
                                                          :enumDescriptions ["If the content structure is not specified, the default value `BUNDLE` is used."
                                                                             "The source file contains one or more lines of newline-delimited JSON (ndjson). Each line is a bundle that contains one or more resources."
                                                                             "The source file contains one or more lines of newline-delimited JSON (ndjson). Each line is a single resource."
                                                                             "The entire file is one JSON bundle. The JSON can span multiple lines."
                                                                             "The entire file is one JSON resource. The JSON can span multiple lines."]}}},
 :ListConsentArtifactsResponse {:id "ListConsentArtifactsResponse",
                                :type "object",
                                :properties {:nextPageToken {:type "string",
                                                             :description "Token to retrieve the next page of results, or empty if there are no more results in the list."},
                                             :consentArtifacts {:description "The returned Consent artifacts. The maximum number of artifacts returned is determined by the value of page_size in the ListConsentArtifactsRequest.",
                                                                :type "array",
                                                                :items {:$ref "ConsentArtifact"}}}},
 :Hl7SchemaConfig {:id "Hl7SchemaConfig",
                   :type "object",
                   :description "Root config message for HL7v2 schema. This contains a schema structure of groups and segments, and filters that determine which messages to apply the schema structure to.",
                   :properties {:messageSchemaConfigs {:type "object",
                                                       :description "Map from each HL7v2 message type and trigger event pair, such as ADT_A04, to its schema configuration root group.",
                                                       :additionalProperties {:$ref "SchemaGroup"}},
                                :version {:type "array",
                                          :description "Each VersionSource is tested and only if they all match is the schema used for the message.",
                                          :items {:$ref "VersionSource"}}}},
 :StreamConfig {:description "Contains configuration for streaming FHIR export.",
                :id "StreamConfig",
                :type "object",
                :properties {:resourceTypes {:type "array",
                                             :description "Supply a FHIR resource type (such as \"Patient\" or \"Observation\"). See https://www.hl7.org/fhir/valueset-resource-types.html for a list of all FHIR resource types. The server treats an empty list as an intent to stream all the supported resource types in this FHIR store.",
                                             :items {:type "string"}},
                             :bigqueryDestination {:description "The destination BigQuery structure that contains both the dataset location and corresponding schema config. The output is organized in one table per resource type. The server reuses the existing tables (if any) that are named after the resource types. For example, \"Patient\", \"Observation\". When there is no existing table for a given resource type, the server attempts to create one. When a table schema doesn't align with the schema config, either because of existing incompatible schema or out of band incompatible modification, the server does not stream in new data. BigQuery imposes a 1 MB limit on streaming insert row size, therefore any resource mutation that generates more than 1 MB of BigQuery data is not streamed. One resolution in this case is to delete the incompatible table and let the server recreate one, though the newly created table only contains data after the table recreation. Results are appended to the corresponding BigQuery tables. Different versions of the same resource are distinguishable by the meta.versionId and meta.lastUpdated columns. The operation (CREATE/UPDATE/DELETE) that results in the new version is recorded in the meta.tag. The tables contain all historical resource versions since streaming was enabled. For query convenience, the server also creates one view per table of the same name containing only the current resource version. The streamed data in the BigQuery dataset is not guaranteed to be completely unique. The combination of the id and meta.versionId columns should ideally identify a single unique row. But in rare cases, duplicates may exist. At query time, users may use the SQL select statement to keep only one of the duplicate rows given an id and meta.versionId pair. Alternatively, the server created view mentioned above also filters out duplicates. If a resource mutation cannot be streamed to BigQuery, errors are logged to Cloud Logging. For more information, see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).",
                                                   :$ref "GoogleCloudHealthcareV1FhirBigQueryDestination"}}},
 :ExportResourcesRequest {:id "ExportResourcesRequest",
                          :description "Request to export resources.",
                          :properties {:bigqueryDestination {:description "The BigQuery output destination. The Cloud Healthcare Service Agent requires two IAM roles on the BigQuery location: `roles/bigquery.dataEditor` and `roles/bigquery.jobUser`. The output is one BigQuery table per resource type.",
                                                             :$ref "GoogleCloudHealthcareV1FhirBigQueryDestination"},
                                       :gcsDestination {:$ref "GoogleCloudHealthcareV1FhirGcsDestination",
                                                        :description "The Cloud Storage output destination. The Healthcare Service Agent account requires the `roles/storage.objectAdmin` role on the Cloud Storage location. The exported outputs are organized by FHIR resource types. The server creates one object per resource type. Each object contains newline delimited JSON, and each line is a FHIR resource."}},
                          :type "object"},
 :GoogleCloudHealthcareV1ConsentPolicy {:description "Represents a user's consent in terms of the resources that can be accessed and under what conditions.",
                                        :id "GoogleCloudHealthcareV1ConsentPolicy",
                                        :properties {:resourceAttributes {:type "array",
                                                                          :items {:$ref "Attribute"},
                                                                          :description "The resources that this policy applies to. A resource is a match if it matches all the attributes listed here. If empty, this policy applies to all User data mappings for the given user."},
                                                     :authorizationRule {:$ref "Expr",
                                                                         :description "Required. The request conditions to meet to grant access. In addition to any supported comparison operators, authorization rules may have `IN` operator as well as at most 10 logical operators that are limited to `AND` (`&&`), `OR` (`||`)."}},
                                        :type "object"},
 :DeidentifyFhirStoreRequest {:properties {:resourceFilter {:description "A filter specifying the resources to include in the output. If not specified, all resources are included in the output.",
                                                            :$ref "FhirFilter"},
                                           :config {:description "Deidentify configuration.",
                                                    :$ref "DeidentifyConfig"},
                                           :destinationStore {:type "string",
                                                              :description "The name of the FHIR store to create and write the redacted data to. For example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`. * The destination dataset must exist. * The source dataset and destination dataset must both reside in the same location. De-identifying data across multiple locations is not supported. * The destination FHIR store must exist. * The caller must have the healthcare.fhirResources.update permission to write to the destination FHIR store."}},
                              :description "Creates a new FHIR store with sensitive information de-identified.",
                              :type "object",
                              :id "DeidentifyFhirStoreRequest"},
 :ExportResourcesResponse {:id "ExportResourcesResponse",
                           :properties {},
                           :description "Response when all resources export successfully. This structure is included in the response to describe the detailed outcome after the operation finishes successfully.",
                           :type "object"},
 :ListDicomStoresResponse {:type "object",
                           :properties {:nextPageToken {:description "Token to retrieve the next page of results or empty if there are no more results in the list.",
                                                        :type "string"},
                                        :dicomStores {:description "The returned DICOM stores. Won't be more DICOM stores than the value of page_size in the request.",
                                                      :items {:$ref "DicomStore"},
                                                      :type "array"}},
                           :id "ListDicomStoresResponse",
                           :description "Lists the DICOM stores in the given dataset."},
 :Binding {:type "object",
           :id "Binding",
           :properties {:role {:type "string",
                               :description "Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`."},
                        :condition {:$ref "Expr",
                                    :description "The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."},
                        :members {:type "array",
                                  :items {:type "string"},
                                  :description "Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. "}},
           :description "Associates `members` with a `role`."},
 :Hl7TypesConfig {:description "Root config for HL7v2 datatype definitions for a specific HL7v2 version.",
                  :type "object",
                  :properties {:type {:type "array",
                                      :description "The HL7v2 type definitions.",
                                      :items {:$ref "Type"}},
                               :version {:description "The version selectors that this config applies to. A message must match ALL version sources to apply.",
                                         :type "array",
                                         :items {:$ref "VersionSource"}}},
                  :id "Hl7TypesConfig"},
 :ArchiveUserDataMappingRequest {:type "object",
                                 :properties {},
                                 :id "ArchiveUserDataMappingRequest",
                                 :description "Archives the specified User data mapping."},
 :SearchResourcesRequest {:properties {:resourceType {:type "string",
                                                      :description "The FHIR resource type to search, such as Patient or Observation. For a complete list, see the FHIR Resource Index ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/resourcelist.html), [STU3](http://hl7.org/implement/standards/fhir/STU3/resourcelist.html), [R4](http://hl7.org/implement/standards/fhir/R4/resourcelist.html))."}},
                          :id "SearchResourcesRequest",
                          :type "object",
                          :description "Request to search the resources in the specified FHIR store."},
 :ListMessagesResponse {:description "Lists the messages in the specified HL7v2 store.",
                        :id "ListMessagesResponse",
                        :properties {:hl7V2Messages {:items {:$ref "Message"},
                                                     :type "array",
                                                     :description "The returned Messages. Won't be more Messages than the value of page_size in the request. See view for populated fields."},
                                     :nextPageToken {:type "string",
                                                     :description "Token to retrieve the next page of results or empty if there are no more results in the list."}},
                        :type "object"},
 :RedactConfig {:description "Define how to redact sensitive values. Default behaviour is erase. For example, \"My name is Jane.\" becomes \"My name is .\"",
                :type "object",
                :id "RedactConfig",
                :properties {}},
 :EvaluateUserConsentsRequest {:type "object",
                               :description "Evaluate a user's Consents for all matching User data mappings. Note: User data mappings are indexed asynchronously, causing slight delays between the time mappings are created or updated and when they are included in EvaluateUserConsents results.",
                               :properties {:requestAttributes {:description "Required. The values of request attributes associated with this access request.",
                                                                :type "object",
                                                                :additionalProperties {:type "string"}},
                                            :consentList {:$ref "ConsentList",
                                                          :description "Optional. Specific Consents to evaluate the access request against. These Consents must have the same `user_id` as the User data mappings being evalauted, must exist in the current `consent_store`, and must have a `state` of either `ACTIVE` or `DRAFT`. A maximum of 100 Consents can be provided here. If unspecified, all `ACTIVE` unexpired Consents in the current `consent_store` will be evaluated."},
                                            :pageToken {:description "Optional. Token to retrieve the next page of results, or empty to get the first page.",
                                                        :type "string"},
                                            :responseView {:enum ["RESPONSE_VIEW_UNSPECIFIED"
                                                                  "BASIC"
                                                                  "FULL"],
                                                           :type "string",
                                                           :enumDescriptions ["No response view specified. The API will default to the BASIC view."
                                                                              "Only the `data_id` and `consented` fields are populated in the response."
                                                                              "All fields within the response are populated. When set to `FULL`, all `ACTIVE` Consents are evaluated even if a matching policy is found during evaluation."],
                                                           :description "Optional. The view for EvaluateUserConsentsResponse. If unspecified, defaults to `BASIC` and returns `consented` as `TRUE` or `FALSE`."},
                                            :userId {:type "string",
                                                     :description "Required. User ID to evaluate consents for."},
                                            :resourceAttributes {:additionalProperties {:type "string"},
                                                                 :description "Optional. The values of resource attributes associated with the resources being requested. If no values are specified, then all resources are queried.",
                                                                 :type "object"},
                                            :pageSize {:type "integer",
                                                       :description "Optional. Limit on the number of User data mappings to return in a single response. If not specified, 100 is used. May not be larger than 1000.",
                                                       :format "int32"}},
                               :id "EvaluateUserConsentsRequest"},
 :Empty {:description "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`.",
         :id "Empty",
         :type "object",
         :properties {}},
 :PatientId {:properties {:value {:type "string",
                                  :description "The patient's unique identifier."},
                          :type {:description "ID type. For example, MRN or NHS.",
                                 :type "string"}},
             :id "PatientId",
             :description "A patient identifier and associated type.",
             :type "object"},
 :ParsedData {:id "ParsedData",
              :properties {:segments {:type "array",
                                      :items {:$ref "Segment"}}},
              :description "The content of a HL7v2 message in a structured format.",
              :type "object"},
 :ListDatasetsResponse {:id "ListDatasetsResponse",
                        :properties {:nextPageToken {:description "Token to retrieve the next page of results, or empty if there are no more results in the list.",
                                                     :type "string"},
                                     :datasets {:description "The first page of datasets.",
                                                :type "array",
                                                :items {:$ref "Dataset"}}},
                        :description "Lists the available datasets.",
                        :type "object"},
 :GoogleCloudHealthcareV1DicomGcsSource {:description "Specifies the configuration for importing data from Cloud Storage.",
                                         :properties {:uri {:type "string",
                                                            :description "Points to a Cloud Storage URI containing file(s) with content only. The URI must be in the following format: `gs://{bucket_id}/{object_id}`. The URI can include wildcards in `object_id` and thus identify multiple files. Supported wildcards: * '*' to match 0 or more non-separator characters * '**' to match 0 or more characters (including separators). Must be used at the end of a path and with no other wildcards in the path. Can also be used with a file extension (such as .dcm), which imports all files with the extension in the specified directory and its sub-directories. For example, `gs://my-bucket/my-directory/**.dcm` imports all files with .dcm extensions in `my-directory/` and its sub-directories. * '?' to match 1 character. All other URI formats are invalid. Files matching the wildcard are expected to contain content only, no metadata."}},
                                         :id "GoogleCloudHealthcareV1DicomGcsSource",
                                         :type "object"},
 :ParserConfig {:id "ParserConfig",
                :properties {:allowNullHeader {:description "Determines whether messages with no header are allowed.",
                                               :type "boolean"},
                             :segmentTerminator {:description "Byte(s) to use as the segment terminator. If this is unset, '\\r' is used as segment terminator, matching the HL7 version 2 specification.",
                                                 :type "string",
                                                 :format "byte"},
                             :schema {:description "Schemas used to parse messages in this store, if schematized parsing is desired.",
                                      :$ref "SchemaPackage"}},
                :type "object",
                :description "The configuration for the parser. It determines how the server parses the messages."},
 :ListLocationsResponse {:description "The response message for Locations.ListLocations.",
                         :type "object",
                         :id "ListLocationsResponse",
                         :properties {:nextPageToken {:type "string",
                                                      :description "The standard List next-page token."},
                                      :locations {:items {:$ref "Location"},
                                                  :type "array",
                                                  :description "A list of locations that matches the specified filter in the request."}}},
 :GoogleCloudHealthcareV1DeidentifyDeidentifyFhirStoreSummary {:id "GoogleCloudHealthcareV1DeidentifyDeidentifyFhirStoreSummary",
                                                               :type "object",
                                                               :description "Contains a summary of the DeidentifyFhirStore operation.",
                                                               :properties {}},
 :ListAttributeDefinitionsResponse {:id "ListAttributeDefinitionsResponse",
                                    :type "object",
                                    :properties {:nextPageToken {:description "Token to retrieve the next page of results, or empty if there are no more results in the list.",
                                                                 :type "string"},
                                                 :attributeDefinitions {:items {:$ref "AttributeDefinition"},
                                                                        :description "The returned Attribute definitions. The maximum number of attributes returned is determined by the value of page_size in the ListAttributeDefinitionsRequest.",
                                                                        :type "array"}}},
 :ListHl7V2StoresResponse {:type "object",
                           :properties {:nextPageToken {:description "Token to retrieve the next page of results or empty if there are no more results in the list.",
                                                        :type "string"},
                                        :hl7V2Stores {:items {:$ref "Hl7V2Store"},
                                                      :description "The returned HL7v2 stores. Won't be more HL7v2 stores than the value of page_size in the request.",
                                                      :type "array"}},
                           :description "Lists the HL7v2 stores in the given dataset.",
                           :id "ListHl7V2StoresResponse"},
 :SchematizedData {:id "SchematizedData",
                   :type "object",
                   :description "The content of an HL7v2 message in a structured format as specified by a schema.",
                   :properties {:data {:type "string",
                                       :description "JSON output of the parser."},
                                :error {:type "string",
                                        :description "The error output of the parser."}}},
 :FhirStore {:id "FhirStore",
             :description "Represents a FHIR store.",
             :properties {:labels {:type "object",
                                   :additionalProperties {:type "string"},
                                   :description "User-supplied key-value pairs used to organize FHIR stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \\p{Ll}\\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63} No more than 64 labels can be associated with a given store."},
                          :streamConfigs {:items {:$ref "StreamConfig"},
                                          :description "A list of streaming configs that configure the destinations of streaming export for every resource mutation in this FHIR store. Each store is allowed to have up to 10 streaming configs. After a new config is added, the next resource mutation is streamed to the new location in addition to the existing ones. When a location is removed from the list, the server stops streaming to that location. Before adding a new config, you must add the required [`bigquery.dataEditor`](https://cloud.google.com/bigquery/docs/access-control#bigquery.dataEditor) role to your project's **Cloud Healthcare Service Agent** [service account](https://cloud.google.com/iam/docs/service-accounts). Some lag (typically on the order of dozens of seconds) is expected before the results show up in the streaming destination.",
                                          :type "array"},
                          :name {:description "Output only. Resource name of the FHIR store, of the form `projects/{project_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.",
                                 :type "string"},
                          :enableUpdateCreate {:description "Whether this FHIR store has the [updateCreate capability](https://www.hl7.org/fhir/capabilitystatement-definitions.html#CapabilityStatement.rest.resource.updateCreate). This determines if the client can use an Update operation to create a new resource with a client-specified ID. If false, all IDs are server-assigned through the Create operation and attempts to update a non-existent resource return errors. It is strongly advised not to include or encode any sensitive data such as patient identifiers in client-specified resource IDs. Those IDs are part of the FHIR resource path recorded in Cloud audit logs and Pub/Sub notifications. Those IDs can also be contained in reference fields within other resources.",
                                               :type "boolean"},
                          :notificationConfig {:description "If non-empty, publish all resource modifications of this FHIR store to this destination. The Pub/Sub message attributes contain a map with a string describing the action that has triggered the notification. For example, \"action\":\"CreateResource\".",
                                               :$ref "NotificationConfig"},
                          :defaultSearchHandlingStrict {:type "boolean",
                                                        :description "If true, overrides the default search behavior for this FHIR store to `handling=strict` which returns an error for unrecognized search parameters. If false, uses the FHIR specification default `handling=lenient` which ignores unrecognized search parameters. The handling can always be changed from the default on an individual API call by setting the HTTP header `Prefer: handling=strict` or `Prefer: handling=lenient`."},
                          :disableResourceVersioning {:type "boolean",
                                                      :description "Immutable. Whether to disable resource versioning for this FHIR store. This field can not be changed after the creation of FHIR store. If set to false, which is the default behavior, all write operations cause historical versions to be recorded automatically. The historical versions can be fetched through the history APIs, but cannot be updated. If set to true, no historical versions are kept. The server sends errors for attempts to read the historical versions."},
                          :disableReferentialIntegrity {:type "boolean",
                                                        :description "Immutable. Whether to disable referential integrity in this FHIR store. This field is immutable after FHIR store creation. The default value is false, meaning that the API enforces referential integrity and fails the requests that result in inconsistent state in the FHIR store. When this field is set to true, the API skips referential integrity checks. Consequently, operations that rely on references, such as GetPatientEverything, do not return all the results if broken references exist."},
                          :version {:enum ["VERSION_UNSPECIFIED"
                                           "DSTU2"
                                           "STU3"
                                           "R4"],
                                    :type "string",
                                    :enumDescriptions ["Users must specify a version on store creation or an error is returned."
                                                       "Draft Standard for Trial Use, [Release 2](https://www.hl7.org/fhir/DSTU2)"
                                                       "Standard for Trial Use, [Release 3](https://www.hl7.org/fhir/STU3)"
                                                       "[Release 4](https://www.hl7.org/fhir/R4)"],
                                    :description "Immutable. The FHIR specification version that this FHIR store supports natively. This field is immutable after store creation. Requests are rejected if they contain FHIR resources of a different version. Version is required for every FHIR store."}},
             :type "object"},
 :TestIamPermissionsRequest {:properties {:permissions {:description "The set of permissions to check for the `resource`. Permissions with wildcards (such as '*' or 'storage.*') are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).",
                                                        :type "array",
                                                        :items {:type "string"}}},
                             :description "Request message for `TestIamPermissions` method.",
                             :id "TestIamPermissionsRequest",
                             :type "object"},
 :GoogleCloudHealthcareV1FhirBigQueryDestination {:description "The configuration for exporting to BigQuery.",
                                                  :id "GoogleCloudHealthcareV1FhirBigQueryDestination",
                                                  :properties {:datasetUri {:description "BigQuery URI to an existing dataset, up to 2000 characters long, in the format `bq://projectId.bqDatasetId`.",
                                                                            :type "string"},
                                                               :force {:type "boolean",
                                                                       :description "If this flag is `TRUE`, all tables are deleted from the dataset before the new exported tables are written. If the flag is not set and the destination dataset contains tables, the export call returns an error. If `write_disposition` is specified, this parameter is ignored. force=false is equivalent to write_disposition=WRITE_EMPTY and force=true is equivalent to write_disposition=WRITE_TRUNCATE."},
                                                               :writeDisposition {:enum ["WRITE_DISPOSITION_UNSPECIFIED"
                                                                                         "WRITE_EMPTY"
                                                                                         "WRITE_TRUNCATE"
                                                                                         "WRITE_APPEND"],
                                                                                  :description "Determines if existing data in the destination dataset is overwritten, appended to, or not written if the tables contain data. If a write_disposition is specified, the `force` parameter is ignored.",
                                                                                  :type "string",
                                                                                  :enumDescriptions ["Default behavior is the same as WRITE_EMPTY."
                                                                                                     "Only export data if the destination tables are empty."
                                                                                                     "Erase all existing data in the tables before writing the instances."
                                                                                                     "Append data to the existing tables."]},
                                                               :schemaConfig {:$ref "SchemaConfig",
                                                                              :description "The configuration for the exported BigQuery schema."}},
                                                  :type "object"},
 :HttpBody {:id "HttpBody",
            :type "object",
            :properties {:data {:type "string",
                                :format "byte",
                                :description "The HTTP request/response body as raw binary."},
                         :contentType {:description "The HTTP Content-Type header value specifying the content type of the body.",
                                       :type "string"},
                         :extensions {:type "array",
                                      :description "Application specific response metadata. Must be set in the first response for streaming APIs.",
                                      :items {:type "object",
                                              :additionalProperties {:description "Properties of the object. Contains field @type with type URL.",
                                                                     :type "any"}}}},
            :description "Message that represents an arbitrary HTTP body. It should only be used for payload formats that can't be represented as JSON, such as raw binary or an HTML page. This message can be used both in streaming and non-streaming API methods in the request as well as the response. It can be used as a top-level request field, which is convenient if one wants to extract parameters from either the URL or HTTP template into the request fields and also want access to the raw HTTP body. Example: message GetResourceRequest { // A unique request id. string request_id = 1; // The raw HTTP body is bound to this field. google.api.HttpBody http_body = 2; } service ResourceService { rpc GetResource(GetResourceRequest) returns (google.api.HttpBody); rpc UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty); } Example with streaming methods: service CaldavService { rpc GetCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); rpc UpdateCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); } Use of this type only changes how the request and response bodies are handled, all other features will continue to work unchanged."},
 :DeidentifyConfig {:id "DeidentifyConfig",
                    :description "Configures de-id options specific to different types of content. Each submessage customizes the handling of an https://tools.ietf.org/html/rfc6838 media type or subtype. Configs are applied in a nested manner at runtime.",
                    :type "object",
                    :properties {:image {:$ref "ImageConfig",
                                         :description "Configures de-identification of image pixels wherever they are found in the source_dataset."},
                                 :dicom {:$ref "DicomConfig",
                                         :description "Configures de-id of application/DICOM content."},
                                 :text {:$ref "TextConfig",
                                        :description "Configures de-identification of text wherever it is found in the source_dataset."},
                                 :fhir {:description "Configures de-id of application/FHIR content.",
                                        :$ref "FhirConfig"}}},
 :GoogleCloudHealthcareV1FhirGcsDestination {:id "GoogleCloudHealthcareV1FhirGcsDestination",
                                             :description "The configuration for exporting to Cloud Storage.",
                                             :type "object",
                                             :properties {:uriPrefix {:description "URI for a Cloud Storage directory where result files should be written, in the format of `gs://{bucket-id}/{path/to/destination/dir}`. If there is no trailing slash, the service appends one when composing the object path. The user is responsible for creating the Cloud Storage bucket referenced in `uri_prefix`.",
                                                                      :type "string"}}},
 :SchemaPackage {:properties {:types {:type "array",
                                      :items {:$ref "Hl7TypesConfig"},
                                      :description "Schema type definitions that are layered based on their VersionSources that match the incoming message. Type definitions present in higher indices override those in lower indices with the same type name if their VersionSources all match an incoming message."},
                              :ignoreMinOccurs {:type "boolean",
                                                :description "Flag to ignore all min_occurs restrictions in the schema. This means that incoming messages can omit any group, segment, field, component, or subcomponent."},
                              :schematizedParsingType {:enumDescriptions ["Unspecified schematized parsing type, equivalent to `SOFT_FAIL`."
                                                                          "Messages that fail to parse are still stored and ACKed but a parser error is stored in place of the schematized data."
                                                                          "Messages that fail to parse are rejected from ingestion/insertion and return an error code."],
                                                       :description "Determines how messages that fail to parse are handled.",
                                                       :type "string",
                                                       :enum ["SCHEMATIZED_PARSING_TYPE_UNSPECIFIED"
                                                              "SOFT_FAIL"
                                                              "HARD_FAIL"]},
                              :schemas {:type "array",
                                        :items {:$ref "Hl7SchemaConfig"},
                                        :description "Schema configs that are layered based on their VersionSources that match the incoming message. Schema configs present in higher indices override those in lower indices with the same message type and trigger event if their VersionSources all match an incoming message."}},
                 :description "A schema package contains a set of schemas and type definitions.",
                 :id "SchemaPackage",
                 :type "object"},
 :ReplaceWithInfoTypeConfig {:type "object",
                             :properties {},
                             :id "ReplaceWithInfoTypeConfig",
                             :description "When using the INSPECT_AND_TRANSFORM action, each match is replaced with the name of the info_type. For example, \"My name is Jane\" becomes \"My name is [PERSON_NAME].\" The TRANSFORM action is equivalent to redacting."},
 :FieldMetadata {:type "object",
                 :description "Specifies FHIR paths to match, and how to handle de-identification of matching fields.",
                 :properties {:paths {:items {:type "string"},
                                      :type "array",
                                      :description "List of paths to FHIR fields to be redacted. Each path is a period-separated list where each component is either a field name or FHIR type name, for example: Patient, HumanName. For \"choice\" types (those defined in the FHIR spec with the form: field[x]) we use two separate components. For example, \"deceasedAge.unit\" is matched by \"Deceased.Age.unit\". Supported types are: AdministrativeGenderCode, Code, Date, DateTime, Decimal, HumanName, Id, LanguageCode, Markdown, Oid, String, Uri, Uuid, Xhtml. Base64Binary is also supported, but may only be kept as-is or have all the content removed."},
                              :action {:description "Deidentify action for one field.",
                                       :type "string",
                                       :enumDescriptions ["No action specified."
                                                          "Transform the entire field."
                                                          "Inspect and transform any found PHI."
                                                          "Do not transform."],
                                       :enum ["ACTION_UNSPECIFIED"
                                              "TRANSFORM"
                                              "INSPECT_AND_TRANSFORM"
                                              "DO_NOT_TRANSFORM"]}},
                 :id "FieldMetadata"},
 :Segment {:properties {:fields {:additionalProperties {:type "string"},
                                 :type "object",
                                 :description "A mapping from the positional location to the value. The key string uses zero-based indexes separated by dots to identify Fields, components and sub-components. A bracket notation is also used to identify different instances of a repeated field. Regex for key: (\\d+)(\\[\\d+\\])?(.\\d+)?(.\\d+)? Examples of (key, value) pairs: * (0.1, \"hemoglobin\") denotes that the first component of Field 0 has the value \"hemoglobin\". * (1.1.2, \"CBC\") denotes that the second sub-component of the first component of Field 1 has the value \"CBC\". * (1[0].1, \"HbA1c\") denotes that the first component of the first Instance of Field 1, which is repeated, has the value \"HbA1c\"."},
                        :segmentId {:type "string",
                                    :description "A string that indicates the type of segment. For example, EVN or PID."},
                        :setId {:type "string",
                                :description "Set ID for segments that can be in a set. This can be empty if it's missing or isn't applicable."}},
           :id "Segment",
           :type "object",
           :description "A segment in a structured format."},
 :ConsentEvaluation {:description "The detailed evaluation of a particular Consent.",
                     :type "object",
                     :properties {:evaluationResult {:type "string",
                                                     :enum ["EVALUATION_RESULT_UNSPECIFIED"
                                                            "NOT_APPLICABLE"
                                                            "NO_MATCHING_POLICY"
                                                            "NO_SATISFIED_POLICY"
                                                            "HAS_SATISFIED_POLICY"],
                                                     :enumDescriptions ["No evaluation result specified. This option is invalid."
                                                                        "The Consent is not applicable to the requested access determination. For example, the Consent does not apply to the user for which the access determination is requested, or it has a `state` of `REVOKED`."
                                                                        "The Consent does not have a policy that matches the `resource_attributes` of the evaluated resource."
                                                                        "The Consent has at least one policy that matches the `resource_attributes` of the evaluated resource, but no `authorization_rule` was satisfied."
                                                                        "The Consent has at least one policy that matches the `resource_attributes` of the evaluated resource, and at least one `authorization_rule` was satisfied."],
                                                     :description "The evaluation result."}},
                     :id "ConsentEvaluation"},
 :ImportDicomDataRequest {:id "ImportDicomDataRequest",
                          :description "Imports data into the specified DICOM store. Returns an error if any of the files to import are not DICOM files. This API accepts duplicate DICOM instances by ignoring the newly-pushed instance. It does not overwrite.",
                          :type "object",
                          :properties {:gcsSource {:description "Cloud Storage source data location and import configuration. The Cloud Healthcare Service Agent requires the `roles/storage.objectViewer` Cloud IAM roles on the Cloud Storage location.",
                                                   :$ref "GoogleCloudHealthcareV1DicomGcsSource"}}},
 :ActivateConsentRequest {:id "ActivateConsentRequest",
                          :description "Activates the latest revision of the specified Consent by committing a new revision with `state` updated to `ACTIVE`. If the latest revision of the given Consent is in the `ACTIVE` state, no new revision is committed. A FAILED_PRECONDITION error occurs if the latest revision of the given consent is in the `REJECTED` or `REVOKED` state.",
                          :properties {:ttl {:type "string",
                                             :description "The time to live for this Consent from when it is marked as active.",
                                             :format "google-duration"},
                                       :expireTime {:type "string",
                                                    :format "google-datetime",
                                                    :description "Timestamp in UTC of when this Consent is considered expired."},
                                       :consentArtifact {:type "string",
                                                         :description "Required. The resource name of the Consent artifact that contains documentation of the user's consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}`. If the draft Consent had a Consent artifact, this Consent artifact overwrites it."}},
                          :type "object"},
 :SchemaGroup {:id "SchemaGroup",
               :type "object",
               :description "An HL7v2 logical group construct.",
               :properties {:minOccurs {:format "int32",
                                        :type "integer",
                                        :description "The minimum number of times this group must be present/repeated."},
                            :maxOccurs {:type "integer",
                                        :format "int32",
                                        :description "The maximum number of times this group can be repeated. 0 or -1 means unbounded."},
                            :name {:type "string",
                                   :description "The name of this group. For example, \"ORDER_DETAIL\"."},
                            :members {:items {:$ref "GroupOrSegment"},
                                      :type "array",
                                      :description "Nested groups and/or segments."},
                            :choice {:description "True indicates that this is a choice group, meaning that only one of its segments can exist in a given message.",
                                     :type "boolean"}}},
 :CheckDataAccessResponse {:type "object",
                           :properties {:consentDetails {:description "The resource names of all evaluated Consents mapped to their evaluation.",
                                                         :type "object",
                                                         :additionalProperties {:$ref "ConsentEvaluation"}},
                                        :consented {:type "boolean",
                                                    :description "Whether the requested resource is consented for the given use."}},
                           :id "CheckDataAccessResponse",
                           :description "Checks if a particular data_id of a User data mapping in the given consent store is consented for a given use."},
 :TestIamPermissionsResponse {:id "TestIamPermissionsResponse",
                              :type "object",
                              :properties {:permissions {:type "array",
                                                         :description "A subset of `TestPermissionsRequest.permissions` that the caller is allowed.",
                                                         :items {:type "string"}}},
                              :description "Response message for `TestIamPermissions` method."},
 :TagFilterList {:description "List of tags to be filtered.",
                 :properties {:tags {:description "Tags to be filtered. Tags must be DICOM Data Elements, File Meta Elements, or Directory Structuring Elements, as defined at: http://dicom.nema.org/medical/dicom/current/output/html/part06.html#table_6-1,. They may be provided by \"Keyword\" or \"Tag\". For example \"PatientID\", \"00100010\".",
                                     :type "array",
                                     :items {:type "string"}}},
                 :type "object",
                 :id "TagFilterList"},
 :ExportDicomDataResponse {:type "object",
                           :properties {},
                           :id "ExportDicomDataResponse",
                           :description "Returns additional information in regards to a completed DICOM store export."},
 :RevokeConsentRequest {:type "object",
                        :id "RevokeConsentRequest",
                        :description "Revokes the latest revision of the specified Consent by committing a new revision with `state` updated to `REVOKED`. If the latest revision of the given Consent is in the `REVOKED` state, no new revision is committed.",
                        :properties {:consentArtifact {:description "Optional. The resource name of the Consent artifact that contains proof of the user's revocation of the Consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}`.",
                                                       :type "string"}}},
 :AttributeDefinition {:type "object",
                       :properties {:dataMappingDefaultValue {:description "Optional. Default value of the attribute in User data mappings. If no default value is specified, it defaults to an empty value. This field is only applicable to attributes of the category `RESOURCE`.",
                                                              :type "string"},
                                    :allowedValues {:items {:type "string"},
                                                    :description "Required. Possible values for the attribute. The number of allowed values must not exceed 100. An empty list is invalid. The list can only be expanded after creation.",
                                                    :type "array"},
                                    :category {:enumDescriptions ["No category specified. This option is invalid."
                                                                  "Specify this category when this attribute describes the properties of resources. For example, data anonymity or data type."
                                                                  "Specify this category when this attribute describes the properties of requests. For example, requester's role or requester's organization."],
                                               :description "Required. The category of the attribute. The value of this field cannot be changed after creation.",
                                               :enum ["CATEGORY_UNSPECIFIED"
                                                      "RESOURCE"
                                                      "REQUEST"],
                                               :type "string"},
                                    :name {:type "string",
                                           :description "Resource name of the Attribute definition, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/attributeDefinitions/{attribute_definition_id}`. Cannot be changed after creation."},
                                    :description {:description "Optional. A description of the attribute.",
                                                  :type "string"},
                                    :consentDefaultValues {:items {:type "string"},
                                                           :description "Optional. Default values of the attribute in Consents. If no default values are specified, it defaults to an empty value.",
                                                           :type "array"}},
                       :description "A client-defined consent attribute.",
                       :id "AttributeDefinition"},
 :GoogleCloudHealthcareV1DicomGcsDestination {:description "The Cloud Storage location where the server writes the output and the export configuration.",
                                              :id "GoogleCloudHealthcareV1DicomGcsDestination",
                                              :type "object",
                                              :properties {:uriPrefix {:type "string",
                                                                       :description "The Cloud Storage destination to export to. URI for a Cloud Storage directory where the server writes the result files, in the format `gs://{bucket-id}/{path/to/destination/dir}`). If there is no trailing slash, the service appends one when composing the object path. The user is responsible for creating the Cloud Storage bucket referenced in `uri_prefix`."},
                                                           :mimeType {:type "string",
                                                                      :description "MIME types supported by DICOM spec. Each file is written in the following format: `.../{study_id}/{series_id}/{instance_id}[/{frame_number}].{extension}` The frame_number component exists only for multi-frame instances. Supported MIME types are consistent with supported formats in DICOMweb: https://cloud.google.com/healthcare/docs/dicom#retrieve_transaction. Specifically, the following are supported: - application/dicom; transfer-syntax=1.2.840.10008.1.2.1 (uncompressed DICOM) - application/dicom; transfer-syntax=1.2.840.10008.1.2.4.50 (DICOM with embedded JPEG Baseline) - application/dicom; transfer-syntax=1.2.840.10008.1.2.4.90 (DICOM with embedded JPEG 2000 Lossless Only) - application/dicom; transfer-syntax=1.2.840.10008.1.2.4.91 (DICOM with embedded JPEG 2000) - application/dicom; transfer-syntax=* (DICOM with no transcoding) - application/octet-stream; transfer-syntax=1.2.840.10008.1.2.1 (raw uncompressed PixelData) - application/octet-stream; transfer-syntax=* (raw PixelData in whatever format it was uploaded in) - image/jpeg; transfer-syntax=1.2.840.10008.1.2.4.50 (Consumer JPEG) - image/png The following extensions are used for output files: - application/dicom -> .dcm - image/jpeg -> .jpg - image/png -> .png - application/octet-stream -> no extension If unspecified, the instances are exported in the original DICOM format they were uploaded in."}}},
 :SchemaConfig {:properties {:schemaType {:description "Specifies the output schema type. Schema type is required.",
                                          :type "string",
                                          :enum ["SCHEMA_TYPE_UNSPECIFIED"
                                                 "ANALYTICS"],
                                          :enumDescriptions ["No schema type specified. This type is unsupported."
                                                             "Analytics schema defined by the FHIR community. See https://github.com/FHIR/sql-on-fhir/blob/master/sql-on-fhir.md. BigQuery only allows a maximum of 10,000 columns per table. Due to this limitation, the server will not generate schemas for fields of type `Resource`, which can hold any resource type. The affected fields are `Parameters.parameter.resource`, `Bundle.entry.resource`, and `Bundle.entry.response.outcome`."]},
                             :recursiveStructureDepth {:type "string",
                                                       :format "int64",
                                                       :description "The depth for all recursive structures in the output analytics schema. For example, `concept` in the CodeSystem resource is a recursive structure; when the depth is 2, the CodeSystem table will have a column called `concept.concept` but not `concept.concept.concept`. If not specified or set to 0, the server will use the default value 2. The maximum depth allowed is 5."}},
                :id "SchemaConfig",
                :description "Configuration for the FHIR BigQuery schema. Determines how the server generates the schema.",
                :type "object"},
 :DeidentifyDicomStoreRequest {:properties {:config {:description "De-identify configuration.",
                                                     :$ref "DeidentifyConfig"},
                                            :destinationStore {:type "string",
                                                               :description "The name of the DICOM store to create and write the redacted data to. For example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`. * The destination dataset must exist. * The source dataset and destination dataset must both reside in the same location. De-identifying data across multiple locations is not supported. * The destination DICOM store must not exist. * The caller must have the necessary permissions to create the destination DICOM store."},
                                            :filterConfig {:$ref "DicomFilterConfig",
                                                           :description "Filter configuration."}},
                               :description "Creates a new DICOM store with sensitive information de-identified.",
                               :id "DeidentifyDicomStoreRequest",
                               :type "object"},
 :SchemaSegment {:description "An HL7v2 Segment.",
                 :id "SchemaSegment",
                 :type "object",
                 :properties {:maxOccurs {:type "integer",
                                          :description "The maximum number of times this segment can be present in this group. 0 or -1 means unbounded.",
                                          :format "int32"},
                              :type {:description "The Segment type. For example, \"PID\".",
                                     :type "string"},
                              :minOccurs {:format "int32",
                                          :type "integer",
                                          :description "The minimum number of times this segment can be present in this group."}}},
 :GoogleCloudHealthcareV1DicomBigQueryDestination {:description "The BigQuery table where the server writes the output.",
                                                   :id "GoogleCloudHealthcareV1DicomBigQueryDestination",
                                                   :properties {:tableUri {:type "string",
                                                                           :description "BigQuery URI to a table, up to 2000 characters long, in the format `bq://projectId.bqDatasetId.tableId`"},
                                                                :force {:description "If the destination table already exists and this flag is `TRUE`, the table is overwritten by the contents of the DICOM store. If the flag is not set and the destination table already exists, the export call returns an error.",
                                                                        :type "boolean"}},
                                                   :type "object"},
 :OperationMetadata {:description "OperationMetadata provides information about the operation execution. Returned in the long-running operation's metadata field.",
                     :properties {:createTime {:format "google-datetime",
                                               :description "The time at which the operation was created by the API.",
                                               :type "string"},
                                  :counter {:$ref "ProgressCounter"},
                                  :endTime {:format "google-datetime",
                                            :type "string",
                                            :description "The time at which execution was completed."},
                                  :logsUrl {:type "string",
                                            :description "A link to audit and error logs in the log viewer. Error logs are generated only by some operations, listed at [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)."},
                                  :apiMethodName {:type "string",
                                                  :description "The name of the API method that initiated the operation."},
                                  :cancelRequested {:description "Specifies if cancellation was requested for the operation.",
                                                    :type "boolean"}},
                     :id "OperationMetadata",
                     :type "object"},
 :Expr {:properties {:expression {:type "string",
                                  :description "Textual representation of an expression in Common Expression Language syntax."},
                     :title {:description "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.",
                             :type "string"},
                     :location {:description "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.",
                                :type "string"},
                     :description {:description "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.",
                                   :type "string"}},
        :type "object",
        :id "Expr",
        :description "Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: \"Summary size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() < 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\" expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description: \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' && document.type != 'internal'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information."},
 :CreateMessageRequest {:description "Creates a new message.",
                        :properties {:message {:description "HL7v2 message.",
                                               :$ref "Message"}},
                        :type "object",
                        :id "CreateMessageRequest"},
 :Type {:type "object",
        :properties {:primitive {:enumDescriptions ["Not a primitive."
                                                    "String primitive."
                                                    "Element that can have unschematized children."
                                                    "Like STRING, but all delimiters below this element are ignored."],
                                 :description "If this is a primitive type then this field is the type of the primitive For example, STRING. Leave unspecified for composite types.",
                                 :enum ["PRIMITIVE_UNSPECIFIED"
                                        "STRING"
                                        "VARIES"
                                        "UNESCAPED_STRING"],
                                 :type "string"},
                     :fields {:type "array",
                              :description "The (sub) fields this type has (if not primitive).",
                              :items {:$ref "Field"}},
                     :name {:description "The name of this type. This would be the segment or datatype name. For example, \"PID\" or \"XPN\".",
                            :type "string"}},
        :id "Type",
        :description "A type definition for some HL7v2 type (incl. Segments and Datatypes)."},
 :InfoTypeTransformation {:description "A transformation to apply to text that is identified as a specific info_type.",
                          :type "object",
                          :properties {:redactConfig {:description "Config for text redaction.",
                                                      :$ref "RedactConfig"},
                                       :characterMaskConfig {:$ref "CharacterMaskConfig",
                                                             :description "Config for character mask."},
                                       :cryptoHashConfig {:description "Config for crypto hash.",
                                                          :$ref "CryptoHashConfig"},
                                       :replaceWithInfoTypeConfig {:description "Config for replace with InfoType.",
                                                                   :$ref "ReplaceWithInfoTypeConfig"},
                                       :dateShiftConfig {:description "Config for date shift.",
                                                         :$ref "DateShiftConfig"},
                                       :infoTypes {:type "array",
                                                   :description "InfoTypes to apply this transformation to. If this is not specified, the transformation applies to any info_type.",
                                                   :items {:type "string"}}},
                          :id "InfoTypeTransformation"},
 :TextConfig {:id "TextConfig",
              :type "object",
              :properties {:transformations {:items {:$ref "InfoTypeTransformation"},
                                             :type "array",
                                             :description "The transformations to apply to the detected data."}}},
 :DeidentifySummary {:id "DeidentifySummary",
                     :properties {},
                     :description "Contains a summary of the Deidentify operation.",
                     :type "object"},
 :GroupOrSegment {:type "object",
                  :id "GroupOrSegment",
                  :properties {:group {:$ref "SchemaGroup"},
                               :segment {:$ref "SchemaSegment"}},
                  :description "Construct representing a logical group or a segment."},
 :ListConsentRevisionsResponse {:id "ListConsentRevisionsResponse",
                                :type "object",
                                :properties {:consents {:description "The returned Consent revisions. The maximum number of revisions returned is determined by the value of `page_size` in the ListConsentRevisionsRequest.",
                                                        :type "array",
                                                        :items {:$ref "Consent"}},
                                             :nextPageToken {:description "Token to retrieve the next page of results, or empty if there are no more results in the list.",
                                                             :type "string"}}},
 :ListConsentStoresResponse {:id "ListConsentStoresResponse",
                             :properties {:consentStores {:type "array",
                                                          :description "The returned consent stores. The maximum number of stores returned is determined by the value of page_size in the ListConsentStoresRequest.",
                                                          :items {:$ref "ConsentStore"}},
                                          :nextPageToken {:type "string",
                                                          :description "Token to retrieve the next page of results, or empty if there are no more results in the list."}},
                             :type "object"},
 :ConsentStore {:id "ConsentStore",
                :properties {:defaultConsentTtl {:type "string",
                                                 :description "Optional. Default time to live for Consents created in this store. Must be at least 24 hours. Updating this field will not affect the expiration time of existing consents.",
                                                 :format "google-duration"},
                             :name {:description "Resource name of the consent store, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}`. Cannot be changed after creation.",
                                    :type "string"},
                             :enableConsentCreateOnUpdate {:type "boolean",
                                                           :description "Optional. If `true`, UpdateConsent creates the Consent if it does not already exist. If unspecified, defaults to `false`."},
                             :labels {:description "Optional. User-supplied key-value pairs used to organize consent stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \\p{Ll}\\p{Lo}{0,62}. Label values must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63}. No more than 64 labels can be associated with a given store. For more information: https://cloud.google.com/healthcare/docs/how-tos/labeling-resources",
                                      :type "object",
                                      :additionalProperties {:type "string"}}},
                :description "Represents a consent store.",
                :type "object"},
 :ImageConfig {:properties {:textRedactionMode {:enumDescriptions ["No text redaction specified. Same as REDACT_NO_TEXT."
                                                                   "Redact all text."
                                                                   "Redact sensitive text."
                                                                   "Do not redact text."],
                                                :description "Determines how to redact text from image.",
                                                :enum ["TEXT_REDACTION_MODE_UNSPECIFIED"
                                                       "REDACT_ALL_TEXT"
                                                       "REDACT_SENSITIVE_TEXT"
                                                       "REDACT_NO_TEXT"],
                                                :type "string"}},
               :id "ImageConfig",
               :description "Specifies how to handle de-identification of image pixels.",
               :type "object"},
 :Consent {:type "object",
           :properties {:policies {:description "Optional. Represents a user's consent in terms of the resources that can be accessed and under what conditions.",
                                   :items {:$ref "GoogleCloudHealthcareV1ConsentPolicy"},
                                   :type "array"},
                        :revisionCreateTime {:description "Output only. The timestamp that the revision was created.",
                                             :format "google-datetime",
                                             :readOnly true,
                                             :type "string"},
                        :name {:description "Resource name of the Consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}`. Cannot be changed after creation.",
                               :type "string"},
                        :revisionId {:type "string",
                                     :description "Output only. The revision ID of the Consent. The format is an 8-character hexadecimal string. Refer to a specific revision of a Consent by appending `@{revision_id}` to the Consent's resource name.",
                                     :readOnly true},
                        :state {:type "string",
                                :description "Required. Indicates the current state of this Consent.",
                                :enumDescriptions ["No state specified."
                                                   "The Consent is active and is considered when evaluating a user's consent on resources."
                                                   "When a Consent is updated, the current version is archived and a new one is created with its state set to the updated Consent's previous state."
                                                   "A revoked Consent is not considered when evaluating a user's consent on resources."
                                                   "A draft Consent is not considered when evaluating a user's consent on resources unless explicitly specified."
                                                   "When a draft Consent is rejected by a user, it is set to a rejected state. A rejected Consent is not considered when evaluating a user's consent on resources."],
                                :enum ["STATE_UNSPECIFIED"
                                       "ACTIVE"
                                       "ARCHIVED"
                                       "REVOKED"
                                       "DRAFT"
                                       "REJECTED"]},
                        :ttl {:format "google-duration",
                              :description "Input only. The time to live for this Consent from when it is created.",
                              :type "string"},
                        :consentArtifact {:description "Required. The resource name of the Consent artifact that contains proof of the end user's consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}`.",
                                          :type "string"},
                        :userId {:description "Required. User's UUID provided by the client.",
                                 :type "string"},
                        :expireTime {:type "string",
                                     :format "google-datetime",
                                     :description "Timestamp in UTC of when this Consent is considered expired."},
                        :metadata {:additionalProperties {:type "string"},
                                   :type "object",
                                   :description "Optional. User-supplied key-value pairs used to organize Consent resources. Metadata keys must: - be between 1 and 63 characters long - have a UTF-8 encoding of maximum 128 bytes - begin with a letter - consist of up to 63 characters including lowercase letters, numeric characters, underscores, and dashes Metadata values must be: - be between 1 and 63 characters long - have a UTF-8 encoding of maximum 128 bytes - consist of up to 63 characters including lowercase letters, numeric characters, underscores, and dashes No more than 64 metadata entries can be associated with a given consent."}},
           :description "Represents a user's consent.",
           :id "Consent"},
 :ListOperationsResponse {:id "ListOperationsResponse",
                          :properties {:operations {:type "array",
                                                    :description "A list of operations that matches the specified filter in the request.",
                                                    :items {:$ref "Operation"}},
                                       :nextPageToken {:type "string",
                                                       :description "The standard List next-page token."}},
                          :description "The response message for Operations.ListOperations.",
                          :type "object"},
 :Attribute {:id "Attribute",
             :description "An attribute value for a Consent or User data mapping. Each Attribute must have a corresponding AttributeDefinition in the consent store that defines the default and allowed values.",
             :type "object",
             :properties {:attributeDefinitionId {:description "Indicates the name of an attribute defined in the consent store.",
                                                  :type "string"},
                          :values {:type "array",
                                   :description "Required. The value of the attribute. Must be an acceptable value as defined in the consent store. For example, if the consent store defines \"data type\" with acceptable values \"questionnaire\" and \"step-count\", when the attribute name is data type, this field must contain one of those values.",
                                   :items {:type "string"}}}},
 :QueryAccessibleDataRequest {:properties {:gcsDestination {:$ref "GoogleCloudHealthcareV1ConsentGcsDestination",
                                                            :description "The Cloud Storage destination. The Cloud Healthcare API service account must have the `roles/storage.objectAdmin` Cloud IAM role for this Cloud Storage location."},
                                           :resourceAttributes {:description "Optional. The values of resource attributes associated with the type of resources being requested. If no values are specified, then all resource types are included in the output.",
                                                                :additionalProperties {:type "string"},
                                                                :type "object"},
                                           :requestAttributes {:additionalProperties {:type "string"},
                                                               :type "object",
                                                               :description "The values of request attributes associated with this access request."}},
                              :id "QueryAccessibleDataRequest",
                              :description "Queries all data_ids that are consented for a given use in the given consent store and writes them to a specified destination. The returned Operation includes a progress counter for the number of User data mappings processed. Errors are logged to Cloud Logging (see [Viewing error logs in Cloud Logging] (https://cloud.google.com/healthcare/docs/how-tos/logging) and [QueryAccessibleData] for a sample log entry).",
                              :type "object"},
 :Location {:type "object",
            :properties {:locationId {:description "The canonical id for this location. For example: `\"us-east1\"`.",
                                      :type "string"},
                         :name {:description "Resource name for the location, which may vary between implementations. For example: `\"projects/example-project/locations/us-east1\"`",
                                :type "string"},
                         :displayName {:type "string",
                                       :description "The friendly name for this location, typically a nearby city name. For example, \"Tokyo\"."},
                         :labels {:type "object",
                                  :additionalProperties {:type "string"},
                                  :description "Cross-service attributes for the location. For example {\"cloud.googleapis.com/region\": \"us-east1\"}"},
                         :metadata {:type "object",
                                    :description "Service-specific metadata. For example the available capacity at the given location.",
                                    :additionalProperties {:type "any",
                                                           :description "Properties of the object. Contains field @type with type URL."}}},
            :description "A resource that represents Google Cloud Platform location.",
            :id "Location"},
 :CheckDataAccessRequest {:properties {:consentList {:description "Optional. Specific Consents to evaluate the access request against. These Consents must have the same `user_id` as the evaluated User data mapping, must exist in the current `consent_store`, and have a `state` of either `ACTIVE` or `DRAFT`. A maximum of 100 Consents can be provided here. If no selection is specified, the access request is evaluated against all `ACTIVE` unexpired Consents with the same `user_id` as the evaluated User data mapping.",
                                                     :$ref "ConsentList"},
                                       :requestAttributes {:additionalProperties {:type "string"},
                                                           :type "object",
                                                           :description "The values of request attributes associated with this access request."},
                                       :dataId {:type "string",
                                                :description "Required. The unique identifier of the resource to check access for. This identifier must correspond to a User data mapping in the given consent store."},
                                       :responseView {:enum ["RESPONSE_VIEW_UNSPECIFIED"
                                                             "BASIC"
                                                             "FULL"],
                                                      :description "Optional. The view for CheckDataAccessResponse. If unspecified, defaults to `BASIC` and returns `consented` as `TRUE` or `FALSE`.",
                                                      :type "string",
                                                      :enumDescriptions ["No response view specified. The API will default to the BASIC view."
                                                                         "Only the `consented` field is populated in CheckDataAccessResponse."
                                                                         "All fields within CheckDataAccessResponse are populated. When set to `FULL`, all `ACTIVE` Consents are evaluated even if a matching policy is found during evaluation."]}},
                          :type "object",
                          :id "CheckDataAccessRequest",
                          :description "Checks if a particular data_id of a User data mapping in the given consent store is consented for a given use."},
 :EvaluateUserConsentsResponse {:type "object",
                                :properties {:results {:items {:$ref "Result"},
                                                       :type "array",
                                                       :description "The consent evaluation result for each `data_id`."},
                                             :nextPageToken {:type "string",
                                                             :description "Token to retrieve the next page of results, or empty if there are no more results in the list. This token is valid for 72 hours after it is created."}},
                                :id "EvaluateUserConsentsResponse"},
 :GoogleCloudHealthcareV1FhirGcsSource {:description "Specifies the configuration for importing data from Cloud Storage.",
                                        :properties {:uri {:description "Points to a Cloud Storage URI containing file(s) to import. The URI must be in the following format: `gs://{bucket_id}/{object_id}`. The URI can include wildcards in `object_id` and thus identify multiple files. Supported wildcards: * `*` to match 0 or more non-separator characters * `**` to match 0 or more characters (including separators). Must be used at the end of a path and with no other wildcards in the path. Can also be used with a file extension (such as .ndjson), which imports all files with the extension in the specified directory and its sub-directories. For example, `gs://my-bucket/my-directory/**.ndjson` imports all files with `.ndjson` extensions in `my-directory/` and its sub-directories. * `?` to match 1 character Files matching the wildcard are expected to contain content only, no metadata.",
                                                           :type "string"}},
                                        :id "GoogleCloudHealthcareV1FhirGcsSource",
                                        :type "object"},
 :DateShiftConfig {:type "object",
                   :properties {:cryptoKey {:format "byte",
                                            :type "string",
                                            :description "An AES 128/192/256 bit key. Causes the shift to be computed based on this key and the patient ID. A default key is generated for each Deidentify operation and is used wherever crypto_key is not specified."}},
                   :description "Shift a date forward or backward in time by a random amount which is consistent for a given patient and crypto key combination.",
                   :id "DateShiftConfig"},
 :Policy {:id "Policy",
          :description "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time < timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).",
          :type "object",
          :properties {:auditConfigs {:items {:$ref "AuditConfig"},
                                      :type "array",
                                      :description "Specifies cloud audit logging configuration for this policy."},
                       :etag {:type "string",
                              :format "byte",
                              :description "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost."},
                       :bindings {:items {:$ref "Binding"},
                                  :description "Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.",
                                  :type "array"},
                       :version {:type "integer",
                                 :description "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
                                 :format "int32"}}},
 :VersionSource {:properties {:value {:type "string",
                                      :description "The value to match with the field. For example, \"My Application Name\" or \"2.3\"."},
                              :mshField {:description "The field to extract from the MSH segment. For example, \"3.1\" or \"18[1].1\".",
                                         :type "string"}},
                 :description "Describes a selector for extracting and matching an MSH field to a value.",
                 :type "object",
                 :id "VersionSource"},
 :Dataset {:id "Dataset",
           :properties {:timeZone {:type "string",
                                   :description "The default timezone used by this dataset. Must be a either a valid IANA time zone name such as \"America/New_York\" or empty, which defaults to UTC. This is used for parsing times in resources, such as HL7 messages, where no explicit timezone is specified."},
                        :name {:type "string",
                               :description "Resource name of the dataset, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`."}},
           :description "A message representing a health dataset. A health dataset represents a collection of healthcare data pertaining to one or more patients. This may include multiple modalities of healthcare data, such as electronic medical records or medical imaging data.",
           :type "object"},
 :Status {:id "Status",
          :properties {:code {:format "int32",
                              :type "integer",
                              :description "The status code, which should be an enum value of google.rpc.Code."},
                       :message {:type "string",
                                 :description "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."},
                       :details {:items {:type "object",
                                         :additionalProperties {:type "any",
                                                                :description "Properties of the object. Contains field @type with type URL."}},
                                 :type "array",
                                 :description "A list of messages that carry the error details. There is a common set of message types for APIs to use."}},
          :type "object",
          :description "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors)."},
 :ProgressCounter {:description "ProgressCounter provides counters to describe an operation's progress.",
                   :type "object",
                   :properties {:success {:description "The number of units that succeeded in the operation.",
                                          :type "string",
                                          :format "int64"},
                                :pending {:description "The number of units that are pending in the operation.",
                                          :format "int64",
                                          :type "string"},
                                :failure {:type "string",
                                          :description "The number of units that failed in the operation.",
                                          :format "int64"}},
                   :id "ProgressCounter"}}
