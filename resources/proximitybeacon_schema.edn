{:Observation {:type "object",
               :properties {:advertisedId {:$ref "AdvertisedId",
                                           :description "The ID advertised by the beacon the client has encountered.\n\nIf the submitted `advertised_id` type is Eddystone-EID, then the client\nmust be authorized to resolve the given beacon. Otherwise no data will be\nreturned for that beacon.\nRequired."},
                            :telemetry {:description "The array of telemetry bytes received from the beacon. The server is\nresponsible for parsing it. This field may frequently be empty, as\nwith a beacon that transmits telemetry only occasionally.",
                                        :format "byte",
                                        :type "string"},
                            :timestampMs {:description "Time when the beacon was observed.",
                                          :format "google-datetime",
                                          :type "string"}},
               :id "Observation",
               :description "Represents one beacon observed once."},
 :ListDiagnosticsResponse {:description "Response that contains the requested diagnostics.",
                           :type "object",
                           :properties {:diagnostics {:description "The diagnostics matching the given request.",
                                                      :type "array",
                                                      :items {:$ref "Diagnostics"}},
                                        :nextPageToken {:description "Token that can be used for pagination. Returned only if the\nrequest matches more beacons than can be returned in this response.",
                                                        :type "string"}},
                           :id "ListDiagnosticsResponse"},
 :ListBeaconsResponse {:properties {:nextPageToken {:description "An opaque pagination token that the client may provide in their next\nrequest to retrieve the next page of results.",
                                                    :type "string"},
                                    :beacons {:type "array",
                                              :items {:$ref "Beacon"},
                                              :description "The beacons that matched the search criteria."},
                                    :totalCount {:description "Estimate of the total number of beacons matched by the query. Higher\nvalues may be less accurate.",
                                                 :format "int64",
                                                 :type "string"}},
                       :id "ListBeaconsResponse",
                       :description "Response that contains list beacon results and pagination help.",
                       :type "object"},
 :BeaconAttachment {:description "Project-specific data associated with a beacon.",
                    :type "object",
                    :properties {:creationTimeMs {:description "The UTC time when this attachment was created, in milliseconds since the\nUNIX epoch.",
                                                  :format "google-datetime",
                                                  :type "string"},
                                 :maxDistanceMeters {:description "The distance away from the beacon at which this attachment should be\ndelivered to a mobile app.\n\nSetting this to a value greater than zero indicates that the app should\nbehave as if the beacon is \"seen\" when the mobile device is less than this\ndistance away from the beacon.\n\nDifferent attachments on the same beacon can have different max distances.\n\nNote that even though this value is expressed with fractional meter\nprecision, real-world behavior is likley to be much less precise than one\nmeter, due to the nature of current Bluetooth radio technology.\n\nOptional. When not set or zero, the attachment should be delivered at the\nbeacon's outer limit of detection.\n\nNegative values are invalid and return an error.",
                                                     :format "double",
                                                     :type "number"},
                                 :attachmentName {:description "Resource name of this attachment. Attachment names have the format:\n<code>beacons/<var>beacon_id</var>/attachments/<var>attachment_id</var></code>.\nLeave this empty on creation.",
                                                  :type "string"},
                                 :namespacedType {:description "Specifies what kind of attachment this is. Tells a client how to\ninterpret the `data` field. Format is <var>namespace/type</var>. Namespace\nprovides type separation between clients. Type describes the type of\n`data`, for use by the client when parsing the `data` field.\nRequired.",
                                                  :type "string"},
                                 :data {:type "string",
                                        :description "An opaque data container for client-provided data. Must be\n[base64](http://tools.ietf.org/html/rfc4648#section-4) encoded in HTTP\nrequests, and will be so encoded (with padding) in responses.\nRequired.",
                                        :format "byte"}},
                    :id "BeaconAttachment"},
 :Beacon {:description "Details of a beacon device.",
          :type "object",
          :properties {:description {:type "string",
                                     :description "Free text used to identify and describe the beacon. Maximum length 140\ncharacters.\nOptional."},
                       :properties {:additionalProperties {:type "string"},
                                    :description "Properties of the beacon device, for example battery type or firmware\nversion.\nOptional.",
                                    :type "object"},
                       :beaconName {:description "Resource name of this beacon. A beacon name has the format\n\"beacons/N!beaconId\" where the beaconId is the base16 ID broadcast by\nthe beacon and N is a code for the beacon's type. Possible values are\n`3` for Eddystone, `1` for iBeacon, or `5` for AltBeacon.\n\nThis field must be left empty when registering. After reading a beacon,\nclients can use the name for future operations.",
                                    :type "string"},
                       :indoorLevel {:$ref "IndoorLevel",
                                     :description "The indoor level information for this beacon, if known. As returned by the\nGoogle Maps API.\nOptional."},
                       :provisioningKey {:description "Some beacons may require a user to provide an authorization key before\nchanging any of its configuration (e.g. broadcast frames, transmit power).\nThis field provides a place to store and control access to that key.\nThis field is populated in responses to `GET /v1beta1/beacons/3!beaconId`\nfrom users with write access to the given beacon. That is to say: If the\nuser is authorized to write the beacon's confidential data in the service,\nthe service considers them authorized to configure the beacon. Note\nthat this key grants nothing on the service, only on the beacon itself.",
                                         :format "byte",
                                         :type "string"},
                       :status {:enumDescriptions ["Do not use this value."
                                                   "The \"normal\" in-use state of a beacon."
                                                   "Beacon should no longer be used for any purpose. This is irreversible."
                                                   "The beacon should not be visible to mobile devices. This is reversible."],
                                :enum ["STATUS_UNSPECIFIED"
                                       "ACTIVE"
                                       "DECOMMISSIONED"
                                       "INACTIVE"],
                                :description "Current status of the beacon.\nRequired.",
                                :type "string"},
                       :advertisedId {:description "The identifier of a beacon as advertised by it. This field must be\npopulated when registering. It may be empty when updating a beacon\nrecord because it is ignored in updates.\n\nWhen registering a beacon that broadcasts Eddystone-EID, this field\nshould contain a \"stable\" Eddystone-UID that identifies the beacon and\nlinks it to its attachments. The stable Eddystone-UID is only used for\nadministering the beacon.",
                                      :$ref "AdvertisedId"},
                       :latLng {:$ref "LatLng",
                                :description "The location of the beacon, expressed as a latitude and longitude pair.\nThis location is given when the beacon is registered or updated. It does\nnot necessarily indicate the actual current location of the beacon.\nOptional."},
                       :ephemeralIdRegistration {:description "Write-only registration parameters for beacons using Eddystone-EID\n(remotely resolved ephemeral ID) format. This information will not be\npopulated in API responses. When submitting this data, the `advertised_id`\nfield must contain an ID of type Eddystone-UID. Any other ID type will\nresult in an error.",
                                                 :$ref "EphemeralIdRegistration"},
                       :expectedStability {:enumDescriptions ["Do not use this value."
                                                              "Not expected to move, for example a store's front door."
                                                              "Usually stable but may move rarely, usually within a single place,\nfor example a store display."
                                                              "Moves frequently, for example a personal item or food truck."
                                                              "Moves continuously in service, for example a bus or train."],
                                           :enum ["STABILITY_UNSPECIFIED"
                                                  "STABLE"
                                                  "PORTABLE"
                                                  "MOBILE"
                                                  "ROVING"],
                                           :description "Expected location stability. This is set when the beacon is registered or\nupdated, not automatically detected in any way.\nOptional.",
                                           :type "string"},
                       :placeId {:description "The [Google Places API](/places/place-id) Place ID of the place where\nthe beacon is deployed. This is given when the beacon is registered or\nupdated, not automatically detected in any way.\nOptional.",
                                 :type "string"}},
          :id "Beacon"},
 :ListNamespacesResponse {:description "Response to ListNamespacesRequest that contains all the project's namespaces.",
                          :type "object",
                          :properties {:namespaces {:description "The attachments that corresponded to the request params.",
                                                    :type "array",
                                                    :items {:$ref "Namespace"}}},
                          :id "ListNamespacesResponse"},
 :GetInfoForObservedBeaconsRequest {:type "object",
                                    :properties {:observations {:description "The beacons that the client has encountered.\nAt least one must be given.",
                                                                :type "array",
                                                                :items {:$ref "Observation"}},
                                                 :namespacedTypes {:type "array",
                                                                   :items {:type "string"},
                                                                   :description "Specifies what kind of attachments to include in the response.\nWhen given, the response will include only attachments of the given types.\nWhen empty, no attachments will be returned. Must be in the format\n<var>namespace/type</var>. Accepts `*` to specify all types in\nall namespaces owned by the client.\nOptional."}},
                                    :id "GetInfoForObservedBeaconsRequest",
                                    :description "Request for beacon and attachment information about beacons that\na mobile client has encountered \"in the wild\"."},
 :Empty {:type "object",
         :properties {},
         :id "Empty",
         :description "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`."},
 :Diagnostics {:id "Diagnostics",
               :description "Diagnostics for a single beacon.",
               :type "object",
               :properties {:estimatedLowBatteryDate {:$ref "Date",
                                                      :description "The date when the battery is expected to be low. If the value is missing\nthen there is no estimate for when the battery will be low.\nThis value is only an estimate, not an exact date."},
                            :beaconName {:type "string",
                                         :description "Resource name of the beacon. For Eddystone-EID beacons, this may\nbe the beacon's current EID, or the beacon's \"stable\" Eddystone-UID."},
                            :alerts {:description "An unordered list of Alerts that the beacon has.",
                                     :type "array",
                                     :items {:enum ["ALERT_UNSPECIFIED"
                                                    "WRONG_LOCATION"
                                                    "LOW_BATTERY"
                                                    "LOW_ACTIVITY"],
                                             :type "string"},
                                     :enumDescriptions ["Invalid value. Should never appear."
                                                        "The beacon has been reported far from its expected location (the beacon's\nlat_lng field if populated, otherwise, if the beacon's place_id field is\npresent, the center of that place). This may indicate that the beacon has\nbeen moved. This signal is not 100% accurate, but indicates that further\ninvestigation is worthwhile."
                                                        "The battery level for the beacon is low enough that, given the beacon's\ncurrent use, its battery will run out with in the next 60 days. This\nindicates that the battery should be replaced soon."
                                                        "The beacon has been reported at a very low rate or not at all. This may\nindicate that the beacon is broken or just that no one has gone near the\nbeacon in recent days. If this status appears unexpectedly, the beacon\nowner should investigate further."]}}},
 :LatLng {:type "object",
          :properties {:latitude {:description "The latitude in degrees. It must be in the range [-90.0, +90.0].",
                                  :format "double",
                                  :type "number"},
                       :longitude {:description "The longitude in degrees. It must be in the range [-180.0, +180.0].",
                                   :format "double",
                                   :type "number"}},
          :id "LatLng",
          :description "An object representing a latitude/longitude pair. This is expressed as a pair\nof doubles representing degrees latitude and degrees longitude. Unless\nspecified otherwise, this must conform to the\n<a href=\"http://www.unoosa.org/pdf/icg/2012/template/WGS_84.pdf\">WGS84\nstandard</a>. Values must be within normalized ranges."},
 :DeleteAttachmentsResponse {:description "Response for a request to delete attachments.",
                             :type "object",
                             :properties {:numDeleted {:description "The number of attachments that were deleted.",
                                                       :format "int32",
                                                       :type "integer"}},
                             :id "DeleteAttachmentsResponse"},
 :Namespace {:description "An attachment namespace defines read and write access for all the attachments\ncreated under it. Each namespace is globally unique, and owned by one\nproject which is the only project that can create attachments under it.",
             :type "object",
             :properties {:servingVisibility {:description "Specifies what clients may receive attachments under this namespace\nvia `beaconinfo.getforobserved`.",
                                              :type "string",
                                              :enumDescriptions ["Do not use this value."
                                                                 "Served only to the project that owns the namespace."
                                                                 "Any project can subscribe to attachments under the namespace."],
                                              :enum ["VISIBILITY_UNSPECIFIED"
                                                     "UNLISTED"
                                                     "PUBLIC"]},
                          :namespaceName {:description "Resource name of this namespace. Namespaces names have the format:\n<code>namespaces/<var>namespace</var></code>.",
                                          :type "string"}},
             :id "Namespace"},
 :Date {:id "Date",
        :description "Represents a whole or partial calendar date, e.g. a birthday. The time of day\nand time zone are either specified elsewhere or are not significant. The date\nis relative to the Proleptic Gregorian Calendar. This can represent:\n\n* A full date, with non-zero year, month and day values\n* A month and day value, with a zero year, e.g. an anniversary\n* A year on its own, with zero month and day values\n* A year and month value, with a zero day, e.g. a credit card expiration date\n\nRelated types are google.type.TimeOfDay and `google.protobuf.Timestamp`.",
        :type "object",
        :properties {:month {:description "Month of year. Must be from 1 to 12, or 0 if specifying a year without a\nmonth and day.",
                             :format "int32",
                             :type "integer"},
                     :year {:description "Year of date. Must be from 1 to 9999, or 0 if specifying a date without\na year.",
                            :format "int32",
                            :type "integer"},
                     :day {:type "integer",
                           :description "Day of month. Must be from 1 to 31 and valid for the year and month, or 0\nif specifying a year by itself or a year and month where the day is not\nsignificant.",
                           :format "int32"}}},
 :AdvertisedId {:id "AdvertisedId",
                :description "Defines a unique identifier of a beacon as broadcast by the device.",
                :type "object",
                :properties {:id {:description "The actual beacon identifier, as broadcast by the beacon hardware. Must be\n[base64](http://tools.ietf.org/html/rfc4648#section-4) encoded in HTTP\nrequests, and will be so encoded (with padding) in responses. The base64\nencoding should be of the binary byte-stream and not any textual (such as\nhex) representation thereof.\nRequired.",
                                  :format "byte",
                                  :type "string"},
                             :type {:enum ["TYPE_UNSPECIFIED"
                                           "EDDYSTONE"
                                           "IBEACON"
                                           "ALTBEACON"
                                           "EDDYSTONE_EID"],
                                    :description "Specifies the identifier type.\nRequired.",
                                    :type "string",
                                    :enumDescriptions ["Do not use this value."
                                                       "Eddystone, an open beacon format that supports Android and iOS devices\nhttps://github.com/google/eddystone/wiki/Beacon-Specification"
                                                       "Apple iBeacon compatible beacon"
                                                       "See http://altbeacon.org and/or https://github.com/AltBeacon/spec."
                                                       "Eddystone Ephemeral ID"]}}},
 :IndoorLevel {:properties {:name {:description "The name of this level.",
                                   :type "string"}},
               :id "IndoorLevel",
               :description "Indoor level, a human-readable string as returned by Google Maps APIs,\nuseful to indicate which floor of a building a beacon is located on.",
               :type "object"},
 :GetInfoForObservedBeaconsResponse {:description "Information about the requested beacons, optionally including attachment\ndata.",
                                     :type "object",
                                     :properties {:beacons {:description "Public information about beacons.\nMay be empty if the request matched no beacons.",
                                                            :type "array",
                                                            :items {:$ref "BeaconInfo"}}},
                                     :id "GetInfoForObservedBeaconsResponse"},
 :AttachmentInfo {:id "AttachmentInfo",
                  :description "A subset of attachment information served via the\n`beaconinfo.getforobserved` method, used when your users encounter your\nbeacons.",
                  :type "object",
                  :properties {:maxDistanceMeters {:description "The distance away from the beacon at which this attachment should be\ndelivered to a mobile app.\n\nSetting this to a value greater than zero indicates that the app should\nbehave as if the beacon is \"seen\" when the mobile device is less than this\ndistance away from the beacon.\n\nDifferent attachments on the same beacon can have different max distances.\n\nNote that even though this value is expressed with fractional meter\nprecision, real-world behavior is likley to be much less precise than one\nmeter, due to the nature of current Bluetooth radio technology.\n\nOptional. When not set or zero, the attachment should be delivered at the\nbeacon's outer limit of detection.",
                                                   :format "double",
                                                   :type "number"},
                               :namespacedType {:description "Specifies what kind of attachment this is. Tells a client how to\ninterpret the `data` field. Format is <var>namespace/type</var>, for\nexample <code>scrupulous-wombat-12345/welcome-message</code>",
                                                :type "string"},
                               :data {:description "An opaque data container for client-provided data.",
                                      :format "byte",
                                      :type "string"}}},
 :ListBeaconAttachmentsResponse {:description "Response to `ListBeaconAttachments` that contains the requested attachments.",
                                 :type "object",
                                 :properties {:attachments {:description "The attachments that corresponded to the request params.",
                                                            :type "array",
                                                            :items {:$ref "BeaconAttachment"}}},
                                 :id "ListBeaconAttachmentsResponse"},
 :EphemeralIdRegistration {:description "Write-only registration parameters for beacons using Eddystone-EID format.\nTwo ways of securely registering an Eddystone-EID beacon with the service\nare supported:\n\n1. Perform an ECDH key exchange via this API, including a previous call\n   to `GET /v1beta1/eidparams`. In this case the fields\n   `beacon_ecdh_public_key` and `service_ecdh_public_key` should be\n   populated and `beacon_identity_key` should not be populated. This\n   method ensures that only the two parties in the ECDH key exchange can\n   compute the identity key, which becomes a secret between them.\n2. Derive or obtain the beacon's identity key via other secure means\n   (perhaps an ECDH key exchange between the beacon and a mobile device\n   or any other secure method), and then submit the resulting identity key\n   to the service. In this case `beacon_identity_key` field should be\n   populated, and neither of `beacon_ecdh_public_key` nor\n   `service_ecdh_public_key` fields should be. The security of this method\n   depends on how securely the parties involved (in particular the\n   bluetooth client) handle the identity key, and obviously on how\n   securely the identity key was generated.\n\nSee [the Eddystone\nspecification](https://github.com/google/eddystone/tree/master/eddystone-eid)\nat GitHub.",
                           :type "object",
                           :properties {:serviceEcdhPublicKey {:description "The service's public key used for the Elliptic curve Diffie-Hellman\nkey exchange. When this field is populated, `beacon_ecdh_public_key`\nmust also be populated, and `beacon_identity_key` must not be.",
                                                               :format "byte",
                                                               :type "string"},
                                        :beaconIdentityKey {:description "The private key of the beacon. If this field is populated,\n`beacon_ecdh_public_key` and `service_ecdh_public_key` must not be\npopulated.",
                                                            :format "byte",
                                                            :type "string"},
                                        :initialEid {:description "An initial ephemeral ID calculated using the clock value submitted as\n`initial_clock_value`, and the secret key generated by the\nDiffie-Hellman key exchange using `service_ecdh_public_key` and\n`service_ecdh_public_key`. This initial EID value will be used by the\nservice to confirm that the key exchange process was successful.",
                                                     :format "byte",
                                                     :type "string"},
                                        :initialClockValue {:description "The initial clock value of the beacon. The beacon's clock must have\nbegun counting at this value immediately prior to transmitting this\nvalue to the resolving service. Significant delay in transmitting this\nvalue to the service risks registration or resolution failures. If a\nvalue is not provided, the default is zero.",
                                                            :format "uint64",
                                                            :type "string"},
                                        :beaconEcdhPublicKey {:description "The beacon's public key used for the Elliptic curve Diffie-Hellman\nkey exchange. When this field is populated, `service_ecdh_public_key`\nmust also be populated, and `beacon_identity_key` must not be.",
                                                              :format "byte",
                                                              :type "string"},
                                        :rotationPeriodExponent {:description "Indicates the nominal period between each rotation of the beacon's\nephemeral ID. \"Nominal\" because the beacon should randomize the\nactual interval. See [the spec at\ngithub](https://github.com/google/eddystone/tree/master/eddystone-eid)\nfor details. This value corresponds to a power-of-two scaler on the\nbeacon's clock: when the scaler value is K, the beacon will begin\nbroadcasting a new ephemeral ID on average every 2^K seconds.",
                                                                 :format "uint32",
                                                                 :type "integer"}},
                           :id "EphemeralIdRegistration"},
 :EphemeralIdRegistrationParams {:id "EphemeralIdRegistrationParams",
                                 :description "Information a client needs to provision and register beacons that\nbroadcast Eddystone-EID format beacon IDs, using Elliptic curve\nDiffie-Hellman key exchange. See\n[the Eddystone\nspecification](https://github.com/google/eddystone/tree/master/eddystone-eid)\nat GitHub.",
                                 :type "object",
                                 :properties {:minRotationPeriodExponent {:description "Indicates the minimum rotation period supported by the service.\nSee\nEddystoneEidRegistration.rotation_period_exponent",
                                                                          :format "uint32",
                                                                          :type "integer"},
                                              :maxRotationPeriodExponent {:description "Indicates the maximum rotation period supported by the service.\nSee\nEddystoneEidRegistration.rotation_period_exponent",
                                                                          :format "uint32",
                                                                          :type "integer"},
                                              :serviceEcdhPublicKey {:description "The beacon service's public key for use by a beacon to derive its\nIdentity Key using Elliptic Curve Diffie-Hellman key exchange.",
                                                                     :format "byte",
                                                                     :type "string"}}},
 :BeaconInfo {:description "A subset of beacon information served via the `beaconinfo.getforobserved`\nmethod, which you call when users of your app encounter your beacons.",
              :type "object",
              :properties {:beaconName {:description "The name under which the beacon is registered.",
                                        :type "string"},
                           :advertisedId {:$ref "AdvertisedId",
                                          :description "The ID advertised by the beacon."},
                           :attachments {:type "array",
                                         :items {:$ref "AttachmentInfo"},
                                         :description "Attachments matching the type(s) requested.\nMay be empty if no attachment types were requested."}},
              :id "BeaconInfo"}}
