{:BatchGetPhotosResponse {:id "BatchGetPhotosResponse",
                          :description "Response to batch get of Photos.",
                          :type "object",
                          :properties {:results {:description "List of results for each individual\nPhoto requested, in the same order as\nthe requests in\nBatchGetPhotos.",
                                                 :type "array",
                                                 :items {:$ref "PhotoResponse"}}}},
 :UpdatePhotoRequest {:description "Request to update the metadata of a\nPhoto. Updating the pixels of a photo\nis not supported.",
                      :type "object",
                      :properties {:photo {:$ref "Photo",
                                           :description "Required. Photo object containing the\nnew metadata."},
                                   :updateMask {:type "string",
                                                :description "Required. Mask that identifies fields on the photo metadata to update.\nIf not present, the old Photo\nmetadata is entirely replaced with the\nnew Photo metadata in this request.\nThe update fails if invalid fields are specified. Multiple fields can be\nspecified in a comma-delimited list.\n\nThe following fields are valid:\n\n* `pose.heading`\n* `pose.latLngPair`\n* `pose.pitch`\n* `pose.roll`\n* `pose.level`\n* `pose.altitude`\n* `connections`\n* `places`\n\n\n<aside class=\"note\"><b>Note:</b> When\nupdateMask\ncontains repeated fields, the entire set of repeated values get replaced\nwith the new contents. For example, if\nupdateMask\ncontains `connections` and `UpdatePhotoRequest.photo.connections` is empty,\nall connections are removed.</aside>",
                                                :format "google-fieldmask"}},
                      :id "UpdatePhotoRequest"},
 :BatchUpdatePhotosRequest {:description "Request to update the metadata of photos.\nUpdating the pixels of photos is not supported.",
                            :type "object",
                            :properties {:updatePhotoRequests {:type "array",
                                                               :items {:$ref "UpdatePhotoRequest"},
                                                               :description "Required. List of\nUpdatePhotoRequests."}},
                            :id "BatchUpdatePhotosRequest"},
 :Operation {:description "This resource represents a long-running operation that is the result of a\nnetwork API call.",
             :type "object",
             :properties {:name {:type "string",
                                 :description "The server-assigned name, which is only unique within the same service that\noriginally returns it. If you use the default HTTP mapping, the\n`name` should be a resource name ending with `operations/{unique_id}`."},
                          :error {:description "The error result of the operation in case of failure or cancellation.",
                                  :$ref "Status"},
                          :metadata {:description "Service-specific metadata associated with the operation.  It typically\ncontains progress information and common metadata such as create time.\nSome services might not provide such metadata.  Any method that returns a\nlong-running operation should document the metadata type, if any.",
                                     :type "object",
                                     :additionalProperties {:description "Properties of the object. Contains field @type with type URL.",
                                                            :type "any"}},
                          :done {:description "If the value is `false`, it means the operation is still in progress.\nIf `true`, the operation is completed, and either `error` or `response` is\navailable.",
                                 :type "boolean"},
                          :response {:additionalProperties {:description "Properties of the object. Contains field @type with type URL.",
                                                            :type "any"},
                                     :description "The normal response of the operation in case of success.  If the original\nmethod returns no data on success, such as `Delete`, the response is\n`google.protobuf.Empty`.  If the original method is standard\n`Get`/`Create`/`Update`, the response should be the resource.  For other\nmethods, the response should have the type `XxxResponse`, where `Xxx`\nis the original method name.  For example, if the original method name\nis `TakeSnapshot()`, the inferred response type is\n`TakeSnapshotResponse`.",
                                     :type "object"}},
             :id "Operation"},
 :BatchDeletePhotosRequest {:description "Request to delete multiple Photos.",
                            :type "object",
                            :properties {:photoIds {:description "Required. IDs of the Photos. HTTP\nGET requests require the following syntax for the URL query parameter:\n`photoIds=<id1>&photoIds=<id2>&...`.",
                                                    :type "array",
                                                    :items {:type "string"}}},
                            :id "BatchDeletePhotosRequest"},
 :BatchUpdatePhotosResponse {:id "BatchUpdatePhotosResponse",
                             :description "Response to batch update of metadata of one or more\nPhotos.",
                             :type "object",
                             :properties {:results {:description "List of results for each individual\nPhoto updated, in the same order as\nthe request.",
                                                    :type "array",
                                                    :items {:$ref "PhotoResponse"}}}},
 :Empty {:id "Empty",
         :description "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.",
         :type "object",
         :properties {}},
 :LatLng {:id "LatLng",
          :description "An object representing a latitude/longitude pair. This is expressed as a pair\nof doubles representing degrees latitude and degrees longitude. Unless\nspecified otherwise, this must conform to the\n<a href=\"http://www.unoosa.org/pdf/icg/2012/template/WGS_84.pdf\">WGS84\nstandard</a>. Values must be within normalized ranges.",
          :type "object",
          :properties {:latitude {:description "The latitude in degrees. It must be in the range [-90.0, +90.0].",
                                  :format "double",
                                  :type "number"},
                       :longitude {:description "The longitude in degrees. It must be in the range [-180.0, +180.0].",
                                   :format "double",
                                   :type "number"}}},
 :Level {:description "Level information containing level number and its corresponding name.",
         :type "object",
         :properties {:number {:type "number",
                               :description "Floor number, used for ordering. 0 indicates the ground level, 1 indicates\nthe first level above ground level, -1 indicates the first level under\nground level. Non-integer values are OK.",
                               :format "double"},
                      :name {:description "Required. A name assigned to this Level, restricted to 3 characters.\nConsider how the elevator buttons would be labeled for this level if there\nwas an elevator.",
                             :type "string"}},
         :id "Level"},
 :UploadRef {:type "object",
             :properties {:uploadUrl {:type "string",
                                      :description "Required. An upload reference should be unique for each user. It follows\nthe form:\n\"https://streetviewpublish.googleapis.com/media/user/{account_id}/photo/{upload_reference}\""}},
             :id "UploadRef",
             :description "Upload reference for media files."},
 :Photo {:description "Photo is used to store 360 photos along with photo metadata.",
         :type "object",
         :properties {:captureTime {:description "Absolute time when the photo was captured.\nWhen the photo has no exif timestamp, this is used to set a timestamp in\nthe photo metadata.",
                                    :format "google-datetime",
                                    :type "string"},
                      :thumbnailUrl {:description "Output only. The thumbnail URL for showing a preview of the given photo.",
                                     :type "string"},
                      :uploadReference {:$ref "UploadRef",
                                        :description "Required when creating a photo. Input only. The resource URL where the\nphoto bytes are uploaded to."},
                      :viewCount {:description "Output only. View count of the photo.",
                                  :format "int64",
                                  :type "string"},
                      :transferStatus {:enum ["TRANSFER_STATUS_UNKNOWN"
                                              "NEVER_TRANSFERRED"
                                              "PENDING"
                                              "COMPLETED"
                                              "REJECTED"
                                              "EXPIRED"
                                              "CANCELLED"
                                              "RECEIVED_VIA_TRANSFER"],
                                       :description "Output only. Status of rights transfer on this photo.",
                                       :type "string",
                                       :enumDescriptions ["The status of this transfer is unspecified."
                                                          "This photo has never been in a transfer."
                                                          "This photo transfer has been initiated, but the receiver has not yet\nresponded."
                                                          "The photo transfer has been completed, and this photo has been\ntransferred to the recipient."
                                                          "The recipient rejected this photo transfer."
                                                          "The photo transfer expired before the recipient took any action."
                                                          "The sender cancelled this photo transfer."
                                                          "The recipient owns this photo due to a rights transfer."]},
                      :pose {:description "Pose of the photo.",
                             :$ref "Pose"},
                      :shareLink {:description "Output only. The share link for the photo.",
                                  :type "string"},
                      :mapsPublishStatus {:type "string",
                                          :enumDescriptions ["The status of the photo is unknown."
                                                             "The photo is published to the public through Google Maps."
                                                             "The photo has been rejected for an unknown reason."],
                                          :enum ["UNSPECIFIED_MAPS_PUBLISH_STATUS"
                                                 "PUBLISHED"
                                                 "REJECTED_UNKNOWN"],
                                          :description "Output only. Status in Google Maps, whether this photo was published or\nrejected. Not currently populated."},
                      :downloadUrl {:description "Output only. The download URL for the photo bytes. This field is set only\nwhen\nGetPhotoRequest.view\nis set to\nPhotoView.INCLUDE_DOWNLOAD_URL.",
                                    :type "string"},
                      :connections {:description "Connections to other photos. A connection represents the link from this\nphoto to another photo.",
                                    :type "array",
                                    :items {:$ref "Connection"}},
                      :places {:type "array",
                               :items {:$ref "Place"},
                               :description "Places where this photo belongs."},
                      :photoId {:$ref "PhotoId",
                                :description "Required when updating a photo. Output only when creating a photo.\nIdentifier for the photo, which is unique among all photos in\nGoogle."}},
         :id "Photo"},
 :Place {:type "object",
         :properties {:name {:description "Output-only. The name of the place, localized to the language_code.",
                             :type "string"},
                      :placeId {:description "Place identifier, as described in\nhttps://developers.google.com/places/place-id.",
                                :type "string"},
                      :languageCode {:description "Output-only. The language_code that the name is localized with. This should\nbe the language_code specified in the request, but may be a fallback.",
                                     :type "string"}},
         :id "Place",
         :description "Place metadata for an entity."},
 :BatchDeletePhotosResponse {:type "object",
                             :properties {:status {:description "The status for the operation to delete a single\nPhoto in the batch request.",
                                                   :type "array",
                                                   :items {:$ref "Status"}}},
                             :id "BatchDeletePhotosResponse",
                             :description "Response to batch delete of one or more\nPhotos."},
 :PhotoId {:id "PhotoId",
           :description "Identifier for a Photo.",
           :type "object",
           :properties {:id {:description "Required. A unique identifier for a photo.",
                             :type "string"}}},
 :Pose {:description "Raw pose measurement for an entity.",
        :type "object",
        :properties {:accuracyMeters {:description "The estimated horizontal accuracy of this pose in meters with 68%\nconfidence (one standard deviation). For example, on Android, this value is\navailable from this method:\nhttps://developer.android.com/reference/android/location/Location#getAccuracy().\nOther platforms have different methods of obtaining similar accuracy\nestimations.",
                                      :format "float",
                                      :type "number"},
                     :level {:$ref "Level",
                             :description "Level (the floor in a building) used to configure vertical navigation."},
                     :heading {:type "number",
                               :description "Compass heading, measured at the center of the photo in degrees clockwise\nfrom North. Value must be >=0 and <360.\nNaN indicates an unmeasured quantity.",
                               :format "double"},
                     :altitude {:description "Altitude of the pose in meters above WGS84 ellipsoid.\nNaN indicates an unmeasured quantity.",
                                :format "double",
                                :type "number"},
                     :pitch {:description "Pitch, measured at the center of the photo in degrees. Value must be >=-90\nand <= 90. A value of -90 means looking directly down, and a value of 90\nmeans looking directly up.\nNaN indicates an unmeasured quantity.",
                             :format "double",
                             :type "number"},
                     :latLngPair {:description "Latitude and longitude pair of the pose, as explained here:\nhttps://cloud.google.com/datastore/docs/reference/rest/Shared.Types/LatLng\nWhen creating a Photo, if the\nlatitude and longitude pair are not provided, the geolocation from the\nexif header is used. A latitude and longitude pair not provided in the\nphoto or exif header causes the photo process to fail.",
                                  :$ref "LatLng"},
                     :roll {:description "Roll, measured in degrees. Value must be >= 0 and <360. A value of 0\nmeans level with the horizon.\nNaN indicates an unmeasured quantity.",
                            :format "double",
                            :type "number"}},
        :id "Pose"},
 :ListPhotosResponse {:description "Response to list all photos that belong to a user.",
                      :type "object",
                      :properties {:photos {:type "array",
                                            :items {:$ref "Photo"},
                                            :description "List of photos. The\npageSize field\nin the request determines the number of items returned."},
                                   :nextPageToken {:description "Token to retrieve the next page of results, or empty if there are no more\nresults in the list.",
                                                   :type "string"}},
                      :id "ListPhotosResponse"},
 :Connection {:description "A connection is the link from a source photo to a destination photo.",
              :type "object",
              :properties {:target {:$ref "PhotoId",
                                    :description "Required. The destination of the connection from the containing photo to\nanother photo."}},
              :id "Connection"},
 :PhotoResponse {:description "Response payload for a single\nPhoto\nin batch operations including\nBatchGetPhotos\nand\nBatchUpdatePhotos.",
                 :type "object",
                 :properties {:status {:description "The status for the operation to get or update a single photo in the batch\nrequest.",
                                       :$ref "Status"},
                              :photo {:$ref "Photo",
                                      :description "The Photo resource, if the request\nwas successful."}},
                 :id "PhotoResponse"},
 :Status {:type "object",
          :properties {:code {:type "integer",
                              :description "The status code, which should be an enum value of google.rpc.Code.",
                              :format "int32"},
                       :message {:description "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\ngoogle.rpc.Status.details field, or localized by the client.",
                                 :type "string"},
                       :details {:type "array",
                                 :items {:type "object",
                                         :additionalProperties {:description "Properties of the object. Contains field @type with type URL.",
                                                                :type "any"}},
                                 :description "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use."}},
          :id "Status",
          :description "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https://cloud.google.com/apis/design/errors)."}}
