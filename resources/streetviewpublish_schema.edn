{:BatchGetPhotosResponse {:type "object",
                          :properties {:results {:description "List of results for each individual Photo requested, in the same order as the requests in BatchGetPhotos.",
                                                 :items {:$ref "PhotoResponse"},
                                                 :type "array"}},
                          :id "BatchGetPhotosResponse",
                          :description "Response to batch get of Photos."},
 :UpdatePhotoRequest {:type "object",
                      :description "Request to update the metadata of a Photo. Updating the pixels of a photo is not supported.",
                      :id "UpdatePhotoRequest",
                      :properties {:updateMask {:format "google-fieldmask",
                                                :type "string",
                                                :description "Required. Mask that identifies fields on the photo metadata to update. If not present, the old Photo metadata is entirely replaced with the new Photo metadata in this request. The update fails if invalid fields are specified. Multiple fields can be specified in a comma-delimited list. The following fields are valid: * `pose.heading` * `pose.latLngPair` * `pose.pitch` * `pose.roll` * `pose.level` * `pose.altitude` * `connections` * `places` *Note:* When updateMask contains repeated fields, the entire set of repeated values get replaced with the new contents. For example, if updateMask contains `connections` and `UpdatePhotoRequest.photo.connections` is empty, all connections are removed."},
                                   :photo {:$ref "Photo",
                                           :description "Required. Photo object containing the new metadata."}}},
 :BatchUpdatePhotosRequest {:description "Request to update the metadata of photos. Updating the pixels of photos is not supported.",
                            :id "BatchUpdatePhotosRequest",
                            :type "object",
                            :properties {:updatePhotoRequests {:type "array",
                                                               :items {:$ref "UpdatePhotoRequest"},
                                                               :description "Required. List of UpdatePhotoRequests."}}},
 :Operation {:id "Operation",
             :properties {:metadata {:additionalProperties {:type "any",
                                                            :description "Properties of the object. Contains field @type with type URL."},
                                     :type "object",
                                     :description "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any."},
                          :response {:additionalProperties {:type "any",
                                                            :description "Properties of the object. Contains field @type with type URL."},
                                     :description "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                                     :type "object"},
                          :done {:type "boolean",
                                 :description "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."},
                          :error {:$ref "Status",
                                  :description "The error result of the operation in case of failure or cancellation."},
                          :name {:description "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                                 :type "string"}},
             :type "object",
             :description "This resource represents a long-running operation that is the result of a network API call."},
 :BatchDeletePhotosRequest {:id "BatchDeletePhotosRequest",
                            :properties {:photoIds {:items {:type "string"},
                                                    :type "array",
                                                    :description "Required. IDs of the Photos. HTTP GET requests require the following syntax for the URL query parameter: `photoIds=&photoIds=&...`."}},
                            :type "object",
                            :description "Request to delete multiple Photos."},
 :BatchUpdatePhotosResponse {:type "object",
                             :properties {:results {:type "array",
                                                    :description "List of results for each individual Photo updated, in the same order as the request.",
                                                    :items {:$ref "PhotoResponse"}}},
                             :id "BatchUpdatePhotosResponse",
                             :description "Response to batch update of metadata of one or more Photos."},
 :Empty {:type "object",
         :properties {},
         :id "Empty",
         :description "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."},
 :LatLng {:id "LatLng",
          :properties {:longitude {:description "The longitude in degrees. It must be in the range [-180.0, +180.0].",
                                   :format "double",
                                   :type "number"},
                       :latitude {:description "The latitude in degrees. It must be in the range [-90.0, +90.0].",
                                  :format "double",
                                  :type "number"}},
          :type "object",
          :description "An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this must conform to the WGS84 standard. Values must be within normalized ranges."},
 :Level {:id "Level",
         :type "object",
         :properties {:number {:type "number",
                               :format "double",
                               :description "Floor number, used for ordering. 0 indicates the ground level, 1 indicates the first level above ground level, -1 indicates the first level under ground level. Non-integer values are OK."},
                      :name {:description "Required. A name assigned to this Level, restricted to 3 characters. Consider how the elevator buttons would be labeled for this level if there was an elevator.",
                             :type "string"}},
         :description "Level information containing level number and its corresponding name."},
 :UploadRef {:properties {:uploadUrl {:description "Required. An upload reference should be unique for each user. It follows the form: \"https://streetviewpublish.googleapis.com/media/user/{account_id}/photo/{upload_reference}\"",
                                      :type "string"}},
             :type "object",
             :id "UploadRef",
             :description "Upload reference for media files."},
 :Photo {:description "Photo is used to store 360 photos along with photo metadata.",
         :id "Photo",
         :type "object",
         :properties {:captureTime {:format "google-datetime",
                                    :description "Absolute time when the photo was captured. When the photo has no exif timestamp, this is used to set a timestamp in the photo metadata.",
                                    :type "string"},
                      :thumbnailUrl {:type "string",
                                     :description "Output only. The thumbnail URL for showing a preview of the given photo."},
                      :uploadReference {:description "Required when creating a photo. Input only. The resource URL where the photo bytes are uploaded to.",
                                        :$ref "UploadRef"},
                      :viewCount {:type "string",
                                  :format "int64",
                                  :description "Output only. View count of the photo."},
                      :transferStatus {:description "Output only. Status of rights transfer on this photo.",
                                       :enumDescriptions ["The status of this transfer is unspecified."
                                                          "This photo has never been in a transfer."
                                                          "This photo transfer has been initiated, but the receiver has not yet responded."
                                                          "The photo transfer has been completed, and this photo has been transferred to the recipient."
                                                          "The recipient rejected this photo transfer."
                                                          "The photo transfer expired before the recipient took any action."
                                                          "The sender cancelled this photo transfer."
                                                          "The recipient owns this photo due to a rights transfer."],
                                       :type "string",
                                       :enum ["TRANSFER_STATUS_UNKNOWN"
                                              "NEVER_TRANSFERRED"
                                              "PENDING"
                                              "COMPLETED"
                                              "REJECTED"
                                              "EXPIRED"
                                              "CANCELLED"
                                              "RECEIVED_VIA_TRANSFER"]},
                      :pose {:$ref "Pose",
                             :description "Pose of the photo."},
                      :shareLink {:type "string",
                                  :description "Output only. The share link for the photo."},
                      :mapsPublishStatus {:enum ["UNSPECIFIED_MAPS_PUBLISH_STATUS"
                                                 "PUBLISHED"
                                                 "REJECTED_UNKNOWN"],
                                          :description "Output only. Status in Google Maps, whether this photo was published or rejected. Not currently populated.",
                                          :type "string",
                                          :enumDescriptions ["The status of the photo is unknown."
                                                             "The photo is published to the public through Google Maps."
                                                             "The photo has been rejected for an unknown reason."]},
                      :downloadUrl {:type "string",
                                    :description "Output only. The download URL for the photo bytes. This field is set only when GetPhotoRequest.view is set to PhotoView.INCLUDE_DOWNLOAD_URL."},
                      :connections {:type "array",
                                    :description "Connections to other photos. A connection represents the link from this photo to another photo.",
                                    :items {:$ref "Connection"}},
                      :places {:type "array",
                               :description "Places where this photo belongs.",
                               :items {:$ref "Place"}},
                      :photoId {:$ref "PhotoId",
                                :description "Required when updating a photo. Output only when creating a photo. Identifier for the photo, which is unique among all photos in Google."}}},
 :Place {:id "Place",
         :type "object",
         :description "Place metadata for an entity.",
         :properties {:languageCode {:type "string",
                                     :description "Output-only. The language_code that the name is localized with. This should be the language_code specified in the request, but may be a fallback."},
                      :name {:type "string",
                             :description "Output-only. The name of the place, localized to the language_code."},
                      :placeId {:description "Place identifier, as described in https://developers.google.com/places/place-id.",
                                :type "string"}}},
 :BatchDeletePhotosResponse {:description "Response to batch delete of one or more Photos.",
                             :properties {:status {:description "The status for the operation to delete a single Photo in the batch request.",
                                                   :type "array",
                                                   :items {:$ref "Status"}}},
                             :id "BatchDeletePhotosResponse",
                             :type "object"},
 :PhotoId {:type "object",
           :properties {:id {:description "Required. A unique identifier for a photo.",
                             :type "string"}},
           :id "PhotoId",
           :description "Identifier for a Photo."},
 :Pose {:type "object",
        :properties {:pitch {:format "double",
                             :type "number",
                             :description "Pitch, measured at the center of the photo in degrees. Value must be >=-90 and <= 90. A value of -90 means looking directly down, and a value of 90 means looking directly up. NaN indicates an unmeasured quantity."},
                     :roll {:description "Roll, measured in degrees. Value must be >= 0 and <360. A value of 0 means level with the horizon. NaN indicates an unmeasured quantity.",
                            :format "double",
                            :type "number"},
                     :altitude {:type "number",
                                :format "double",
                                :description "Altitude of the pose in meters above WGS84 ellipsoid. NaN indicates an unmeasured quantity."},
                     :latLngPair {:$ref "LatLng",
                                  :description "Latitude and longitude pair of the pose, as explained here: https://cloud.google.com/datastore/docs/reference/rest/Shared.Types/LatLng When creating a Photo, if the latitude and longitude pair are not provided, the geolocation from the exif header is used. A latitude and longitude pair not provided in the photo or exif header causes the photo process to fail."},
                     :level {:$ref "Level",
                             :description "Level (the floor in a building) used to configure vertical navigation."},
                     :accuracyMeters {:format "float",
                                      :description "The estimated horizontal accuracy of this pose in meters with 68% confidence (one standard deviation). For example, on Android, this value is available from this method: https://developer.android.com/reference/android/location/Location#getAccuracy(). Other platforms have different methods of obtaining similar accuracy estimations.",
                                      :type "number"},
                     :heading {:format "double",
                               :description "Compass heading, measured at the center of the photo in degrees clockwise from North. Value must be >=0 and <360. NaN indicates an unmeasured quantity.",
                               :type "number"}},
        :description "Raw pose measurement for an entity.",
        :id "Pose"},
 :ListPhotosResponse {:description "Response to list all photos that belong to a user.",
                      :id "ListPhotosResponse",
                      :properties {:nextPageToken {:type "string",
                                                   :description "Token to retrieve the next page of results, or empty if there are no more results in the list."},
                                   :photos {:items {:$ref "Photo"},
                                            :description "List of photos. The pageSize field in the request determines the number of items returned.",
                                            :type "array"}},
                      :type "object"},
 :Connection {:properties {:target {:description "Required. The destination of the connection from the containing photo to another photo.",
                                    :$ref "PhotoId"}},
              :description "A connection is the link from a source photo to a destination photo.",
              :id "Connection",
              :type "object"},
 :PhotoResponse {:type "object",
                 :properties {:photo {:description "The Photo resource, if the request was successful.",
                                      :$ref "Photo"},
                              :status {:$ref "Status",
                                       :description "The status for the operation to get or update a single photo in the batch request."}},
                 :description "Response payload for a single Photo in batch operations including BatchGetPhotos and BatchUpdatePhotos.",
                 :id "PhotoResponse"},
 :Status {:description "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
          :type "object",
          :properties {:code {:description "The status code, which should be an enum value of google.rpc.Code.",
                              :type "integer",
                              :format "int32"},
                       :message {:type "string",
                                 :description "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."},
                       :details {:description "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                                 :type "array",
                                 :items {:additionalProperties {:description "Properties of the object. Contains field @type with type URL.",
                                                                :type "any"},
                                         :type "object"}}},
          :id "Status"}}
