{:QueryRequestInput {:description "Device ID inputs to QueryRequest.",
                     :type "object",
                     :properties {:payload {:description "Payload containing third-party partner's device IDs.",
                                            :$ref "QueryRequestPayload"}},
                     :id "QueryRequestInput"},
 :SyncRequest {:id "SyncRequest",
               :description "Request type for the [`Sync`](#google.home.graph.v1.HomeGraphApiService.Sync)\ncall. This should follow the same format as the Actions on Google\n`action.devices.SYNC`\n[request](/actions/smarthome/create-app#actiondevicessync) with the exception\nof the extra `agent_user_id` and no `intent` field.",
               :type "object",
               :properties {:requestId {:description "Request ID used for debugging.",
                                        :type "string"},
                            :agentUserId {:description "Required. Third-party user ID.",
                                          :type "string"}}},
 :QueryResponse {:description "Response type for the\n[`Query`](#google.home.graph.v1.HomeGraphApiService.Query) call. This should\nfollow the same format as the Actions on Google `action.devices.QUERY`\n[response](/actions/smarthome/create-app#actiondevicesquery).\n# Example\n\n```json\n{\n  \"requestId\": \"ff36a3cc-ec34-11e6-b1a0-64510650abcf\",\n  \"payload\": {\n    \"devices\": {\n      \"123\": {\n        \"on\": true,\n        \"online\": true\n      },\n      \"456\": {\n        \"on\": true,\n        \"online\": true,\n        \"brightness\": 80,\n        \"color\": {\n          \"name\": \"cerulean\",\n          \"spectrumRGB\": 31655\n        }\n      }\n    }\n  }\n}\n```",
                 :type "object",
                 :properties {:requestId {:description "Request ID used for debugging. Copied from the request.",
                                          :type "string"},
                              :payload {:$ref "QueryResponsePayload",
                                        :description "Device states for the devices given in the request."}},
                 :id "QueryResponse"},
 :StateAndNotificationPayload {:description "Payload containing the state and notification information for devices.",
                               :type "object",
                               :properties {:devices {:$ref "ReportStateAndNotificationDevice",
                                                      :description "The devices for updating state and sending notifications."}},
                               :id "StateAndNotificationPayload"},
 :QueryRequestPayload {:id "QueryRequestPayload",
                       :description "Payload containing device IDs.",
                       :type "object",
                       :properties {:devices {:description "Third-party partner's device IDs for which to get the device states.",
                                              :type "array",
                                              :items {:$ref "AgentDeviceId"}}}},
 :ReportStateAndNotificationDevice {:id "ReportStateAndNotificationDevice",
                                    :description "The states and notifications specific to a device.",
                                    :type "object",
                                    :properties {:notifications {:additionalProperties {:description "Properties of the object.",
                                                                                        :type "any"},
                                                                 :description "Notifications metadata for devices.",
                                                                 :type "object"},
                                                 :states {:additionalProperties {:description "Properties of the object.",
                                                                                 :type "any"},
                                                          :description "States of devices to update.",
                                                          :type "object"}}},
 :DeviceNames {:type "object",
               :properties {:name {:description "Primary name of the device, generally provided by the user.",
                                   :type "string"},
                            :nicknames {:type "array",
                                        :items {:type "string"},
                                        :description "Additional names provided by the user for the device."},
                            :defaultNames {:description "List of names provided by the partner rather than the user, often\nmanufacturer names, SKUs, etc.",
                                           :type "array",
                                           :items {:type "string"}}},
               :id "DeviceNames",
               :description "Different names for the device."},
 :SyncResponse {:description "Response type for the\n[`Sync`](#google.home.graph.v1.HomeGraphApiService.Sync) call. This should\nfollow the same format as the Actions on Google `action.devices.SYNC`\n[response](/actions/smarthome/create-app#actiondevicessync).\n# Example\n\n```json\n{\n  \"requestId\": \"ff36a3cc-ec34-11e6-b1a0-64510650abcf\",\n  \"payload\": {\n    \"agentUserId\": \"1836.15267389\",\n    \"devices\": [{\n      \"id\": \"123\",\n      \"type\": \"action.devices.types.OUTLET\",\n      \"traits\": [\n        \"action.devices.traits.OnOff\"\n      ],\n      \"name\": {\n        \"defaultNames\": [\"My Outlet 1234\"],\n        \"name\": \"Night light\",\n        \"nicknames\": [\"wall plug\"]\n      },\n      \"willReportState\": false,\n      \"deviceInfo\": {\n        \"manufacturer\": \"lights-out-inc\",\n        \"model\": \"hs1234\",\n        \"hwVersion\": \"3.2\",\n        \"swVersion\": \"11.4\"\n      },\n      \"customData\": {\n        \"fooValue\": 74,\n        \"barValue\": true,\n        \"bazValue\": \"foo\"\n      }\n    }]\n  }\n}\n```",
                :type "object",
                :properties {:payload {:description "Devices associated with the third-party user.",
                                       :$ref "SyncResponsePayload"},
                             :requestId {:description "Request ID used for debugging. Copied from the request.",
                                         :type "string"}},
                :id "SyncResponse"},
 :AgentOtherDeviceId {:description "Identifies a device in the third party or first party system.",
                      :type "object",
                      :properties {:agentId {:description "The agent's ID. Generally it is the agent's AoG project id.",
                                             :type "string"},
                                   :deviceId {:description "Device ID defined by the agent. The device_id must be unique.",
                                              :type "string"}},
                      :id "AgentOtherDeviceId"},
 :DeviceInfo {:id "DeviceInfo",
              :description "Device information.",
              :type "object",
              :properties {:manufacturer {:type "string",
                                          :description "Device manufacturer."},
                           :hwVersion {:description "Device hardware version.",
                                       :type "string"},
                           :model {:description "Device model.",
                                   :type "string"},
                           :swVersion {:type "string",
                                       :description "Device software version."}}},
 :QueryRequest {:description "Request type for the\n[`Query`](#google.home.graph.v1.HomeGraphApiService.Query) call. This should\nbe the same format as the Actions on Google `action.devices.QUERY`\n[request](/actions/smarthome/create-app#actiondevicesquery) with the\nexception of the extra `agent_user_id` and no `intent` and `customData`\nfields.",
                :type "object",
                :properties {:requestId {:type "string",
                                         :description "Request ID used for debugging."},
                             :inputs {:description "Required. Inputs containing third-party partner's device IDs for which to\nget the device states.",
                                      :type "array",
                                      :items {:$ref "QueryRequestInput"}},
                             :agentUserId {:description "Required. Third-party user ID.",
                                           :type "string"}},
                :id "QueryRequest"},
 :RequestSyncDevicesRequest {:description "Request type for the\n[`RequestSyncDevices`](#google.home.graph.v1.HomeGraphApiService.RequestSyncDevices)\ncall.",
                             :type "object",
                             :properties {:agentUserId {:description "Required. Third-party user ID issued by agent's third-party identity\nprovider.",
                                                        :type "string"},
                                          :async {:description "Optional. If set, the request will be added to a queue and a response will\nbe returned immediately. The queue allows for de-duplication of\nsimultaneous requests.",
                                                  :type "boolean"}},
                             :id "RequestSyncDevicesRequest"},
 :Empty {:description "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.",
         :type "object",
         :properties {},
         :id "Empty"},
 :ReportStateAndNotificationResponse {:properties {:requestId {:description "Request ID copied from ReportStateAndNotificationRequest.",
                                                               :type "string"}},
                                      :id "ReportStateAndNotificationResponse",
                                      :description "Response type for the\n[`ReportStateAndNotification`](#google.home.graph.v1.HomeGraphApiService.ReportStateAndNotification)\ncall.",
                                      :type "object"},
 :SyncResponsePayload {:description "Payload containing device information.",
                       :type "object",
                       :properties {:devices {:description "Devices associated with the third-party user.",
                                              :type "array",
                                              :items {:$ref "Device"}},
                                    :agentUserId {:description "Third-party user ID",
                                                  :type "string"}},
                       :id "SyncResponsePayload"},
 :AgentDeviceId {:description "Third-party partner's device ID for one device.",
                 :type "object",
                 :properties {:id {:description "Third-party partner's device ID.",
                                   :type "string"}},
                 :id "AgentDeviceId"},
 :ReportStateAndNotificationRequest {:properties {:eventId {:description "Unique identifier per event (for example, a doorbell press).",
                                                            :type "string"},
                                                  :agentUserId {:description "Required. Third-party user ID.",
                                                                :type "string"},
                                                  :payload {:description "Required. State of devices to update and notification metadata for devices. For\nexample, if a user turns a light on manually, a state update should be\nsent so that the information is always the current status of the device.\nNotifications are independent from the state and its piece of the payload\nshould contain everything necessary to notify the user. Although it may be\nrelated to a state change, it does not need to be. For example, if a\ndevice can turn on/off and change temperature, the states reported would\ninclude both \"on\" and \"70 degrees\" but the 3p may choose not to send any\nnotification for that, or to only say that the \"the room is heating up\",\nkeeping state and notification independent.",
                                                            :$ref "StateAndNotificationPayload"},
                                                  :requestId {:description "Request ID used for debugging.",
                                                              :type "string"},
                                                  :followUpToken {:description "Token to maintain state in the follow up notification response.",
                                                                  :type "string"}},
                                     :id "ReportStateAndNotificationRequest",
                                     :description "Request type for the\n[`ReportStateAndNotification`](#google.home.graph.v1.HomeGraphApiService.ReportStateAndNotification)\ncall. It may include States, Notifications, or both. This request uses\nglobally unique flattened state names instead of namespaces based on traits\nto align with the existing QUERY and EXECUTE APIs implemented by 90+ Smart\nHome partners. States and notifications are defined per `device_id` (for example, \"123\"\nand \"456\" in the following example). # Example\n```json\n{\n  \"requestId\": \"ff36a3cc-ec34-11e6-b1a0-64510650abcf\",\n  \"agentUserId\": \"1234\",\n  \"payload\": {\n    \"devices\": {\n      \"states\": {\n        \"123\": {\n          \"on\": true\n        },\n        \"456\": {\n          \"on\": true,\n          \"brightness\": 10\n        }\n      },\n    }\n  }\n}\n```",
                                     :type "object"},
 :QueryResponsePayload {:description "Payload containing device states information.",
                        :type "object",
                        :properties {:devices {:additionalProperties {:additionalProperties {:description "Properties of the object.",
                                                                                             :type "any"},
                                                                      :type "object"},
                                               :description "States of the devices. Map of third-party device ID to struct of device\nstates.",
                                               :type "object"}},
                        :id "QueryResponsePayload"},
 :Device {:description "Third-party partner's device definition.",
          :type "object",
          :properties {:notificationSupportedByAgent {:description "Indicates whether the device is capable of sending notifications. This\nfield will be set by the agent (partner) on an incoming SYNC. If a device\nis not capable of generating notifications, the partner should set this\nflag to false. If a partner is not capable of calling\nReportStateAndNotification to send notifications to Google, the partner\nshould set this flag to false. If there is a user setting in the partner\napp to enable notifications and it is turned off, the partner should set\nthis flag to false.",
                                                      :type "boolean"},
                       :willReportState {:description "Indicates whether the state of this device is being reported to Google\nthrough ReportStateAndNotification call.",
                                         :type "boolean"},
                       :deviceInfo {:description "Device manufacturer, model, hardware version, and software version.",
                                    :$ref "DeviceInfo"},
                       :otherDeviceIds {:description "IDs of other devices associated with this device. This is used to\nrepresent a device group (e.g. bonded zone) or \"facets\" synced\nthrough different flows (e.g. Google Nest Hub Max with a Nest Camera).\n\nThis may also be used to pass in alternate IDs used to identify a cloud\nsynced device for local execution (i.e. local verification). If used for\nlocal verification, this field is synced from the cloud.",
                                        :type "array",
                                        :items {:$ref "AgentOtherDeviceId"}},
                       :name {:$ref "DeviceNames",
                              :description "Name of the device given by the third party. This includes names given to\nthe device via third party device manufacturer's app, model names for the\ndevice, etc."},
                       :type {:description "Hardware type of the device (e.g. light, outlet, etc).",
                              :type "string"},
                       :roomHint {:description "If the third-party partner's cloud configuration includes placing devices\nin rooms, the name of the room can be provided here.",
                                  :type "string"},
                       :id {:type "string",
                            :description "Third-party partner's device ID."},
                       :structureHint {:description "As in roomHint, for structures that users set up in the partner's system.",
                                       :type "string"},
                       :attributes {:additionalProperties {:description "Properties of the object.",
                                                           :type "any"},
                                    :description "Attributes for the traits supported by the device.",
                                    :type "object"},
                       :customData {:additionalProperties {:description "Properties of the object.",
                                                           :type "any"},
                                    :description "Custom JSON data provided by the manufacturer and attached to QUERY and\nEXECUTE requests in AoG.",
                                    :type "object"},
                       :traits {:description "Traits supported by the device.",
                                :type "array",
                                :items {:type "string"}}},
          :id "Device"},
 :RequestSyncDevicesResponse {:description "Response type for the\n[`RequestSyncDevices`](#google.home.graph.v1.HomeGraphApiService.RequestSyncDevices)\ncall. Intentionally empty upon success. An HTTP response code is returned\nwith more details upon failure.",
                              :type "object",
                              :properties {},
                              :id "RequestSyncDevicesResponse"}}
